
SPACE_solar_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b078  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b208  0800b208  0001b208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6fc  0800b6fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6fc  0800b6fc  0001b6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b704  0800b704  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b704  0800b704  0001b704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b708  0800b708  0001b708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b70c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  200001dc  0800b8e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  0800b8e8  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a285  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003452  00000000  00000000  0003a491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  0003eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c90  00000000  00000000  00040310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1ab  00000000  00000000  00064fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e404d  00000000  00000000  0008014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eec  00000000  00000000  001641e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1f0 	.word	0x0800b1f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b1f0 	.word	0x0800b1f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f62:	4b3e      	ldr	r3, [pc, #248]	; (800105c <MX_ADC1_Init+0x110>)
 8000f64:	4a3e      	ldr	r2, [pc, #248]	; (8001060 <MX_ADC1_Init+0x114>)
 8000f66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f68:	4b3c      	ldr	r3, [pc, #240]	; (800105c <MX_ADC1_Init+0x110>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	; (800105c <MX_ADC1_Init+0x110>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f74:	4b39      	ldr	r3, [pc, #228]	; (800105c <MX_ADC1_Init+0x110>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f7a:	4b38      	ldr	r3, [pc, #224]	; (800105c <MX_ADC1_Init+0x110>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f80:	4b36      	ldr	r3, [pc, #216]	; (800105c <MX_ADC1_Init+0x110>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f86:	4b35      	ldr	r3, [pc, #212]	; (800105c <MX_ADC1_Init+0x110>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f8c:	4b33      	ldr	r3, [pc, #204]	; (800105c <MX_ADC1_Init+0x110>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <MX_ADC1_Init+0x110>)
 8000f94:	2204      	movs	r2, #4
 8000f96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f98:	4b30      	ldr	r3, [pc, #192]	; (800105c <MX_ADC1_Init+0x110>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	; (800105c <MX_ADC1_Init+0x110>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_ADC1_Init+0x110>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <MX_ADC1_Init+0x110>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	; (800105c <MX_ADC1_Init+0x110>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <MX_ADC1_Init+0x110>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc2:	4826      	ldr	r0, [pc, #152]	; (800105c <MX_ADC1_Init+0x110>)
 8000fc4:	f001 fba2 	bl	800270c <HAL_ADC_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000fce:	f000 fd14 	bl	80019fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_ADC1_Init+0x118>)
 8000fd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fde:	237f      	movs	r3, #127	; 0x7f
 8000fe0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	481b      	ldr	r0, [pc, #108]	; (800105c <MX_ADC1_Init+0x110>)
 8000ff0:	f001 fd6c 	bl	8002acc <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ffa:	f000 fcfe 	bl	80019fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_ADC1_Init+0x11c>)
 8001000:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001002:	230c      	movs	r3, #12
 8001004:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <MX_ADC1_Init+0x110>)
 800100c:	f001 fd5e 	bl	8002acc <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001016:	f000 fcf0 	bl	80019fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_ADC1_Init+0x120>)
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800101e:	2312      	movs	r3, #18
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_ADC1_Init+0x110>)
 8001028:	f001 fd50 	bl	8002acc <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001032:	f000 fce2 	bl	80019fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_ADC1_Init+0x124>)
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800103a:	2318      	movs	r3, #24
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <MX_ADC1_Init+0x110>)
 8001044:	f001 fd42 	bl	8002acc <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800104e:	f000 fcd4 	bl	80019fa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001f8 	.word	0x200001f8
 8001060:	50040000 	.word	0x50040000
 8001064:	25b00200 	.word	0x25b00200
 8001068:	2a000400 	.word	0x2a000400
 800106c:	2e300800 	.word	0x2e300800
 8001070:	3ef08000 	.word	0x3ef08000

08001074 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0a2      	sub	sp, #136	; 0x88
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	225c      	movs	r2, #92	; 0x5c
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f006 ffbb 	bl	8008010 <memset>
  if(adcHandle->Instance==ADC1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a47      	ldr	r2, [pc, #284]	; (80011bc <HAL_ADC_MspInit+0x148>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	f040 8087 	bne.w	80011b4 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010b0:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010ba:	2308      	movs	r3, #8
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010be:	2307      	movs	r3, #7
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 fba5 	bl	8005824 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010e0:	f000 fc8b 	bl	80019fa <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <HAL_ADC_MspInit+0x14c>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	4a35      	ldr	r2, [pc, #212]	; (80011c0 <HAL_ADC_MspInit+0x14c>)
 80010ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_ADC_MspInit+0x14c>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <HAL_ADC_MspInit+0x14c>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <HAL_ADC_MspInit+0x14c>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_ADC_MspInit+0x14c>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_ADC_MspInit+0x14c>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <HAL_ADC_MspInit+0x14c>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_ADC_MspInit+0x14c>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC_Rad_Pin|ISence1_Pin|ISence2_Pin;
 800112c:	2370      	movs	r3, #112	; 0x70
 800112e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001130:	230b      	movs	r3, #11
 8001132:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f002 fd45 	bl	8003bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_Ilum_Pin;
 8001146:	2301      	movs	r3, #1
 8001148:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800114a:	230b      	movs	r3, #11
 800114c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ADC_Ilum_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001156:	4619      	mov	r1, r3
 8001158:	481a      	ldr	r0, [pc, #104]	; (80011c4 <HAL_ADC_MspInit+0x150>)
 800115a:	f002 fd39 	bl	8003bd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 8001160:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_ADC_MspInit+0x158>)
 8001162:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 800117e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001182:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 8001186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 800118e:	2220      	movs	r2, #32
 8001190:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 800119a:	f002 faa3 	bl	80036e4 <HAL_DMA_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80011a4:	f000 fc29 	bl	80019fa <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 80011ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3788      	adds	r7, #136	; 0x88
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	50040000 	.word	0x50040000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000400 	.word	0x48000400
 80011c8:	2000025c 	.word	0x2000025c
 80011cc:	40020008 	.word	0x40020008

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_DMA_Init+0x38>)
 80011d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <MX_DMA_Init+0x38>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6493      	str	r3, [r2, #72]	; 0x48
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_DMA_Init+0x38>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	200b      	movs	r0, #11
 80011f4:	f002 fa3f 	bl	8003676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011f8:	200b      	movs	r0, #11
 80011fa:	f002 fa58 	bl	80036ae <HAL_NVIC_EnableIRQ>

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <MX_GPIO_Init+0x10c>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a3c      	ldr	r2, [pc, #240]	; (8001318 <MX_GPIO_Init+0x10c>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <MX_GPIO_Init+0x10c>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <MX_GPIO_Init+0x10c>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a36      	ldr	r2, [pc, #216]	; (8001318 <MX_GPIO_Init+0x10c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <MX_GPIO_Init+0x10c>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b31      	ldr	r3, [pc, #196]	; (8001318 <MX_GPIO_Init+0x10c>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a30      	ldr	r2, [pc, #192]	; (8001318 <MX_GPIO_Init+0x10c>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <MX_GPIO_Init+0x10c>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <MX_GPIO_Init+0x10c>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <MX_GPIO_Init+0x10c>)
 8001270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b28      	ldr	r3, [pc, #160]	; (8001318 <MX_GPIO_Init+0x10c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_EN_GPIO_Port, I2C_EN_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001288:	4824      	ldr	r0, [pc, #144]	; (800131c <MX_GPIO_Init+0x110>)
 800128a:	f002 fe1b 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Coil_Up_GPIO_Port, Coil_Up_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f002 fe14 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Coil_Dwn_GPIO_Port, Coil_Dwn_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f002 fe0d 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_GPIO_Port, NRST_Pin, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2108      	movs	r1, #8
 80012ae:	481c      	ldr	r0, [pc, #112]	; (8001320 <MX_GPIO_Init+0x114>)
 80012b0:	f002 fe08 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C_EN_Pin;
 80012b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012be:	2302      	movs	r3, #2
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_EN_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4813      	ldr	r0, [pc, #76]	; (800131c <MX_GPIO_Init+0x110>)
 80012ce:	f002 fc7f 	bl	8003bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Coil_Up_Pin|Coil_Dwn_Pin;
 80012d2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012d8:	2311      	movs	r3, #17
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ee:	f002 fc6f 	bl	8003bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 80012f2:	2308      	movs	r3, #8
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_GPIO_Init+0x114>)
 800130a:	f002 fc61 	bl	8003bd0 <HAL_GPIO_Init>

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	48000800 	.word	0x48000800
 8001320:	48001c00 	.word	0x48001c00

08001324 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_I2C1_Init+0x74>)
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <MX_I2C1_Init+0x78>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_I2C1_Init+0x74>)
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <MX_I2C1_Init+0x7c>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_I2C1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_I2C1_Init+0x74>)
 800133c:	2201      	movs	r2, #1
 800133e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_I2C1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_I2C1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_I2C1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_I2C1_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <MX_I2C1_Init+0x74>)
 8001360:	f002 fdc8 	bl	8003ef4 <HAL_I2C_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800136a:	f000 fb46 	bl	80019fa <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136e:	2100      	movs	r1, #0
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <MX_I2C1_Init+0x74>)
 8001372:	f003 fb23 	bl	80049bc <HAL_I2CEx_ConfigAnalogFilter>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800137c:	f000 fb3d 	bl	80019fa <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001380:	2100      	movs	r1, #0
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_I2C1_Init+0x74>)
 8001384:	f003 fb65 	bl	8004a52 <HAL_I2CEx_ConfigDigitalFilter>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800138e:	f000 fb34 	bl	80019fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200002a4 	.word	0x200002a4
 800139c:	40005400 	.word	0x40005400
 80013a0:	00602173 	.word	0x00602173

080013a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0a0      	sub	sp, #128	; 0x80
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	225c      	movs	r2, #92	; 0x5c
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f006 fe23 	bl	8008010 <memset>
  if(i2cHandle->Instance==I2C1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_I2C_MspInit+0xa4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d135      	bne.n	8001440 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013d4:	2340      	movs	r3, #64	; 0x40
 80013d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013d8:	2300      	movs	r3, #0
 80013da:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fa1f 	bl	8005824 <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013ec:	f000 fb05 	bl	80019fa <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_I2C_MspInit+0xa8>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_I2C_MspInit+0xa8>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_I2C_MspInit+0xa8>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001408:	23c0      	movs	r3, #192	; 0xc0
 800140a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140c:	2312      	movs	r3, #18
 800140e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001418:	2304      	movs	r3, #4
 800141a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001420:	4619      	mov	r1, r3
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <HAL_I2C_MspInit+0xac>)
 8001424:	f002 fbd4 	bl	8003bd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_I2C_MspInit+0xa8>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_I2C_MspInit+0xa8>)
 800142e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001432:	6593      	str	r3, [r2, #88]	; 0x58
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_I2C_MspInit+0xa8>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001440:	bf00      	nop
 8001442:	3780      	adds	r7, #128	; 0x80
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40005400 	.word	0x40005400
 800144c:	40021000 	.word	0x40021000
 8001450:	48000400 	.word	0x48000400

08001454 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 1000);
 800145c:	1d39      	adds	r1, r7, #4
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	2201      	movs	r2, #1
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <__io_putchar+0x20>)
 8001466:	f005 fd4f 	bl	8006f08 <HAL_UART_Transmit>
}
 800146a:	bf00      	nop
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200007b8 	.word	0x200007b8

08001478 <QMC7983_config>:
//
//	HAL_UART_Transmit(&hlpuart1,(uint8_t*)ch,1,1000);
//	return ch;
//}

void QMC7983_config(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af04      	add	r7, sp, #16
	uint8_t config_data[4]={0x00,
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <QMC7983_config+0x88>)
 8001480:	607b      	str	r3, [r7, #4]
							0x35,
							0xFF,
							0x40};
	HAL_I2C_Mem_Read(&hi2c1, QMC7983_ADDR,CHIPID_REG,1, config_data, 1,1000); // check device ID
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	9302      	str	r3, [sp, #8]
 8001488:	2301      	movs	r3, #1
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	220d      	movs	r2, #13
 8001494:	2158      	movs	r1, #88	; 0x58
 8001496:	481b      	ldr	r0, [pc, #108]	; (8001504 <QMC7983_config+0x8c>)
 8001498:	f002 fed0 	bl	800423c <HAL_I2C_Mem_Read>
	if(config_data[0]!=0){
 800149c:	793b      	ldrb	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d029      	beq.n	80014f6 <QMC7983_config+0x7e>
		HAL_I2C_Mem_Write(&hi2c1,QMC7983_ADDR ,CONTROL_REG_1,1, config_data+1, 1,1000); //set Mode,ODR,RNG,OSR (full scale range of 16G)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	3301      	adds	r3, #1
 80014a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014aa:	9202      	str	r2, [sp, #8]
 80014ac:	2201      	movs	r2, #1
 80014ae:	9201      	str	r2, [sp, #4]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2301      	movs	r3, #1
 80014b4:	2209      	movs	r2, #9
 80014b6:	2158      	movs	r1, #88	; 0x58
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <QMC7983_config+0x8c>)
 80014ba:	f002 fdab 	bl	8004014 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(&hi2c1,QMC7983_ADDR ,SET_RESET_PERIOD_REG,1, config_data+2, 1,1000); //set SET/RESET Period
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	3302      	adds	r3, #2
 80014c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014c6:	9202      	str	r2, [sp, #8]
 80014c8:	2201      	movs	r2, #1
 80014ca:	9201      	str	r2, [sp, #4]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	220b      	movs	r2, #11
 80014d2:	2158      	movs	r1, #88	; 0x58
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <QMC7983_config+0x8c>)
 80014d6:	f002 fd9d 	bl	8004014 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(&hi2c1,QMC7983_ADDR ,CONTROL_REG_2,1, config_data+3, 1,1000); //enable the roll-over function
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	3303      	adds	r3, #3
 80014de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014e2:	9202      	str	r2, [sp, #8]
 80014e4:	2201      	movs	r2, #1
 80014e6:	9201      	str	r2, [sp, #4]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	220a      	movs	r2, #10
 80014ee:	2158      	movs	r1, #88	; 0x58
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <QMC7983_config+0x8c>)
 80014f2:	f002 fd8f 	bl	8004014 <HAL_I2C_Mem_Write>
	}
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40ff3500 	.word	0x40ff3500
 8001504:	200002a4 	.word	0x200002a4

08001508 <QMC7983_read_magn_field>:

void QMC7983_read_magn_field(void){
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af04      	add	r7, sp, #16
	uint8_t status_flag = 0x00;
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]
	uint8_t raw_data[6];
	HAL_I2C_Mem_Read(&hi2c1, QMC7983_ADDR,STATUS_REG_1,1, &status_flag, 1,1000);
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	2301      	movs	r3, #1
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	2206      	movs	r2, #6
 8001524:	2158      	movs	r1, #88	; 0x58
 8001526:	4849      	ldr	r0, [pc, #292]	; (800164c <QMC7983_read_magn_field+0x144>)
 8001528:	f002 fe88 	bl	800423c <HAL_I2C_Mem_Read>
	if((status_flag & 1U<<0)==1){
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8086 	beq.w	8001644 <QMC7983_read_magn_field+0x13c>
		HAL_I2C_Mem_Read(&hi2c1, QMC7983_ADDR,DATA_X_LSB_REG,1, raw_data, 6,1000);
 8001538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2306      	movs	r3, #6
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	463b      	mov	r3, r7
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	2200      	movs	r2, #0
 800154a:	2158      	movs	r1, #88	; 0x58
 800154c:	483f      	ldr	r0, [pc, #252]	; (800164c <QMC7983_read_magn_field+0x144>)
 800154e:	f002 fe75 	bl	800423c <HAL_I2C_Mem_Read>
		//because of full scale range is +/-16 , then the coefficient must be 1/1.000 according to datasheet
		//1G = 10^-4 T
		mag_fi_meas[0] = (int16_t)(raw_data[1]<<8 | raw_data[0])/1000.0;
 8001552:	787b      	ldrb	r3, [r7, #1]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	783b      	ldrb	r3, [r7, #0]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21b      	sxth	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ffdf 	bl	8000524 <__aeabi_i2d>
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <QMC7983_read_magn_field+0x148>)
 800156c:	f7ff f96e 	bl	800084c <__aeabi_ddiv>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fb16 	bl	8000ba8 <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	4a35      	ldr	r2, [pc, #212]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 8001580:	6013      	str	r3, [r2, #0]
		mag_fi_meas[1] = (int16_t)(raw_data[3]<<8 | raw_data[2])/1000.0;
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	78bb      	ldrb	r3, [r7, #2]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21b      	sxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffc7 	bl	8000524 <__aeabi_i2d>
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <QMC7983_read_magn_field+0x148>)
 800159c:	f7ff f956 	bl	800084c <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fafe 	bl	8000ba8 <__aeabi_d2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 80015b0:	6053      	str	r3, [r2, #4]
		mag_fi_meas[2] = (int16_t)(raw_data[5]<<8 | raw_data[4])/1000.0;
 80015b2:	797b      	ldrb	r3, [r7, #5]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	793b      	ldrb	r3, [r7, #4]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffaf 	bl	8000524 <__aeabi_i2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <QMC7983_read_magn_field+0x148>)
 80015cc:	f7ff f93e 	bl	800084c <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fae6 	bl	8000ba8 <__aeabi_d2f>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 80015e0:	6093      	str	r3, [r2, #8]
		mag_fi_x = mag_fi_meas[0];
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <QMC7983_read_magn_field+0x150>)
 80015e8:	6013      	str	r3, [r2, #0]
		mag_fi_y = mag_fi_meas[1];
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a1b      	ldr	r2, [pc, #108]	; (800165c <QMC7983_read_magn_field+0x154>)
 80015f0:	6013      	str	r3, [r2, #0]
		mag_fi_z = mag_fi_meas[2];
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <QMC7983_read_magn_field+0x158>)
 80015f8:	6013      	str	r3, [r2, #0]
		total_magn = sqrtf(mag_fi_meas[0]*mag_fi_meas[0]+mag_fi_meas[1]*mag_fi_meas[1]+mag_fi_meas[2]*mag_fi_meas[2]);
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 800160c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 8001612:	edd3 7a01 	vldr	s15, [r3, #4]
 8001616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 8001620:	edd3 6a02 	vldr	s13, [r3, #8]
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <QMC7983_read_magn_field+0x14c>)
 8001626:	edd3 7a02 	vldr	s15, [r3, #8]
 800162a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	f009 fc3d 	bl	800aeb4 <sqrtf>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <QMC7983_read_magn_field+0x15c>)
 8001640:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200002a4 	.word	0x200002a4
 8001650:	408f4000 	.word	0x408f4000
 8001654:	200002f8 	.word	0x200002f8
 8001658:	20000304 	.word	0x20000304
 800165c:	20000308 	.word	0x20000308
 8001660:	2000030c 	.word	0x2000030c
 8001664:	20000310 	.word	0x20000310

08001668 <QMC7983_read_temp>:

void QMC7983_read_temp (void){
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af04      	add	r7, sp, #16
	uint8_t status_flag = 0x00;
 800166e:	2300      	movs	r3, #0
 8001670:	71fb      	strb	r3, [r7, #7]
	uint8_t raw_temp_data[2];

	HAL_I2C_Mem_Read (&hi2c1, QMC7983_ADDR,STATUS_REG_1,1, &status_flag, 1,1000);
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	2301      	movs	r3, #1
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2301      	movs	r3, #1
 8001682:	2206      	movs	r2, #6
 8001684:	2158      	movs	r1, #88	; 0x58
 8001686:	4818      	ldr	r0, [pc, #96]	; (80016e8 <QMC7983_read_temp+0x80>)
 8001688:	f002 fdd8 	bl	800423c <HAL_I2C_Mem_Read>
	if((status_flag & 1U<<0)==1)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d024      	beq.n	80016e0 <QMC7983_read_temp+0x78>
	{
		HAL_I2C_Mem_Read (&hi2c1, QMC7983_ADDR,TOUT_LSB_REG,1, raw_temp_data, 2,1000);
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2302      	movs	r3, #2
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	2207      	movs	r2, #7
 80016a8:	2158      	movs	r1, #88	; 0x58
 80016aa:	480f      	ldr	r0, [pc, #60]	; (80016e8 <QMC7983_read_temp+0x80>)
 80016ac:	f002 fdc6 	bl	800423c <HAL_I2C_Mem_Read>
		temp_meas = (int16_t)(raw_temp_data[1]<<8 |raw_temp_data[0])/100.0;
 80016b0:	797b      	ldrb	r3, [r7, #5]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	793b      	ldrb	r3, [r7, #4]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21b      	sxth	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff30 	bl	8000524 <__aeabi_i2d>
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <QMC7983_read_temp+0x84>)
 80016ca:	f7ff f8bf 	bl	800084c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa67 	bl	8000ba8 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <QMC7983_read_temp+0x88>)
 80016de:	6013      	str	r3, [r2, #0]
	}
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200002a4 	.word	0x200002a4
 80016ec:	40590000 	.word	0x40590000
 80016f0:	20000314 	.word	0x20000314
 80016f4:	00000000 	.word	0x00000000

080016f8 <QMC7983_read_heading>:


void QMC7983_read_heading (void){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

	QMC7983_read_magn_field();
 80016fc:	f7ff ff04 	bl	8001508 <QMC7983_read_magn_field>
	if(mag_fi_meas[0]==0)
 8001700:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <QMC7983_read_heading+0xf8>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	eef5 7a40 	vcmp.f32	s15, #0.0
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	d110      	bne.n	8001732 <QMC7983_read_heading+0x3a>
	{
		if(mag_fi_meas[1]<0)
 8001710:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <QMC7983_read_heading+0xf8>)
 8001712:	edd3 7a01 	vldr	s15, [r3, #4]
 8001716:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	d503      	bpl.n	8001728 <QMC7983_read_heading+0x30>
			heading = 90;
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <QMC7983_read_heading+0xfc>)
 8001722:	4a35      	ldr	r2, [pc, #212]	; (80017f8 <QMC7983_read_heading+0x100>)
 8001724:	601a      	str	r2, [r3, #0]
		if(heading>=360)
			heading -= 360;
		if(heading<0)
			heading += 360;
	}
}
 8001726:	e058      	b.n	80017da <QMC7983_read_heading+0xe2>
			heading = 0;
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <QMC7983_read_heading+0xfc>)
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	e053      	b.n	80017da <QMC7983_read_heading+0xe2>
		heading =  atan2f(mag_fi_meas[1],mag_fi_meas[0])*180/PI - 11.71; //11.71 magnetic declination in spb
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <QMC7983_read_heading+0xf8>)
 8001734:	edd3 7a01 	vldr	s15, [r3, #4]
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <QMC7983_read_heading+0xf8>)
 800173a:	ed93 7a00 	vldr	s14, [r3]
 800173e:	eef0 0a47 	vmov.f32	s1, s14
 8001742:	eeb0 0a67 	vmov.f32	s0, s15
 8001746:	f009 fbb3 	bl	800aeb0 <atan2f>
 800174a:	eef0 7a40 	vmov.f32	s15, s0
 800174e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80017fc <QMC7983_read_heading+0x104>
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	ee17 0a90 	vmov	r0, s15
 800175a:	f7fe fef5 	bl	8000548 <__aeabi_f2d>
 800175e:	a320      	add	r3, pc, #128	; (adr r3, 80017e0 <QMC7983_read_heading+0xe8>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f872 	bl	800084c <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	a31d      	add	r3, pc, #116	; (adr r3, 80017e8 <QMC7983_read_heading+0xf0>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe fd87 	bl	8000288 <__aeabi_dsub>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff fa11 	bl	8000ba8 <__aeabi_d2f>
 8001786:	4603      	mov	r3, r0
 8001788:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <QMC7983_read_heading+0xfc>)
 800178a:	6013      	str	r3, [r2, #0]
		if(heading>=360)
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <QMC7983_read_heading+0xfc>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001800 <QMC7983_read_heading+0x108>
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	db09      	blt.n	80017b4 <QMC7983_read_heading+0xbc>
			heading -= 360;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <QMC7983_read_heading+0xfc>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001800 <QMC7983_read_heading+0x108>
 80017aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <QMC7983_read_heading+0xfc>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
		if(heading<0)
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <QMC7983_read_heading+0xfc>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d400      	bmi.n	80017c6 <QMC7983_read_heading+0xce>
}
 80017c4:	e009      	b.n	80017da <QMC7983_read_heading+0xe2>
			heading += 360;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <QMC7983_read_heading+0xfc>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001800 <QMC7983_read_heading+0x108>
 80017d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <QMC7983_read_heading+0xfc>)
 80017d6:	edc3 7a00 	vstr	s15, [r3]
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	fc8b007a 	.word	0xfc8b007a
 80017e4:	400921fa 	.word	0x400921fa
 80017e8:	1eb851ec 	.word	0x1eb851ec
 80017ec:	40276b85 	.word	0x40276b85
 80017f0:	200002f8 	.word	0x200002f8
 80017f4:	20000318 	.word	0x20000318
 80017f8:	42b40000 	.word	0x42b40000
 80017fc:	43340000 	.word	0x43340000
 8001800:	43b40000 	.word	0x43b40000
 8001804:	00000000 	.word	0x00000000

08001808 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
		ADC_Rad = sensor_raw_vals[0]*(3.3/4096); // 2^12
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe85 	bl	8000524 <__aeabi_i2d>
 800181a:	a32b      	add	r3, pc, #172	; (adr r3, 80018c8 <HAL_ADC_ConvCpltCallback+0xc0>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe feea 	bl	80005f8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f9bc 	bl	8000ba8 <__aeabi_d2f>
 8001830:	4603      	mov	r3, r0
 8001832:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001834:	6013      	str	r3, [r2, #0]
		ADC_ISence1 = sensor_raw_vals[1]*(3.3/4096/0.8);  //  Amper
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001838:	885b      	ldrh	r3, [r3, #2]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe72 	bl	8000524 <__aeabi_i2d>
 8001840:	a323      	add	r3, pc, #140	; (adr r3, 80018d0 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fed7 	bl	80005f8 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff f9a9 	bl	8000ba8 <__aeabi_d2f>
 8001856:	4603      	mov	r3, r0
 8001858:	4a23      	ldr	r2, [pc, #140]	; (80018e8 <HAL_ADC_ConvCpltCallback+0xe0>)
 800185a:	6013      	str	r3, [r2, #0]
		ADC_ISence2 = (sensor_raw_vals[2]-2.45/3.3*4096)*(3.3/4096/0.8);  //  Amper
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_ADC_ConvCpltCallback+0xd8>)
 800185e:	889b      	ldrh	r3, [r3, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe5f 	bl	8000524 <__aeabi_i2d>
 8001866:	a31c      	add	r3, pc, #112	; (adr r3, 80018d8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fd0c 	bl	8000288 <__aeabi_dsub>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	a315      	add	r3, pc, #84	; (adr r3, 80018d0 <HAL_ADC_ConvCpltCallback+0xc8>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe febb 	bl	80005f8 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f98d 	bl	8000ba8 <__aeabi_d2f>
 800188e:	4603      	mov	r3, r0
 8001890:	4a16      	ldr	r2, [pc, #88]	; (80018ec <HAL_ADC_ConvCpltCallback+0xe4>)
 8001892:	6013      	str	r3, [r2, #0]
		ADC_Ilum = sensor_raw_vals[3]*(3.3/4096);
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001896:	88db      	ldrh	r3, [r3, #6]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe43 	bl	8000524 <__aeabi_i2d>
 800189e:	a30a      	add	r3, pc, #40	; (adr r3, 80018c8 <HAL_ADC_ConvCpltCallback+0xc0>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fea8 	bl	80005f8 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f97a 	bl	8000ba8 <__aeabi_d2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_ADC_ConvCpltCallback+0xe8>)
 80018b8:	6013      	str	r3, [r2, #0]
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	f3af 8000 	nop.w
 80018c8:	66666666 	.word	0x66666666
 80018cc:	3f4a6666 	.word	0x3f4a6666
 80018d0:	ffffffff 	.word	0xffffffff
 80018d4:	3f507fff 	.word	0x3f507fff
 80018d8:	7c1f07c3 	.word	0x7c1f07c3
 80018dc:	40a7c1f0 	.word	0x40a7c1f0
 80018e0:	20000714 	.word	0x20000714
 80018e4:	2000031c 	.word	0x2000031c
 80018e8:	20000324 	.word	0x20000324
 80018ec:	20000328 	.word	0x20000328
 80018f0:	20000320 	.word	0x20000320

080018f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f8:	f000 fca7 	bl	800224a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018fc:	f000 f82c 	bl	8001958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001900:	f7ff fc84 	bl	800120c <MX_GPIO_Init>
  MX_DMA_Init();
 8001904:	f7ff fc64 	bl	80011d0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001908:	f000 fa68 	bl	8001ddc <MX_TIM1_Init>
  MX_I2C1_Init();
 800190c:	f7ff fd0a 	bl	8001324 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001910:	f7ff fb1c 	bl	8000f4c <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8001914:	f000 fbe4 	bl	80020e0 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001918:	f000 fb1c 	bl	8001f54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //as7265x_config();
  QMC7983_config();
 800191c:	f7ff fdac 	bl	8001478 <QMC7983_config>
  HAL_Delay(100);
 8001920:	2064      	movs	r0, #100	; 0x64
 8001922:	f000 fd07 	bl	8002334 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)sensor_raw_vals,4);
 8001926:	2204      	movs	r2, #4
 8001928:	4908      	ldr	r1, [pc, #32]	; (800194c <main+0x58>)
 800192a:	4809      	ldr	r0, [pc, #36]	; (8001950 <main+0x5c>)
 800192c:	f001 f836 	bl	800299c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <main+0x60>)
 8001932:	f004 fad9 	bl	8005ee8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  QMC7983_read_heading();
 8001936:	f7ff fedf 	bl	80016f8 <QMC7983_read_heading>
	  HAL_Delay(100);
 800193a:	2064      	movs	r0, #100	; 0x64
 800193c:	f000 fcfa 	bl	8002334 <HAL_Delay>
	  QMC7983_read_temp ();
 8001940:	f7ff fe92 	bl	8001668 <QMC7983_read_temp>
	  HAL_Delay(100);
 8001944:	2064      	movs	r0, #100	; 0x64
 8001946:	f000 fcf5 	bl	8002334 <HAL_Delay>
	  QMC7983_read_heading();
 800194a:	e7f4      	b.n	8001936 <main+0x42>
 800194c:	20000714 	.word	0x20000714
 8001950:	200001f8 	.word	0x200001f8
 8001954:	2000076c 	.word	0x2000076c

08001958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b096      	sub	sp, #88	; 0x58
 800195c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	2244      	movs	r2, #68	; 0x44
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f006 fb52 	bl	8008010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800196c:	463b      	mov	r3, r7
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800197a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800197e:	f003 f8c3 	bl	8004b08 <HAL_PWREx_ControlVoltageScaling>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001988:	f000 f837 	bl	80019fa <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800198c:	2302      	movs	r3, #2
 800198e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001994:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001996:	2310      	movs	r3, #16
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800199a:	2302      	movs	r3, #2
 800199c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800199e:	2302      	movs	r3, #2
 80019a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80019a6:	2310      	movs	r3, #16
 80019a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019aa:	2307      	movs	r3, #7
 80019ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ae:	2302      	movs	r3, #2
 80019b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80019b2:	2304      	movs	r3, #4
 80019b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 f8fa 	bl	8004bb4 <HAL_RCC_OscConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80019c6:	f000 f818 	bl	80019fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ca:	230f      	movs	r3, #15
 80019cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ce:	2303      	movs	r3, #3
 80019d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019de:	463b      	mov	r3, r7
 80019e0:	2103      	movs	r1, #3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fcfa 	bl	80053dc <HAL_RCC_ClockConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019ee:	f000 f804 	bl	80019fa <Error_Handler>
  }
}
 80019f2:	bf00      	nop
 80019f4:	3758      	adds	r7, #88	; 0x58
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fe:	b672      	cpsid	i
}
 8001a00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <Error_Handler+0x8>

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x44>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_MspInit+0x44>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6613      	str	r3, [r2, #96]	; 0x60
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_MspInit+0x44>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_MspInit+0x44>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_MspInit+0x44>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_MspInit+0x44>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a98:	f000 fc2c 	bl	80022f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <DMA1_Channel1_IRQHandler+0x10>)
 8001aa6:	f001 ffb4 	bl	8003a12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000025c 	.word	0x2000025c

08001ab4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <TIM1_CC_IRQHandler+0x10>)
 8001aba:	f004 faca 	bl	8006052 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000720 	.word	0x20000720

08001ac8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001acc:	b09a      	sub	sp, #104	; 0x68
 8001ace:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE BEGIN TIM2_IRQn 0 */
  sprintf(uart_buffer,
 8001ad0:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <TIM2_IRQHandler+0xd8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd37 	bl	8000548 <__aeabi_f2d>
 8001ada:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <TIM2_IRQHandler+0xdc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd30 	bl	8000548 <__aeabi_f2d>
 8001ae8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001aec:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <TIM2_IRQHandler+0xe0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd29 	bl	8000548 <__aeabi_f2d>
 8001af6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001afa:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <TIM2_IRQHandler+0xe4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd22 	bl	8000548 <__aeabi_f2d>
 8001b04:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <TIM2_IRQHandler+0xe8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fd1b 	bl	8000548 <__aeabi_f2d>
 8001b12:	e9c7 0100 	strd	r0, r1, [r7]
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <TIM2_IRQHandler+0xec>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd14 	bl	8000548 <__aeabi_f2d>
 8001b20:	4682      	mov	sl, r0
 8001b22:	468b      	mov	fp, r1
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <TIM2_IRQHandler+0xf0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd0d 	bl	8000548 <__aeabi_f2d>
 8001b2e:	4680      	mov	r8, r0
 8001b30:	4689      	mov	r9, r1
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <TIM2_IRQHandler+0xf4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd06 	bl	8000548 <__aeabi_f2d>
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	460d      	mov	r5, r1
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <TIM2_IRQHandler+0xf8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fcff 	bl	8000548 <__aeabi_f2d>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001b52:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8001b56:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001b5a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001b5e:	ed97 7b00 	vldr	d7, [r7]
 8001b62:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001b66:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001b6e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b72:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b76:	ed97 7b06 	vldr	d7, [r7, #24]
 8001b7a:	ed8d 7b00 	vstr	d7, [sp]
 8001b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b82:	4910      	ldr	r1, [pc, #64]	; (8001bc4 <TIM2_IRQHandler+0xfc>)
 8001b84:	4810      	ldr	r0, [pc, #64]	; (8001bc8 <TIM2_IRQHandler+0x100>)
 8001b86:	f006 ff2b 	bl	80089e0 <siprintf>
		  "mag_fi_x = %fG\n mag_fi_y = %fG\n mag_fi_z = %fG\n heading = %f degr\n temp_meas = %f degr\n ADC_Rad = %f\n ADC_Ilum = %f\n ADC_ISence1 = %fA\n ADC_ISence2 = %fA\n ",
		  mag_fi_x,mag_fi_y,mag_fi_z,heading,temp_meas,ADC_Rad,ADC_Ilum,ADC_ISence1,ADC_ISence2);
  printf("%s\n",uart_buffer);
 8001b8a:	480f      	ldr	r0, [pc, #60]	; (8001bc8 <TIM2_IRQHandler+0x100>)
 8001b8c:	f006 ff20 	bl	80089d0 <puts>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b90:	480e      	ldr	r0, [pc, #56]	; (8001bcc <TIM2_IRQHandler+0x104>)
 8001b92:	f004 fa5e 	bl	8006052 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ba0:	20000304 	.word	0x20000304
 8001ba4:	20000308 	.word	0x20000308
 8001ba8:	2000030c 	.word	0x2000030c
 8001bac:	20000318 	.word	0x20000318
 8001bb0:	20000314 	.word	0x20000314
 8001bb4:	2000031c 	.word	0x2000031c
 8001bb8:	20000320 	.word	0x20000320
 8001bbc:	20000324 	.word	0x20000324
 8001bc0:	20000328 	.word	0x20000328
 8001bc4:	0800b208 	.word	0x0800b208
 8001bc8:	2000032c 	.word	0x2000032c
 8001bcc:	2000076c 	.word	0x2000076c

08001bd0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <LPUART1_IRQHandler+0x10>)
 8001bd6:	f005 fa2b 	bl	8007030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200007b8 	.word	0x200007b8

08001be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
	return 1;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_kill>:

int _kill(int pid, int sig)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bfe:	f006 f9cf 	bl	8007fa0 <__errno>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2216      	movs	r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
	return -1;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_exit>:

void _exit (int status)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ffe7 	bl	8001bf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c26:	e7fe      	b.n	8001c26 <_exit+0x12>

08001c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e00a      	b.n	8001c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c3a:	f3af 8000 	nop.w
 8001c3e:	4601      	mov	r1, r0
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbf0      	blt.n	8001c3a <_read+0x12>
	}

return len;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e009      	b.n	8001c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fbe9 	bl	8001454 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbf1      	blt.n	8001c74 <_write+0x12>
	}
	return len;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_close>:

int _close(int file)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_isatty>:

int _isatty(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f006 f934 	bl	8007fa0 <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20010000 	.word	0x20010000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	2000071c 	.word	0x2000071c
 8001d6c:	20000850 	.word	0x20000850

08001d70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <SystemInit+0x64>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	4a16      	ldr	r2, [pc, #88]	; (8001dd4 <SystemInit+0x64>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <SystemInit+0x68>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <SystemInit+0x68>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <SystemInit+0x68>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <SystemInit+0x68>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <SystemInit+0x68>)
 8001d9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001da0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001da4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <SystemInit+0x68>)
 8001da8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <SystemInit+0x68>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <SystemInit+0x68>)
 8001db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <SystemInit+0x68>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <SystemInit+0x64>)
 8001dc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dc6:	609a      	str	r2, [r3, #8]
#endif
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00
 8001dd8:	40021000 	.word	0x40021000

08001ddc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b09a      	sub	sp, #104	; 0x68
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	615a      	str	r2, [r3, #20]
 8001e0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	222c      	movs	r2, #44	; 0x2c
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f006 f8fa 	bl	8008010 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e1c:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e1e:	4a4c      	ldr	r2, [pc, #304]	; (8001f50 <MX_TIM1_Init+0x174>)
 8001e20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001e22:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e24:	2208      	movs	r2, #8
 8001e26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e28:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e30:	2263      	movs	r2, #99	; 0x63
 8001e32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e34:	4b45      	ldr	r3, [pc, #276]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e3a:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e40:	4b42      	ldr	r3, [pc, #264]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e46:	4841      	ldr	r0, [pc, #260]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e48:	f003 fff6 	bl	8005e38 <HAL_TIM_Base_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e52:	f7ff fdd2 	bl	80019fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e60:	4619      	mov	r1, r3
 8001e62:	483a      	ldr	r0, [pc, #232]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e64:	f004 fa8e 	bl	8006384 <HAL_TIM_ConfigClockSource>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e6e:	f7ff fdc4 	bl	80019fa <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001e72:	4836      	ldr	r0, [pc, #216]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e74:	f004 f88c 	bl	8005f90 <HAL_TIM_OC_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e7e:	f7ff fdbc 	bl	80019fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e92:	4619      	mov	r1, r3
 8001e94:	482d      	ldr	r0, [pc, #180]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001e96:	f004 feed 	bl	8006c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001ea0:	f7ff fdab 	bl	80019fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001ea4:	2330      	movs	r3, #48	; 0x30
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 80-1;
 8001ea8:	234f      	movs	r3, #79	; 0x4f
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001eac:	2302      	movs	r3, #2
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ec0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4820      	ldr	r0, [pc, #128]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001eca:	f004 f9e1 	bl	8006290 <HAL_TIM_OC_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001ed4:	f7ff fd91 	bl	80019fa <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4818      	ldr	r0, [pc, #96]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001eec:	f004 f9d0 	bl	8006290 <HAL_TIM_OC_ConfigChannel>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001ef6:	f7ff fd80 	bl	80019fa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4807      	ldr	r0, [pc, #28]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001f30:	f004 ff06 	bl	8006d40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001f3a:	f7ff fd5e 	bl	80019fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f3e:	4803      	ldr	r0, [pc, #12]	; (8001f4c <MX_TIM1_Init+0x170>)
 8001f40:	f000 f896 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001f44:	bf00      	nop
 8001f46:	3768      	adds	r7, #104	; 0x68
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000720 	.word	0x20000720
 8001f50:	40012c00 	.word	0x40012c00

08001f54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <MX_TIM2_Init+0x98>)
 8001f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <MX_TIM2_Init+0x98>)
 8001f7c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001f80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <MX_TIM2_Init+0x98>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <MX_TIM2_Init+0x98>)
 8001f8a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001f8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <MX_TIM2_Init+0x98>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <MX_TIM2_Init+0x98>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f9c:	4813      	ldr	r0, [pc, #76]	; (8001fec <MX_TIM2_Init+0x98>)
 8001f9e:	f003 ff4b 	bl	8005e38 <HAL_TIM_Base_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001fa8:	f7ff fd27 	bl	80019fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <MX_TIM2_Init+0x98>)
 8001fba:	f004 f9e3 	bl	8006384 <HAL_TIM_ConfigClockSource>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001fc4:	f7ff fd19 	bl	80019fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_TIM2_Init+0x98>)
 8001fd6:	f004 fe4d 	bl	8006c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001fe0:	f7ff fd0b 	bl	80019fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	2000076c 	.word	0x2000076c

08001ff0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_TIM_Base_MspInit+0x78>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d114      	bne.n	800202c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_TIM_Base_MspInit+0x7c>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_TIM_Base_MspInit+0x7c>)
 8002008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800200c:	6613      	str	r3, [r2, #96]	; 0x60
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_TIM_Base_MspInit+0x7c>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	201b      	movs	r0, #27
 8002020:	f001 fb29 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002024:	201b      	movs	r0, #27
 8002026:	f001 fb42 	bl	80036ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800202a:	e018      	b.n	800205e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002034:	d113      	bne.n	800205e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_TIM_Base_MspInit+0x7c>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	4a0c      	ldr	r2, [pc, #48]	; (800206c <HAL_TIM_Base_MspInit+0x7c>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6593      	str	r3, [r2, #88]	; 0x58
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_TIM_Base_MspInit+0x7c>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	201c      	movs	r0, #28
 8002054:	f001 fb0f 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002058:	201c      	movs	r0, #28
 800205a:	f001 fb28 	bl	80036ae <HAL_NVIC_EnableIRQ>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <HAL_TIM_MspPostInit+0x68>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d11d      	bne.n	80020ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_TIM_MspPostInit+0x6c>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_TIM_MspPostInit+0x6c>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_TIM_MspPostInit+0x6c>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Dwn_In_Pin|Up_in_Pin;
 80020aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020bc:	2301      	movs	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	4619      	mov	r1, r3
 80020c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ca:	f001 fd81 	bl	8003bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40021000 	.word	0x40021000

080020e0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <MX_LPUART1_UART_Init+0x50>)
 80020e6:	4a13      	ldr	r2, [pc, #76]	; (8002134 <MX_LPUART1_UART_Init+0x54>)
 80020e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <MX_LPUART1_UART_Init+0x50>)
 80020ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <MX_LPUART1_UART_Init+0x50>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <MX_LPUART1_UART_Init+0x50>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <MX_LPUART1_UART_Init+0x50>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <MX_LPUART1_UART_Init+0x50>)
 8002106:	220c      	movs	r2, #12
 8002108:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <MX_LPUART1_UART_Init+0x50>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <MX_LPUART1_UART_Init+0x50>)
 8002112:	2200      	movs	r2, #0
 8002114:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_LPUART1_UART_Init+0x50>)
 8002118:	2200      	movs	r2, #0
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_LPUART1_UART_Init+0x50>)
 800211e:	f004 fea5 	bl	8006e6c <HAL_UART_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002128:	f7ff fc67 	bl	80019fa <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200007b8 	.word	0x200007b8
 8002134:	40008000 	.word	0x40008000

08002138 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0a0      	sub	sp, #128	; 0x80
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	225c      	movs	r2, #92	; 0x5c
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f005 ff59 	bl	8008010 <memset>
  if(uartHandle->Instance==LPUART1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <HAL_UART_MspInit+0xb8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d13e      	bne.n	80021e6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002168:	2320      	movs	r3, #32
 800216a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800216c:	2300      	movs	r3, #0
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4618      	mov	r0, r3
 8002176:	f003 fb55 	bl	8005824 <HAL_RCCEx_PeriphCLKConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002180:	f7ff fc3b 	bl	80019fa <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_UART_MspInit+0xbc>)
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_UART_MspInit+0xbc>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_UART_MspInit+0xbc>)
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_UART_MspInit+0xbc>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_UART_MspInit+0xbc>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_UART_MspInit+0xbc>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021b4:	230c      	movs	r3, #12
 80021b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80021c4:	2308      	movs	r3, #8
 80021c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d2:	f001 fcfd 	bl	8003bd0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2046      	movs	r0, #70	; 0x46
 80021dc:	f001 fa4b 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80021e0:	2046      	movs	r0, #70	; 0x46
 80021e2:	f001 fa64 	bl	80036ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80021e6:	bf00      	nop
 80021e8:	3780      	adds	r7, #128	; 0x80
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40008000 	.word	0x40008000
 80021f4:	40021000 	.word	0x40021000

080021f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002230 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021fc:	f7ff fdb8 	bl	8001d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002200:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002202:	e003      	b.n	800220c <LoopCopyDataInit>

08002204 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002206:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002208:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800220a:	3104      	adds	r1, #4

0800220c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800220c:	480a      	ldr	r0, [pc, #40]	; (8002238 <LoopForever+0xa>)
	ldr	r3, =_edata
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002210:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002212:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002214:	d3f6      	bcc.n	8002204 <CopyDataInit>
	ldr	r2, =_sbss
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002218:	e002      	b.n	8002220 <LoopFillZerobss>

0800221a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800221a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800221c:	f842 3b04 	str.w	r3, [r2], #4

08002220 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <LoopForever+0x16>)
	cmp	r2, r3
 8002222:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002224:	d3f9      	bcc.n	800221a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002226:	f005 fec1 	bl	8007fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800222a:	f7ff fb63 	bl	80018f4 <main>

0800222e <LoopForever>:

LoopForever:
    b LoopForever
 800222e:	e7fe      	b.n	800222e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002230:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002234:	0800b70c 	.word	0x0800b70c
	ldr	r0, =_sdata
 8002238:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800223c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002240:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002244:	20000850 	.word	0x20000850

08002248 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC1_IRQHandler>

0800224a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f001 fa03 	bl	8003660 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800225a:	2000      	movs	r0, #0
 800225c:	f000 f80e 	bl	800227c <HAL_InitTick>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	e001      	b.n	8002270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800226c:	f7ff fbca 	bl	8001a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002270:	79fb      	ldrb	r3, [r7, #7]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_InitTick+0x6c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d023      	beq.n	80022d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002290:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_InitTick+0x70>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_InitTick+0x6c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 fa0f 	bl	80036ca <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d809      	bhi.n	80022cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f001 f9d9 	bl	8003676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_InitTick+0x74>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e007      	b.n	80022dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e004      	b.n	80022dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e001      	b.n	80022dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000008 	.word	0x20000008
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_IncTick+0x20>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x24>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_IncTick+0x24>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008
 8002318:	2000083c 	.word	0x2000083c

0800231c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000083c 	.word	0x2000083c

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffde 	bl	800231c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008

0800237c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	609a      	str	r2, [r3, #8]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3360      	adds	r3, #96	; 0x60
 80023f6:	461a      	mov	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <LL_ADC_SetOffset+0x44>)
 8002406:	4013      	ands	r3, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	4313      	orrs	r3, r2
 8002414:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800241c:	bf00      	nop
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	03fff000 	.word	0x03fff000

0800242c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3360      	adds	r3, #96	; 0x60
 800243a:	461a      	mov	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3360      	adds	r3, #96	; 0x60
 8002468:	461a      	mov	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	431a      	orrs	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3330      	adds	r3, #48	; 0x30
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	4413      	add	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	211f      	movs	r1, #31
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	401a      	ands	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0e9b      	lsrs	r3, r3, #26
 80024ec:	f003 011f 	and.w	r1, r3, #31
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	431a      	orrs	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3314      	adds	r3, #20
 800251c:	461a      	mov	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	0e5b      	lsrs	r3, r3, #25
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	4413      	add	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	0d1b      	lsrs	r3, r3, #20
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2107      	movs	r1, #7
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	401a      	ands	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	0d1b      	lsrs	r3, r3, #20
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	431a      	orrs	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002556:	bf00      	nop
 8002558:	371c      	adds	r7, #28
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	43db      	mvns	r3, r3
 800257e:	401a      	ands	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0318 	and.w	r3, r3, #24
 8002586:	4908      	ldr	r1, [pc, #32]	; (80025a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002588:	40d9      	lsrs	r1, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	400b      	ands	r3, r1
 800258e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002592:	431a      	orrs	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	0007ffff 	.word	0x0007ffff

080025ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6093      	str	r3, [r2, #8]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e4:	d101      	bne.n	80025ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800260c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002634:	d101      	bne.n	800263a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002658:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <LL_ADC_IsEnabled+0x18>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <LL_ADC_IsEnabled+0x1a>
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026aa:	f043 0204 	orr.w	r2, r3, #4
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d101      	bne.n	80026d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d101      	bne.n	80026fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e12c      	b.n	8002980 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fe fc9d 	bl	8001074 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff3f 	bl	80025d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff25 	bl	80025ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff5a 	bl	8002620 <LL_ADC_IsInternalRegulatorEnabled>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ff3e 	bl	80025f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800277c:	4b82      	ldr	r3, [pc, #520]	; (8002988 <HAL_ADC_Init+0x27c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	4a82      	ldr	r2, [pc, #520]	; (800298c <HAL_ADC_Init+0x280>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	3301      	adds	r3, #1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002790:	e002      	b.n	8002798 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	3b01      	subs	r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f9      	bne.n	8002792 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff3c 	bl	8002620 <LL_ADC_IsInternalRegulatorEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10d      	bne.n	80027ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f043 0210 	orr.w	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff75 	bl	80026be <LL_ADC_REG_IsConversionOngoing>
 80027d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 80c5 	bne.w	800296e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 80c1 	bne.w	800296e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027f4:	f043 0202 	orr.w	r2, r3, #2
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff35 	bl	8002670 <LL_ADC_IsEnabled>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800280c:	4860      	ldr	r0, [pc, #384]	; (8002990 <HAL_ADC_Init+0x284>)
 800280e:	f7ff ff2f 	bl	8002670 <LL_ADC_IsEnabled>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4619      	mov	r1, r3
 800281e:	485d      	ldr	r0, [pc, #372]	; (8002994 <HAL_ADC_Init+0x288>)
 8002820:	f7ff fdac 	bl	800237c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7e5b      	ldrb	r3, [r3, #25]
 8002828:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800282e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002834:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800283a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002842:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d106      	bne.n	8002860 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	3b01      	subs	r3, #1
 8002858:	045b      	lsls	r3, r3, #17
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	4b45      	ldr	r3, [pc, #276]	; (8002998 <HAL_ADC_Init+0x28c>)
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	69b9      	ldr	r1, [r7, #24]
 800288c:	430b      	orrs	r3, r1
 800288e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff12 	bl	80026be <LL_ADC_REG_IsConversionOngoing>
 800289a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff1f 	bl	80026e4 <LL_ADC_INJ_IsConversionOngoing>
 80028a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d13d      	bne.n	800292a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d13a      	bne.n	800292a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028d0:	f023 0302 	bic.w	r3, r3, #2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	69b9      	ldr	r1, [r7, #24]
 80028da:	430b      	orrs	r3, r1
 80028dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d118      	bne.n	800291a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028f2:	f023 0304 	bic.w	r3, r3, #4
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028fe:	4311      	orrs	r1, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002904:	4311      	orrs	r1, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800290a:	430a      	orrs	r2, r1
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	611a      	str	r2, [r3, #16]
 8002918:	e007      	b.n	800292a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d10c      	bne.n	800294c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f023 010f 	bic.w	r1, r3, #15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
 800294a:	e007      	b.n	800295c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 020f 	bic.w	r2, r2, #15
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	f023 0303 	bic.w	r3, r3, #3
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
 800296c:	e007      	b.n	800297e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f043 0210 	orr.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800297e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000000 	.word	0x20000000
 800298c:	053e2d63 	.word	0x053e2d63
 8002990:	50040000 	.word	0x50040000
 8002994:	50040300 	.word	0x50040300
 8002998:	fff0c007 	.word	0xfff0c007

0800299c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fe86 	bl	80026be <LL_ADC_REG_IsConversionOngoing>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d167      	bne.n	8002a88 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_Start_DMA+0x2a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e063      	b.n	8002a8e <HAL_ADC_Start_DMA+0xf2>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fc5c 	bl	800328c <ADC_Enable>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d14f      	bne.n	8002a7e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f023 0206 	bic.w	r2, r3, #6
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	659a      	str	r2, [r3, #88]	; 0x58
 8002a0a:	e002      	b.n	8002a12 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <HAL_ADC_Start_DMA+0xfc>)
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <HAL_ADC_Start_DMA+0x100>)
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_ADC_Start_DMA+0x104>)
 8002a28:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	221c      	movs	r2, #28
 8002a30:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0210 	orr.w	r2, r2, #16
 8002a48:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3340      	adds	r3, #64	; 0x40
 8002a64:	4619      	mov	r1, r3
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f000 fef3 	bl	8003854 <HAL_DMA_Start_IT>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fe0d 	bl	8002696 <LL_ADC_REG_StartConversion>
 8002a7c:	e006      	b.n	8002a8c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a86:	e001      	b.n	8002a8c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	08003399 	.word	0x08003399
 8002a9c:	08003471 	.word	0x08003471
 8002aa0:	0800348d 	.word	0x0800348d

08002aa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b0b6      	sub	sp, #216	; 0xd8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x22>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e3b9      	b.n	8003262 <HAL_ADC_ConfigChannel+0x796>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fddf 	bl	80026be <LL_ADC_REG_IsConversionOngoing>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f040 839e 	bne.w	8003244 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b05      	cmp	r3, #5
 8002b0e:	d824      	bhi.n	8002b5a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	3b02      	subs	r3, #2
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d81b      	bhi.n	8002b52 <HAL_ADC_ConfigChannel+0x86>
 8002b1a:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <HAL_ADC_ConfigChannel+0x54>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b31 	.word	0x08002b31
 8002b24:	08002b39 	.word	0x08002b39
 8002b28:	08002b41 	.word	0x08002b41
 8002b2c:	08002b49 	.word	0x08002b49
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	220c      	movs	r2, #12
 8002b34:	605a      	str	r2, [r3, #4]
          break;
 8002b36:	e011      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2212      	movs	r2, #18
 8002b3c:	605a      	str	r2, [r3, #4]
          break;
 8002b3e:	e00d      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2218      	movs	r2, #24
 8002b44:	605a      	str	r2, [r3, #4]
          break;
 8002b46:	e009      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4e:	605a      	str	r2, [r3, #4]
          break;
 8002b50:	e004      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2206      	movs	r2, #6
 8002b56:	605a      	str	r2, [r3, #4]
          break;
 8002b58:	e000      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b5a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f7ff fca3 	bl	80024b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fda3 	bl	80026be <LL_ADC_REG_IsConversionOngoing>
 8002b78:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fdaf 	bl	80026e4 <LL_ADC_INJ_IsConversionOngoing>
 8002b86:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 81a6 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f040 81a1 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f7ff fcae 	bl	800250c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	08db      	lsrs	r3, r3, #3
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d00a      	beq.n	8002be8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6919      	ldr	r1, [r3, #16]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002be2:	f7ff fbff 	bl	80023e4 <LL_ADC_SetOffset>
 8002be6:	e17b      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fc1c 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x148>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fc11 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	f003 021f 	and.w	r2, r3, #31
 8002c12:	e01e      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x186>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fc06 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e004      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002c46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d105      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x19e>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	0e9b      	lsrs	r3, r3, #26
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	e018      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x1d0>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002c8e:	2320      	movs	r3, #32
 8002c90:	e004      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d106      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fbd5 	bl	8002458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fbb9 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x20e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fbae 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	0e9b      	lsrs	r3, r3, #26
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	e01e      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x24c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fba3 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002cf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e004      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002d0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x264>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	0e9b      	lsrs	r3, r3, #26
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	e018      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x296>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002d54:	2320      	movs	r3, #32
 8002d56:	e004      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d106      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fb72 	bl	8002458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2102      	movs	r1, #2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fb56 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x2d4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2102      	movs	r1, #2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fb4b 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002d96:	4603      	mov	r3, r0
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	f003 021f 	and.w	r2, r3, #31
 8002d9e:	e01e      	b.n	8002dde <HAL_ADC_ConfigChannel+0x312>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2102      	movs	r1, #2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fb40 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002dce:	2320      	movs	r3, #32
 8002dd0:	e004      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x32a>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	0e9b      	lsrs	r3, r3, #26
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	e016      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x358>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002e16:	2320      	movs	r3, #32
 8002e18:	e004      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d106      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fb11 	bl	8002458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff faf5 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x396>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2103      	movs	r1, #3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff faea 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	0e9b      	lsrs	r3, r3, #26
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	e017      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x3c6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2103      	movs	r1, #3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fadf 	bl	800242c <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e7c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e003      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x3de>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	0e9b      	lsrs	r3, r3, #26
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	e011      	b.n	8002ece <HAL_ADC_ConfigChannel+0x402>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	e003      	b.n	8002ece <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d106      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2103      	movs	r1, #3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fabc 	bl	8002458 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fbc3 	bl	8002670 <LL_ADC_IsEnabled>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 813f 	bne.w	8003170 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f7ff fb30 	bl	8002564 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a8e      	ldr	r2, [pc, #568]	; (8003144 <HAL_ADC_ConfigChannel+0x678>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	f040 8130 	bne.w	8003170 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x46c>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	3301      	adds	r3, #1
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2b09      	cmp	r3, #9
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e019      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x4a0>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f48:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f50:	2320      	movs	r3, #32
 8002f52:	e003      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002f54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2b09      	cmp	r3, #9
 8002f64:	bf94      	ite	ls
 8002f66:	2301      	movls	r3, #1
 8002f68:	2300      	movhi	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d079      	beq.n	8003064 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x4c0>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	3301      	adds	r3, #1
 8002f84:	069b      	lsls	r3, r3, #26
 8002f86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f8a:	e015      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x4ec>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e003      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	069b      	lsls	r3, r3, #26
 8002fb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x50c>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	0e9b      	lsrs	r3, r3, #26
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	e017      	b.n	8003008 <HAL_ADC_ConfigChannel+0x53c>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	e003      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2101      	movs	r1, #1
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	ea42 0103 	orr.w	r1, r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <HAL_ADC_ConfigChannel+0x562>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	3301      	adds	r3, #1
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	051b      	lsls	r3, r3, #20
 800302c:	e018      	b.n	8003060 <HAL_ADC_ConfigChannel+0x594>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003046:	2320      	movs	r3, #32
 8003048:	e003      	b.n	8003052 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800304a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	3301      	adds	r3, #1
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003060:	430b      	orrs	r3, r1
 8003062:	e080      	b.n	8003166 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x5b4>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	069b      	lsls	r3, r3, #26
 800307a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800307e:	e015      	b.n	80030ac <HAL_ADC_ConfigChannel+0x5e0>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e003      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	069b      	lsls	r3, r3, #26
 80030a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x600>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0e9b      	lsrs	r3, r3, #26
 80030be:	3301      	adds	r3, #1
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	e017      	b.n	80030fc <HAL_ADC_ConfigChannel+0x630>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	61fb      	str	r3, [r7, #28]
  return result;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	e003      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	ea42 0103 	orr.w	r1, r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10d      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x65c>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	3301      	adds	r3, #1
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	3b1e      	subs	r3, #30
 8003120:	051b      	lsls	r3, r3, #20
 8003122:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003126:	e01d      	b.n	8003164 <HAL_ADC_ConfigChannel+0x698>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	613b      	str	r3, [r7, #16]
  return result;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d103      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003140:	2320      	movs	r3, #32
 8003142:	e005      	b.n	8003150 <HAL_ADC_ConfigChannel+0x684>
 8003144:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	f003 021f 	and.w	r2, r3, #31
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	3b1e      	subs	r3, #30
 800315e:	051b      	lsls	r3, r3, #20
 8003160:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003164:	430b      	orrs	r3, r1
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	6892      	ldr	r2, [r2, #8]
 800316a:	4619      	mov	r1, r3
 800316c:	f7ff f9ce 	bl	800250c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_ADC_ConfigChannel+0x7a0>)
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d06c      	beq.n	8003256 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800317c:	483c      	ldr	r0, [pc, #240]	; (8003270 <HAL_ADC_ConfigChannel+0x7a4>)
 800317e:	f7ff f923 	bl	80023c8 <LL_ADC_GetCommonPathInternalCh>
 8003182:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a3a      	ldr	r2, [pc, #232]	; (8003274 <HAL_ADC_ConfigChannel+0x7a8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d127      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003190:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d121      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a35      	ldr	r2, [pc, #212]	; (8003278 <HAL_ADC_ConfigChannel+0x7ac>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d157      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031ae:	4619      	mov	r1, r3
 80031b0:	482f      	ldr	r0, [pc, #188]	; (8003270 <HAL_ADC_ConfigChannel+0x7a4>)
 80031b2:	f7ff f8f6 	bl	80023a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b6:	4b31      	ldr	r3, [pc, #196]	; (800327c <HAL_ADC_ConfigChannel+0x7b0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	099b      	lsrs	r3, r3, #6
 80031bc:	4a30      	ldr	r2, [pc, #192]	; (8003280 <HAL_ADC_ConfigChannel+0x7b4>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031d0:	e002      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f9      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031de:	e03a      	b.n	8003256 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <HAL_ADC_ConfigChannel+0x7b8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d113      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x746>
 80031ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_ADC_ConfigChannel+0x7ac>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d12a      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003200:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003208:	4619      	mov	r1, r3
 800320a:	4819      	ldr	r0, [pc, #100]	; (8003270 <HAL_ADC_ConfigChannel+0x7a4>)
 800320c:	f7ff f8c9 	bl	80023a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003210:	e021      	b.n	8003256 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_ADC_ConfigChannel+0x7bc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d11c      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800321c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d116      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a12      	ldr	r2, [pc, #72]	; (8003278 <HAL_ADC_ConfigChannel+0x7ac>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d111      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800323a:	4619      	mov	r1, r3
 800323c:	480c      	ldr	r0, [pc, #48]	; (8003270 <HAL_ADC_ConfigChannel+0x7a4>)
 800323e:	f7ff f8b0 	bl	80023a2 <LL_ADC_SetCommonPathInternalCh>
 8003242:	e008      	b.n	8003256 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800325e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003262:	4618      	mov	r0, r3
 8003264:	37d8      	adds	r7, #216	; 0xd8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	80080000 	.word	0x80080000
 8003270:	50040300 	.word	0x50040300
 8003274:	c7520000 	.word	0xc7520000
 8003278:	50040000 	.word	0x50040000
 800327c:	20000000 	.word	0x20000000
 8003280:	053e2d63 	.word	0x053e2d63
 8003284:	cb840000 	.word	0xcb840000
 8003288:	80000001 	.word	0x80000001

0800328c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff f9e7 	bl	8002670 <LL_ADC_IsEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d169      	bne.n	800337c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	4b36      	ldr	r3, [pc, #216]	; (8003388 <ADC_Enable+0xfc>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00d      	beq.n	80032d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	f043 0210 	orr.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	f043 0201 	orr.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e055      	b.n	800337e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff f9b6 	bl	8002648 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032dc:	482b      	ldr	r0, [pc, #172]	; (800338c <ADC_Enable+0x100>)
 80032de:	f7ff f873 	bl	80023c8 <LL_ADC_GetCommonPathInternalCh>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032ec:	4b28      	ldr	r3, [pc, #160]	; (8003390 <ADC_Enable+0x104>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	4a28      	ldr	r2, [pc, #160]	; (8003394 <ADC_Enable+0x108>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003306:	e002      	b.n	800330e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3b01      	subs	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f9      	bne.n	8003308 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003314:	f7ff f802 	bl	800231c <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800331a:	e028      	b.n	800336e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff f9a5 	bl	8002670 <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff f989 	bl	8002648 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003336:	f7fe fff1 	bl	800231c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d914      	bls.n	800336e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d00d      	beq.n	800336e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	f043 0210 	orr.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e007      	b.n	800337e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d1cf      	bne.n	800331c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	8000003f 	.word	0x8000003f
 800338c:	50040300 	.word	0x50040300
 8003390:	20000000 	.word	0x20000000
 8003394:	053e2d63 	.word	0x053e2d63

08003398 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d14b      	bne.n	800344a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d021      	beq.n	8003410 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff f85c 	bl	800248e <LL_ADC_REG_IsTriggerSourceSWStart>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d032      	beq.n	8003442 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d12b      	bne.n	8003442 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11f      	bne.n	8003442 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
 800340e:	e018      	b.n	8003442 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d111      	bne.n	8003442 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7fe f9e0 	bl	8001808 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003448:	e00e      	b.n	8003468 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff fb2e 	bl	8002ab8 <HAL_ADC_ErrorCallback>
}
 800345c:	e004      	b.n	8003468 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7ff fb10 	bl	8002aa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	f043 0204 	orr.w	r2, r3, #4
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff fb00 	bl	8002ab8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <__NVIC_SetPriorityGrouping+0x44>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034dc:	4013      	ands	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034f2:	4a04      	ldr	r2, [pc, #16]	; (8003504 <__NVIC_SetPriorityGrouping+0x44>)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	60d3      	str	r3, [r2, #12]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <__NVIC_GetPriorityGrouping+0x18>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f003 0307 	and.w	r3, r3, #7
}
 8003516:	4618      	mov	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	2b00      	cmp	r3, #0
 8003534:	db0b      	blt.n	800354e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	f003 021f 	and.w	r2, r3, #31
 800353c:	4907      	ldr	r1, [pc, #28]	; (800355c <__NVIC_EnableIRQ+0x38>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2001      	movs	r0, #1
 8003546:	fa00 f202 	lsl.w	r2, r0, r2
 800354a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000e100 	.word	0xe000e100

08003560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	2b00      	cmp	r3, #0
 8003572:	db0a      	blt.n	800358a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	490c      	ldr	r1, [pc, #48]	; (80035ac <__NVIC_SetPriority+0x4c>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	440b      	add	r3, r1
 8003584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003588:	e00a      	b.n	80035a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4908      	ldr	r1, [pc, #32]	; (80035b0 <__NVIC_SetPriority+0x50>)
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	3b04      	subs	r3, #4
 8003598:	0112      	lsls	r2, r2, #4
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	440b      	add	r3, r1
 800359e:	761a      	strb	r2, [r3, #24]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000e100 	.word	0xe000e100
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f1c3 0307 	rsb	r3, r3, #7
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	bf28      	it	cs
 80035d2:	2304      	movcs	r3, #4
 80035d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3304      	adds	r3, #4
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d902      	bls.n	80035e4 <NVIC_EncodePriority+0x30>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3b03      	subs	r3, #3
 80035e2:	e000      	b.n	80035e6 <NVIC_EncodePriority+0x32>
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43da      	mvns	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	401a      	ands	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fa01 f303 	lsl.w	r3, r1, r3
 8003606:	43d9      	mvns	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	4313      	orrs	r3, r2
         );
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	; 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800362c:	d301      	bcc.n	8003632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362e:	2301      	movs	r3, #1
 8003630:	e00f      	b.n	8003652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <SysTick_Config+0x40>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800363a:	210f      	movs	r1, #15
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	f7ff ff8e 	bl	8003560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <SysTick_Config+0x40>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800364a:	4b04      	ldr	r3, [pc, #16]	; (800365c <SysTick_Config+0x40>)
 800364c:	2207      	movs	r2, #7
 800364e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	e000e010 	.word	0xe000e010

08003660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff29 	bl	80034c0 <__NVIC_SetPriorityGrouping>
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003688:	f7ff ff3e 	bl	8003508 <__NVIC_GetPriorityGrouping>
 800368c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f7ff ff8e 	bl	80035b4 <NVIC_EncodePriority>
 8003698:	4602      	mov	r2, r0
 800369a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff5d 	bl	8003560 <__NVIC_SetPriority>
}
 80036a6:	bf00      	nop
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4603      	mov	r3, r0
 80036b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff31 	bl	8003524 <__NVIC_EnableIRQ>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffa2 	bl	800361c <SysTick_Config>
 80036d8:	4603      	mov	r3, r0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e098      	b.n	8003828 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b4d      	ldr	r3, [pc, #308]	; (8003834 <HAL_DMA_Init+0x150>)
 80036fe:	429a      	cmp	r2, r3
 8003700:	d80f      	bhi.n	8003722 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <HAL_DMA_Init+0x154>)
 800370a:	4413      	add	r3, r2
 800370c:	4a4b      	ldr	r2, [pc, #300]	; (800383c <HAL_DMA_Init+0x158>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	009a      	lsls	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a48      	ldr	r2, [pc, #288]	; (8003840 <HAL_DMA_Init+0x15c>)
 800371e:	641a      	str	r2, [r3, #64]	; 0x40
 8003720:	e00e      	b.n	8003740 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	4b46      	ldr	r3, [pc, #280]	; (8003844 <HAL_DMA_Init+0x160>)
 800372a:	4413      	add	r3, r2
 800372c:	4a43      	ldr	r2, [pc, #268]	; (800383c <HAL_DMA_Init+0x158>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	009a      	lsls	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a42      	ldr	r2, [pc, #264]	; (8003848 <HAL_DMA_Init+0x164>)
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800379a:	d039      	beq.n	8003810 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	4a27      	ldr	r2, [pc, #156]	; (8003840 <HAL_DMA_Init+0x15c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d11a      	bne.n	80037dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80037a6:	4b29      	ldr	r3, [pc, #164]	; (800384c <HAL_DMA_Init+0x168>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f003 031c 	and.w	r3, r3, #28
 80037b2:	210f      	movs	r1, #15
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	4924      	ldr	r1, [pc, #144]	; (800384c <HAL_DMA_Init+0x168>)
 80037bc:	4013      	ands	r3, r2
 80037be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037c0:	4b22      	ldr	r3, [pc, #136]	; (800384c <HAL_DMA_Init+0x168>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f003 031c 	and.w	r3, r3, #28
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	491d      	ldr	r1, [pc, #116]	; (800384c <HAL_DMA_Init+0x168>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
 80037da:	e019      	b.n	8003810 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80037dc:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_DMA_Init+0x16c>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f003 031c 	and.w	r3, r3, #28
 80037e8:	210f      	movs	r1, #15
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	4917      	ldr	r1, [pc, #92]	; (8003850 <HAL_DMA_Init+0x16c>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <HAL_DMA_Init+0x16c>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f003 031c 	and.w	r3, r3, #28
 8003806:	fa01 f303 	lsl.w	r3, r1, r3
 800380a:	4911      	ldr	r1, [pc, #68]	; (8003850 <HAL_DMA_Init+0x16c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40020407 	.word	0x40020407
 8003838:	bffdfff8 	.word	0xbffdfff8
 800383c:	cccccccd 	.word	0xcccccccd
 8003840:	40020000 	.word	0x40020000
 8003844:	bffdfbf8 	.word	0xbffdfbf8
 8003848:	40020400 	.word	0x40020400
 800384c:	400200a8 	.word	0x400200a8
 8003850:	400204a8 	.word	0x400204a8

08003854 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_DMA_Start_IT+0x20>
 8003870:	2302      	movs	r3, #2
 8003872:	e04b      	b.n	800390c <HAL_DMA_Start_IT+0xb8>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d13a      	bne.n	80038fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f95f 	bl	8003b70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 020e 	orr.w	r2, r2, #14
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e00f      	b.n	80038ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0204 	bic.w	r2, r2, #4
 80038da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 020a 	orr.w	r2, r2, #10
 80038ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e005      	b.n	800390a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d008      	beq.n	800393e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2204      	movs	r2, #4
 8003930:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e022      	b.n	8003984 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 020e 	bic.w	r2, r2, #14
 800394c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	f003 021c 	and.w	r2, r3, #28
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f202 	lsl.w	r2, r1, r2
 8003970:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d005      	beq.n	80039b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2204      	movs	r2, #4
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
 80039b2:	e029      	b.n	8003a08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 020e 	bic.w	r2, r2, #14
 80039c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	f003 021c 	and.w	r2, r3, #28
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f202 	lsl.w	r2, r1, r2
 80039e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
    }
  }
  return status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f003 031c 	and.w	r3, r3, #28
 8003a32:	2204      	movs	r2, #4
 8003a34:	409a      	lsls	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d026      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x7a>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d021      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0204 	bic.w	r2, r2, #4
 8003a64:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f003 021c 	and.w	r2, r3, #28
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2104      	movs	r1, #4
 8003a74:	fa01 f202 	lsl.w	r2, r1, r2
 8003a78:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d071      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003a8a:	e06c      	b.n	8003b66 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	f003 031c 	and.w	r3, r3, #28
 8003a94:	2202      	movs	r2, #2
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02e      	beq.n	8003afe <HAL_DMA_IRQHandler+0xec>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d029      	beq.n	8003afe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 020a 	bic.w	r2, r2, #10
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	f003 021c 	and.w	r2, r3, #28
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	2102      	movs	r1, #2
 8003ade:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d038      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003afc:	e033      	b.n	8003b66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f003 031c 	and.w	r3, r3, #28
 8003b06:	2208      	movs	r2, #8
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d02a      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x156>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d025      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 020e 	bic.w	r2, r2, #14
 8003b2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	f003 021c 	and.w	r2, r3, #28
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2101      	movs	r1, #1
 8003b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
}
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f003 021c 	and.w	r2, r3, #28
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d108      	bne.n	8003bb4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bb2:	e007      	b.n	8003bc4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bde:	e154      	b.n	8003e8a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	2101      	movs	r1, #1
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8146 	beq.w	8003e84 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d005      	beq.n	8003c10 <HAL_GPIO_Init+0x40>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d130      	bne.n	8003c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c46:	2201      	movs	r2, #1
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4013      	ands	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	f003 0201 	and.w	r2, r3, #1
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d017      	beq.n	8003cae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	2203      	movs	r2, #3
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d123      	bne.n	8003d02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	08da      	lsrs	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3208      	adds	r2, #8
 8003cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	220f      	movs	r2, #15
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	08da      	lsrs	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3208      	adds	r2, #8
 8003cfc:	6939      	ldr	r1, [r7, #16]
 8003cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0203 	and.w	r2, r3, #3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80a0 	beq.w	8003e84 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d44:	4b58      	ldr	r3, [pc, #352]	; (8003ea8 <HAL_GPIO_Init+0x2d8>)
 8003d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d48:	4a57      	ldr	r2, [pc, #348]	; (8003ea8 <HAL_GPIO_Init+0x2d8>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6613      	str	r3, [r2, #96]	; 0x60
 8003d50:	4b55      	ldr	r3, [pc, #340]	; (8003ea8 <HAL_GPIO_Init+0x2d8>)
 8003d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d5c:	4a53      	ldr	r2, [pc, #332]	; (8003eac <HAL_GPIO_Init+0x2dc>)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	3302      	adds	r3, #2
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	220f      	movs	r2, #15
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d86:	d019      	beq.n	8003dbc <HAL_GPIO_Init+0x1ec>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a49      	ldr	r2, [pc, #292]	; (8003eb0 <HAL_GPIO_Init+0x2e0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d013      	beq.n	8003db8 <HAL_GPIO_Init+0x1e8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a48      	ldr	r2, [pc, #288]	; (8003eb4 <HAL_GPIO_Init+0x2e4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00d      	beq.n	8003db4 <HAL_GPIO_Init+0x1e4>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a47      	ldr	r2, [pc, #284]	; (8003eb8 <HAL_GPIO_Init+0x2e8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <HAL_GPIO_Init+0x1e0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a46      	ldr	r2, [pc, #280]	; (8003ebc <HAL_GPIO_Init+0x2ec>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <HAL_GPIO_Init+0x1dc>
 8003da8:	2304      	movs	r3, #4
 8003daa:	e008      	b.n	8003dbe <HAL_GPIO_Init+0x1ee>
 8003dac:	2307      	movs	r3, #7
 8003dae:	e006      	b.n	8003dbe <HAL_GPIO_Init+0x1ee>
 8003db0:	2303      	movs	r3, #3
 8003db2:	e004      	b.n	8003dbe <HAL_GPIO_Init+0x1ee>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e002      	b.n	8003dbe <HAL_GPIO_Init+0x1ee>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <HAL_GPIO_Init+0x1ee>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	f002 0203 	and.w	r2, r2, #3
 8003dc4:	0092      	lsls	r2, r2, #2
 8003dc6:	4093      	lsls	r3, r2
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dce:	4937      	ldr	r1, [pc, #220]	; (8003eac <HAL_GPIO_Init+0x2dc>)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ddc:	4b38      	ldr	r3, [pc, #224]	; (8003ec0 <HAL_GPIO_Init+0x2f0>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e00:	4a2f      	ldr	r2, [pc, #188]	; (8003ec0 <HAL_GPIO_Init+0x2f0>)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e06:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <HAL_GPIO_Init+0x2f0>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e2a:	4a25      	ldr	r2, [pc, #148]	; (8003ec0 <HAL_GPIO_Init+0x2f0>)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <HAL_GPIO_Init+0x2f0>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e54:	4a1a      	ldr	r2, [pc, #104]	; (8003ec0 <HAL_GPIO_Init+0x2f0>)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_GPIO_Init+0x2f0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e7e:	4a10      	ldr	r2, [pc, #64]	; (8003ec0 <HAL_GPIO_Init+0x2f0>)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3301      	adds	r3, #1
 8003e88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f47f aea3 	bne.w	8003be0 <HAL_GPIO_Init+0x10>
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	48000400 	.word	0x48000400
 8003eb4:	48000800 	.word	0x48000800
 8003eb8:	48000c00 	.word	0x48000c00
 8003ebc:	48001000 	.word	0x48001000
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ed4:	787b      	ldrb	r3, [r7, #1]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ee0:	e002      	b.n	8003ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ee2:	887a      	ldrh	r2, [r7, #2]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e081      	b.n	800400a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd fa42 	bl	80013a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d107      	bne.n	8003f6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	e006      	b.n	8003f7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d104      	bne.n	8003f8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69d9      	ldr	r1, [r3, #28]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	4608      	mov	r0, r1
 800401e:	4611      	mov	r1, r2
 8004020:	461a      	mov	r2, r3
 8004022:	4603      	mov	r3, r0
 8004024:	817b      	strh	r3, [r7, #10]
 8004026:	460b      	mov	r3, r1
 8004028:	813b      	strh	r3, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b20      	cmp	r3, #32
 8004038:	f040 80f9 	bne.w	800422e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_I2C_Mem_Write+0x34>
 8004042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0ed      	b.n	8004230 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_I2C_Mem_Write+0x4e>
 800405e:	2302      	movs	r3, #2
 8004060:	e0e6      	b.n	8004230 <HAL_I2C_Mem_Write+0x21c>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800406a:	f7fe f957 	bl	800231c <HAL_GetTick>
 800406e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2319      	movs	r3, #25
 8004076:	2201      	movs	r2, #1
 8004078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fac3 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0d1      	b.n	8004230 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2221      	movs	r2, #33	; 0x21
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2240      	movs	r2, #64	; 0x40
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040b4:	88f8      	ldrh	r0, [r7, #6]
 80040b6:	893a      	ldrh	r2, [r7, #8]
 80040b8:	8979      	ldrh	r1, [r7, #10]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4603      	mov	r3, r0
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f9d3 	bl	8004470 <I2C_RequestMemoryWrite>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0a9      	b.n	8004230 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2bff      	cmp	r3, #255	; 0xff
 80040e4:	d90e      	bls.n	8004104 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	22ff      	movs	r2, #255	; 0xff
 80040ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	2300      	movs	r3, #0
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fc2b 	bl	8004958 <I2C_TransferConfig>
 8004102:	e00f      	b.n	8004124 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	b2da      	uxtb	r2, r3
 8004114:	8979      	ldrh	r1, [r7, #10]
 8004116:	2300      	movs	r3, #0
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fc1a 	bl	8004958 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 faad 	bl	8004688 <I2C_WaitOnTXISFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e07b      	b.n	8004230 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d034      	beq.n	80041dc <HAL_I2C_Mem_Write+0x1c8>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	2b00      	cmp	r3, #0
 8004178:	d130      	bne.n	80041dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	2200      	movs	r2, #0
 8004182:	2180      	movs	r1, #128	; 0x80
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fa3f 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e04d      	b.n	8004230 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	2bff      	cmp	r3, #255	; 0xff
 800419c:	d90e      	bls.n	80041bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	8979      	ldrh	r1, [r7, #10]
 80041ac:	2300      	movs	r3, #0
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fbcf 	bl	8004958 <I2C_TransferConfig>
 80041ba:	e00f      	b.n	80041dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	8979      	ldrh	r1, [r7, #10]
 80041ce:	2300      	movs	r3, #0
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fbbe 	bl	8004958 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d19e      	bne.n	8004124 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fa8c 	bl	8004708 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e01a      	b.n	8004230 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2220      	movs	r2, #32
 8004200:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6859      	ldr	r1, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <HAL_I2C_Mem_Write+0x224>)
 800420e:	400b      	ands	r3, r1
 8004210:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e000      	b.n	8004230 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800422e:	2302      	movs	r3, #2
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	fe00e800 	.word	0xfe00e800

0800423c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	461a      	mov	r2, r3
 800424a:	4603      	mov	r3, r0
 800424c:	817b      	strh	r3, [r7, #10]
 800424e:	460b      	mov	r3, r1
 8004250:	813b      	strh	r3, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b20      	cmp	r3, #32
 8004260:	f040 80fd 	bne.w	800445e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_I2C_Mem_Read+0x34>
 800426a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0f1      	b.n	8004460 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_I2C_Mem_Read+0x4e>
 8004286:	2302      	movs	r3, #2
 8004288:	e0ea      	b.n	8004460 <HAL_I2C_Mem_Read+0x224>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004292:	f7fe f843 	bl	800231c <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2319      	movs	r3, #25
 800429e:	2201      	movs	r2, #1
 80042a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f9af 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0d5      	b.n	8004460 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2222      	movs	r2, #34	; 0x22
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2240      	movs	r2, #64	; 0x40
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042dc:	88f8      	ldrh	r0, [r7, #6]
 80042de:	893a      	ldrh	r2, [r7, #8]
 80042e0:	8979      	ldrh	r1, [r7, #10]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	4603      	mov	r3, r0
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f913 	bl	8004518 <I2C_RequestMemoryRead>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0ad      	b.n	8004460 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2bff      	cmp	r3, #255	; 0xff
 800430c:	d90e      	bls.n	800432c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	22ff      	movs	r2, #255	; 0xff
 8004312:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	b2da      	uxtb	r2, r3
 800431a:	8979      	ldrh	r1, [r7, #10]
 800431c:	4b52      	ldr	r3, [pc, #328]	; (8004468 <HAL_I2C_Mem_Read+0x22c>)
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fb17 	bl	8004958 <I2C_TransferConfig>
 800432a:	e00f      	b.n	800434c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	b2da      	uxtb	r2, r3
 800433c:	8979      	ldrh	r1, [r7, #10]
 800433e:	4b4a      	ldr	r3, [pc, #296]	; (8004468 <HAL_I2C_Mem_Read+0x22c>)
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fb06 	bl	8004958 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	2200      	movs	r2, #0
 8004354:	2104      	movs	r1, #4
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f956 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07c      	b.n	8004460 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d034      	beq.n	800440c <HAL_I2C_Mem_Read+0x1d0>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d130      	bne.n	800440c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	2200      	movs	r2, #0
 80043b2:	2180      	movs	r1, #128	; 0x80
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f927 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e04d      	b.n	8004460 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2bff      	cmp	r3, #255	; 0xff
 80043cc:	d90e      	bls.n	80043ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	22ff      	movs	r2, #255	; 0xff
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	8979      	ldrh	r1, [r7, #10]
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fab7 	bl	8004958 <I2C_TransferConfig>
 80043ea:	e00f      	b.n	800440c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	8979      	ldrh	r1, [r7, #10]
 80043fe:	2300      	movs	r3, #0
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 faa6 	bl	8004958 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d19a      	bne.n	800434c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f974 	bl	8004708 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e01a      	b.n	8004460 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2220      	movs	r2, #32
 8004430:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6859      	ldr	r1, [r3, #4]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_I2C_Mem_Read+0x230>)
 800443e:	400b      	ands	r3, r1
 8004440:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800445e:	2302      	movs	r3, #2
  }
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	80002400 	.word	0x80002400
 800446c:	fe00e800 	.word	0xfe00e800

08004470 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	4608      	mov	r0, r1
 800447a:	4611      	mov	r1, r2
 800447c:	461a      	mov	r2, r3
 800447e:	4603      	mov	r3, r0
 8004480:	817b      	strh	r3, [r7, #10]
 8004482:	460b      	mov	r3, r1
 8004484:	813b      	strh	r3, [r7, #8]
 8004486:	4613      	mov	r3, r2
 8004488:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	8979      	ldrh	r1, [r7, #10]
 8004490:	4b20      	ldr	r3, [pc, #128]	; (8004514 <I2C_RequestMemoryWrite+0xa4>)
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fa5d 	bl	8004958 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	69b9      	ldr	r1, [r7, #24]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f8f0 	bl	8004688 <I2C_WaitOnTXISFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e02c      	b.n	800450c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d105      	bne.n	80044c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044b8:	893b      	ldrh	r3, [r7, #8]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	629a      	str	r2, [r3, #40]	; 0x28
 80044c2:	e015      	b.n	80044f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044c4:	893b      	ldrh	r3, [r7, #8]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	69b9      	ldr	r1, [r7, #24]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f8d6 	bl	8004688 <I2C_WaitOnTXISFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e012      	b.n	800450c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2200      	movs	r2, #0
 80044f8:	2180      	movs	r1, #128	; 0x80
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f884 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	80002000 	.word	0x80002000

08004518 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	4608      	mov	r0, r1
 8004522:	4611      	mov	r1, r2
 8004524:	461a      	mov	r2, r3
 8004526:	4603      	mov	r3, r0
 8004528:	817b      	strh	r3, [r7, #10]
 800452a:	460b      	mov	r3, r1
 800452c:	813b      	strh	r3, [r7, #8]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	8979      	ldrh	r1, [r7, #10]
 8004538:	4b20      	ldr	r3, [pc, #128]	; (80045bc <I2C_RequestMemoryRead+0xa4>)
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2300      	movs	r3, #0
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa0a 	bl	8004958 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	69b9      	ldr	r1, [r7, #24]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f89d 	bl	8004688 <I2C_WaitOnTXISFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e02c      	b.n	80045b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800455e:	893b      	ldrh	r3, [r7, #8]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	629a      	str	r2, [r3, #40]	; 0x28
 8004568:	e015      	b.n	8004596 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800456a:	893b      	ldrh	r3, [r7, #8]
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	b29b      	uxth	r3, r3
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	69b9      	ldr	r1, [r7, #24]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f883 	bl	8004688 <I2C_WaitOnTXISFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e012      	b.n	80045b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800458c:	893b      	ldrh	r3, [r7, #8]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2200      	movs	r2, #0
 800459e:	2140      	movs	r1, #64	; 0x40
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f831 	bl	8004608 <I2C_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	80002000 	.word	0x80002000

080045c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d103      	bne.n	80045de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d007      	beq.n	80045fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	619a      	str	r2, [r3, #24]
  }
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004618:	e022      	b.n	8004660 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004620:	d01e      	beq.n	8004660 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fd fe7b 	bl	800231c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d113      	bne.n	8004660 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e00f      	b.n	8004680 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4013      	ands	r3, r2
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	429a      	cmp	r2, r3
 800467c:	d0cd      	beq.n	800461a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004694:	e02c      	b.n	80046f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f870 	bl	8004780 <I2C_IsErrorOccurred>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e02a      	b.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d01e      	beq.n	80046f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fd fe33 	bl	800231c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d113      	bne.n	80046f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e007      	b.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d1cb      	bne.n	8004696 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004714:	e028      	b.n	8004768 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f830 	bl	8004780 <I2C_IsErrorOccurred>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e026      	b.n	8004778 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fd fdf7 	bl	800231c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d113      	bne.n	8004768 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e007      	b.n	8004778 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b20      	cmp	r3, #32
 8004774:	d1cf      	bne.n	8004716 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d075      	beq.n	8004898 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2210      	movs	r2, #16
 80047b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047b4:	e056      	b.n	8004864 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d052      	beq.n	8004864 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047be:	f7fd fdad 	bl	800231c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <I2C_IsErrorOccurred+0x54>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d147      	bne.n	8004864 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f6:	d12e      	bne.n	8004856 <I2C_IsErrorOccurred+0xd6>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047fe:	d02a      	beq.n	8004856 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	2b20      	cmp	r3, #32
 8004804:	d027      	beq.n	8004856 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004814:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004816:	f7fd fd81 	bl	800231c <HAL_GetTick>
 800481a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800481c:	e01b      	b.n	8004856 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800481e:	f7fd fd7d 	bl	800231c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b19      	cmp	r3, #25
 800482a:	d914      	bls.n	8004856 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	f043 0220 	orr.w	r2, r3, #32
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b20      	cmp	r3, #32
 8004862:	d1dc      	bne.n	800481e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b20      	cmp	r3, #32
 8004870:	d003      	beq.n	800487a <I2C_IsErrorOccurred+0xfa>
 8004872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004876:	2b00      	cmp	r3, #0
 8004878:	d09d      	beq.n	80047b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800487a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800487e:	2b00      	cmp	r3, #0
 8004880:	d103      	bne.n	800488a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2220      	movs	r2, #32
 8004888:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f043 0304 	orr.w	r3, r3, #4
 8004890:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f043 0308 	orr.w	r3, r3, #8
 80048d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f043 0302 	orr.w	r3, r3, #2
 80048f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01c      	beq.n	8004948 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff fe56 	bl	80045c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <I2C_IsErrorOccurred+0x1d4>)
 8004920:	400b      	ands	r3, r1
 8004922:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	431a      	orrs	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800494c:	4618      	mov	r0, r3
 800494e:	3728      	adds	r7, #40	; 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	fe00e800 	.word	0xfe00e800

08004958 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	817b      	strh	r3, [r7, #10]
 8004966:	4613      	mov	r3, r2
 8004968:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800496a:	897b      	ldrh	r3, [r7, #10]
 800496c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004970:	7a7b      	ldrb	r3, [r7, #9]
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004978:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	4313      	orrs	r3, r2
 8004982:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004986:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	0d5b      	lsrs	r3, r3, #21
 8004992:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <I2C_TransferConfig+0x60>)
 8004998:	430b      	orrs	r3, r1
 800499a:	43db      	mvns	r3, r3
 800499c:	ea02 0103 	and.w	r1, r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	03ff63ff 	.word	0x03ff63ff

080049bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d138      	bne.n	8004a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049dc:	2302      	movs	r3, #2
 80049de:	e032      	b.n	8004a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2224      	movs	r2, #36	; 0x24
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6819      	ldr	r1, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e000      	b.n	8004a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
  }
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d139      	bne.n	8004adc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e033      	b.n	8004ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2224      	movs	r2, #36	; 0x24
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004aa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <HAL_PWREx_GetVoltageRange+0x18>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40007000 	.word	0x40007000

08004b08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b16:	d130      	bne.n	8004b7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b18:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b24:	d038      	beq.n	8004b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b26:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b36:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2232      	movs	r2, #50	; 0x32
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	0c9b      	lsrs	r3, r3, #18
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b4c:	e002      	b.n	8004b54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b60:	d102      	bne.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f2      	bne.n	8004b4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b68:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b74:	d110      	bne.n	8004b98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00f      	b.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b86:	d007      	beq.n	8004b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b90:	4a05      	ldr	r2, [pc, #20]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40007000 	.word	0x40007000
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	431bde83 	.word	0x431bde83

08004bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f000 bc02 	b.w	80053cc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc8:	4b96      	ldr	r3, [pc, #600]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bd2:	4b94      	ldr	r3, [pc, #592]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80e4 	beq.w	8004db2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <HAL_RCC_OscConfig+0x4c>
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b0c      	cmp	r3, #12
 8004bf4:	f040 808b 	bne.w	8004d0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	f040 8087 	bne.w	8004d0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c00:	4b88      	ldr	r3, [pc, #544]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCC_OscConfig+0x64>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e3d9      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	4b81      	ldr	r3, [pc, #516]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <HAL_RCC_OscConfig+0x7e>
 8004c28:	4b7e      	ldr	r3, [pc, #504]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c30:	e005      	b.n	8004c3e <HAL_RCC_OscConfig+0x8a>
 8004c32:	4b7c      	ldr	r3, [pc, #496]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d223      	bcs.n	8004c8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fd8c 	bl	8005764 <RCC_SetFlashLatencyFromMSIRange>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e3ba      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c56:	4b73      	ldr	r3, [pc, #460]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a72      	ldr	r2, [pc, #456]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c5c:	f043 0308 	orr.w	r3, r3, #8
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	4b70      	ldr	r3, [pc, #448]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	496d      	ldr	r1, [pc, #436]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c74:	4b6b      	ldr	r3, [pc, #428]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	4968      	ldr	r1, [pc, #416]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
 8004c88:	e025      	b.n	8004cd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c8a:	4b66      	ldr	r3, [pc, #408]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a65      	ldr	r2, [pc, #404]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c90:	f043 0308 	orr.w	r3, r3, #8
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b63      	ldr	r3, [pc, #396]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	4960      	ldr	r1, [pc, #384]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ca8:	4b5e      	ldr	r3, [pc, #376]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	495b      	ldr	r1, [pc, #364]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fd4c 	bl	8005764 <RCC_SetFlashLatencyFromMSIRange>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e37a      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cd6:	f000 fc81 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	4950      	ldr	r1, [pc, #320]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004ce8:	5ccb      	ldrb	r3, [r1, r3]
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf2:	4a4e      	ldr	r2, [pc, #312]	; (8004e2c <HAL_RCC_OscConfig+0x278>)
 8004cf4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cf6:	4b4e      	ldr	r3, [pc, #312]	; (8004e30 <HAL_RCC_OscConfig+0x27c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fd fabe 	bl	800227c <HAL_InitTick>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d052      	beq.n	8004db0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	e35e      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d032      	beq.n	8004d7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d16:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a42      	ldr	r2, [pc, #264]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d22:	f7fd fafb 	bl	800231c <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d2a:	f7fd faf7 	bl	800231c <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e347      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d3c:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d48:	4b36      	ldr	r3, [pc, #216]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a35      	ldr	r2, [pc, #212]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d4e:	f043 0308 	orr.w	r3, r3, #8
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	4930      	ldr	r1, [pc, #192]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d66:	4b2f      	ldr	r3, [pc, #188]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	492b      	ldr	r1, [pc, #172]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	604b      	str	r3, [r1, #4]
 8004d7a:	e01a      	b.n	8004db2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d7c:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d88:	f7fd fac8 	bl	800231c <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d90:	f7fd fac4 	bl	800231c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e314      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x1dc>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004db0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d073      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x21c>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d10e      	bne.n	8004de8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d10b      	bne.n	8004de8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd0:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d063      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x2f0>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d15f      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e2f1      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df0:	d106      	bne.n	8004e00 <HAL_RCC_OscConfig+0x24c>
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a0b      	ldr	r2, [pc, #44]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e025      	b.n	8004e4c <HAL_RCC_OscConfig+0x298>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e08:	d114      	bne.n	8004e34 <HAL_RCC_OscConfig+0x280>
 8004e0a:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a02      	ldr	r2, [pc, #8]	; (8004e24 <HAL_RCC_OscConfig+0x270>)
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e013      	b.n	8004e4c <HAL_RCC_OscConfig+0x298>
 8004e24:	40021000 	.word	0x40021000
 8004e28:	0800b2a4 	.word	0x0800b2a4
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	20000004 	.word	0x20000004
 8004e34:	4ba0      	ldr	r3, [pc, #640]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a9f      	ldr	r2, [pc, #636]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	4b9d      	ldr	r3, [pc, #628]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a9c      	ldr	r2, [pc, #624]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d013      	beq.n	8004e7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fd fa62 	bl	800231c <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e5c:	f7fd fa5e 	bl	800231c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e2ae      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e6e:	4b92      	ldr	r3, [pc, #584]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x2a8>
 8004e7a:	e014      	b.n	8004ea6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fd fa4e 	bl	800231c <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e84:	f7fd fa4a 	bl	800231c <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	; 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e29a      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e96:	4b88      	ldr	r3, [pc, #544]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x2d0>
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d060      	beq.n	8004f74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x310>
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d119      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d116      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec4:	4b7c      	ldr	r3, [pc, #496]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_OscConfig+0x328>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e277      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	4b76      	ldr	r3, [pc, #472]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	4973      	ldr	r1, [pc, #460]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ef0:	e040      	b.n	8004f74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d023      	beq.n	8004f42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004efa:	4b6f      	ldr	r3, [pc, #444]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a6e      	ldr	r2, [pc, #440]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fd fa09 	bl	800231c <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f0e:	f7fd fa05 	bl	800231c <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e255      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f20:	4b65      	ldr	r3, [pc, #404]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2c:	4b62      	ldr	r3, [pc, #392]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	061b      	lsls	r3, r3, #24
 8004f3a:	495f      	ldr	r1, [pc, #380]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	604b      	str	r3, [r1, #4]
 8004f40:	e018      	b.n	8004f74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f42:	4b5d      	ldr	r3, [pc, #372]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a5c      	ldr	r2, [pc, #368]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4e:	f7fd f9e5 	bl	800231c <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f56:	f7fd f9e1 	bl	800231c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e231      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f68:	4b53      	ldr	r3, [pc, #332]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d03c      	beq.n	8004ffa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01c      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f88:	4b4b      	ldr	r3, [pc, #300]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8e:	4a4a      	ldr	r2, [pc, #296]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7fd f9c0 	bl	800231c <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa0:	f7fd f9bc 	bl	800231c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e20c      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fb2:	4b41      	ldr	r3, [pc, #260]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0ef      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x3ec>
 8004fc0:	e01b      	b.n	8004ffa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc2:	4b3d      	ldr	r3, [pc, #244]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc8:	4a3b      	ldr	r2, [pc, #236]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd2:	f7fd f9a3 	bl	800231c <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fda:	f7fd f99f 	bl	800231c <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e1ef      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fec:	4b32      	ldr	r3, [pc, #200]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8004fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ef      	bne.n	8004fda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80a6 	beq.w	8005154 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005008:	2300      	movs	r3, #0
 800500a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800500c:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10d      	bne.n	8005034 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005018:	4b27      	ldr	r3, [pc, #156]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	4a26      	ldr	r2, [pc, #152]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 800501e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005022:	6593      	str	r3, [r2, #88]	; 0x58
 8005024:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005030:	2301      	movs	r3, #1
 8005032:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005034:	4b21      	ldr	r3, [pc, #132]	; (80050bc <HAL_RCC_OscConfig+0x508>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d118      	bne.n	8005072 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005040:	4b1e      	ldr	r3, [pc, #120]	; (80050bc <HAL_RCC_OscConfig+0x508>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <HAL_RCC_OscConfig+0x508>)
 8005046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800504a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800504c:	f7fd f966 	bl	800231c <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005054:	f7fd f962 	bl	800231c <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e1b2      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005066:	4b15      	ldr	r3, [pc, #84]	; (80050bc <HAL_RCC_OscConfig+0x508>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d108      	bne.n	800508c <HAL_RCC_OscConfig+0x4d8>
 800507a:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	4a0d      	ldr	r2, [pc, #52]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800508a:	e029      	b.n	80050e0 <HAL_RCC_OscConfig+0x52c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b05      	cmp	r3, #5
 8005092:	d115      	bne.n	80050c0 <HAL_RCC_OscConfig+0x50c>
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	4a07      	ldr	r2, [pc, #28]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 800509c:	f043 0304 	orr.w	r3, r3, #4
 80050a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	4a03      	ldr	r2, [pc, #12]	; (80050b8 <HAL_RCC_OscConfig+0x504>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050b4:	e014      	b.n	80050e0 <HAL_RCC_OscConfig+0x52c>
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40007000 	.word	0x40007000
 80050c0:	4b9a      	ldr	r3, [pc, #616]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	4a99      	ldr	r2, [pc, #612]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050d0:	4b96      	ldr	r3, [pc, #600]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	4a95      	ldr	r2, [pc, #596]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80050d8:	f023 0304 	bic.w	r3, r3, #4
 80050dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d016      	beq.n	8005116 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e8:	f7fd f918 	bl	800231c <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fd f914 	bl	800231c <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e162      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005106:	4b89      	ldr	r3, [pc, #548]	; (800532c <HAL_RCC_OscConfig+0x778>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ed      	beq.n	80050f0 <HAL_RCC_OscConfig+0x53c>
 8005114:	e015      	b.n	8005142 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fd f901 	bl	800231c <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fd f8fd 	bl	800231c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e14b      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005134:	4b7d      	ldr	r3, [pc, #500]	; (800532c <HAL_RCC_OscConfig+0x778>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1ed      	bne.n	800511e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005142:	7ffb      	ldrb	r3, [r7, #31]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d105      	bne.n	8005154 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005148:	4b78      	ldr	r3, [pc, #480]	; (800532c <HAL_RCC_OscConfig+0x778>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	4a77      	ldr	r2, [pc, #476]	; (800532c <HAL_RCC_OscConfig+0x778>)
 800514e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005152:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d03c      	beq.n	80051da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01c      	beq.n	80051a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005168:	4b70      	ldr	r3, [pc, #448]	; (800532c <HAL_RCC_OscConfig+0x778>)
 800516a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800516e:	4a6f      	ldr	r2, [pc, #444]	; (800532c <HAL_RCC_OscConfig+0x778>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005178:	f7fd f8d0 	bl	800231c <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005180:	f7fd f8cc 	bl	800231c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e11c      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005192:	4b66      	ldr	r3, [pc, #408]	; (800532c <HAL_RCC_OscConfig+0x778>)
 8005194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0ef      	beq.n	8005180 <HAL_RCC_OscConfig+0x5cc>
 80051a0:	e01b      	b.n	80051da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051a2:	4b62      	ldr	r3, [pc, #392]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80051a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051a8:	4a60      	ldr	r2, [pc, #384]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b2:	f7fd f8b3 	bl	800231c <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ba:	f7fd f8af 	bl	800231c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e0ff      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051cc:	4b57      	ldr	r3, [pc, #348]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80051ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1ef      	bne.n	80051ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 80f3 	beq.w	80053ca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	f040 80c9 	bne.w	8005380 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051ee:	4b4f      	ldr	r3, [pc, #316]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f003 0203 	and.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	429a      	cmp	r2, r3
 8005200:	d12c      	bne.n	800525c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	3b01      	subs	r3, #1
 800520e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005210:	429a      	cmp	r2, r3
 8005212:	d123      	bne.n	800525c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005220:	429a      	cmp	r2, r3
 8005222:	d11b      	bne.n	800525c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d113      	bne.n	800525c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	085b      	lsrs	r3, r3, #1
 8005240:	3b01      	subs	r3, #1
 8005242:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d109      	bne.n	800525c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	3b01      	subs	r3, #1
 8005256:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005258:	429a      	cmp	r2, r3
 800525a:	d06b      	beq.n	8005334 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d062      	beq.n	8005328 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005262:	4b32      	ldr	r3, [pc, #200]	; (800532c <HAL_RCC_OscConfig+0x778>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e0ac      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005272:	4b2e      	ldr	r3, [pc, #184]	; (800532c <HAL_RCC_OscConfig+0x778>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2d      	ldr	r2, [pc, #180]	; (800532c <HAL_RCC_OscConfig+0x778>)
 8005278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800527c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800527e:	f7fd f84d 	bl	800231c <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005286:	f7fd f849 	bl	800231c <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e099      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005298:	4b24      	ldr	r3, [pc, #144]	; (800532c <HAL_RCC_OscConfig+0x778>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f0      	bne.n	8005286 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a4:	4b21      	ldr	r3, [pc, #132]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	4b21      	ldr	r3, [pc, #132]	; (8005330 <HAL_RCC_OscConfig+0x77c>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052b4:	3a01      	subs	r2, #1
 80052b6:	0112      	lsls	r2, r2, #4
 80052b8:	4311      	orrs	r1, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052be:	0212      	lsls	r2, r2, #8
 80052c0:	4311      	orrs	r1, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052c6:	0852      	lsrs	r2, r2, #1
 80052c8:	3a01      	subs	r2, #1
 80052ca:	0552      	lsls	r2, r2, #21
 80052cc:	4311      	orrs	r1, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052d2:	0852      	lsrs	r2, r2, #1
 80052d4:	3a01      	subs	r2, #1
 80052d6:	0652      	lsls	r2, r2, #25
 80052d8:	4311      	orrs	r1, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052de:	06d2      	lsls	r2, r2, #27
 80052e0:	430a      	orrs	r2, r1
 80052e2:	4912      	ldr	r1, [pc, #72]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052e8:	4b10      	ldr	r3, [pc, #64]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a0f      	ldr	r2, [pc, #60]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80052ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052f4:	4b0d      	ldr	r3, [pc, #52]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a0c      	ldr	r2, [pc, #48]	; (800532c <HAL_RCC_OscConfig+0x778>)
 80052fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005300:	f7fd f80c 	bl	800231c <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005308:	f7fd f808 	bl	800231c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e058      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800531a:	4b04      	ldr	r3, [pc, #16]	; (800532c <HAL_RCC_OscConfig+0x778>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005326:	e050      	b.n	80053ca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e04f      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
 800532c:	40021000 	.word	0x40021000
 8005330:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005334:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d144      	bne.n	80053ca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005340:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a23      	ldr	r2, [pc, #140]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 8005346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800534c:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 8005352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005356:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005358:	f7fc ffe0 	bl	800231c <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005360:	f7fc ffdc 	bl	800231c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e02c      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005372:	4b18      	ldr	r3, [pc, #96]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x7ac>
 800537e:	e024      	b.n	80053ca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b0c      	cmp	r3, #12
 8005384:	d01f      	beq.n	80053c6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005386:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a12      	ldr	r2, [pc, #72]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 800538c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fc ffc3 	bl	800231c <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539a:	f7fc ffbf 	bl	800231c <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e00f      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ac:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f0      	bne.n	800539a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	4905      	ldr	r1, [pc, #20]	; (80053d4 <HAL_RCC_OscConfig+0x820>)
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <HAL_RCC_OscConfig+0x824>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	60cb      	str	r3, [r1, #12]
 80053c4:	e001      	b.n	80053ca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40021000 	.word	0x40021000
 80053d8:	feeefffc 	.word	0xfeeefffc

080053dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0e7      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053f0:	4b75      	ldr	r3, [pc, #468]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d910      	bls.n	8005420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fe:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f023 0207 	bic.w	r2, r3, #7
 8005406:	4970      	ldr	r1, [pc, #448]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4313      	orrs	r3, r2
 800540c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540e:	4b6e      	ldr	r3, [pc, #440]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0cf      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d010      	beq.n	800544e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	4b66      	ldr	r3, [pc, #408]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005438:	429a      	cmp	r2, r3
 800543a:	d908      	bls.n	800544e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800543c:	4b63      	ldr	r3, [pc, #396]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4960      	ldr	r1, [pc, #384]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800544a:	4313      	orrs	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d04c      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b03      	cmp	r3, #3
 8005460:	d107      	bne.n	8005472 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005462:	4b5a      	ldr	r3, [pc, #360]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d121      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0a6      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d107      	bne.n	800548a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800547a:	4b54      	ldr	r3, [pc, #336]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d115      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e09a      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d107      	bne.n	80054a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005492:	4b4e      	ldr	r3, [pc, #312]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e08e      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a2:	4b4a      	ldr	r3, [pc, #296]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e086      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054b2:	4b46      	ldr	r3, [pc, #280]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 0203 	bic.w	r2, r3, #3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	4943      	ldr	r1, [pc, #268]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c4:	f7fc ff2a 	bl	800231c <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ca:	e00a      	b.n	80054e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054cc:	f7fc ff26 	bl	800231c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e06e      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	4b3a      	ldr	r3, [pc, #232]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 020c 	and.w	r2, r3, #12
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d1eb      	bne.n	80054cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	4b31      	ldr	r3, [pc, #196]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800550c:	429a      	cmp	r2, r3
 800550e:	d208      	bcs.n	8005522 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005510:	4b2e      	ldr	r3, [pc, #184]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	492b      	ldr	r1, [pc, #172]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800551e:	4313      	orrs	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005522:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d210      	bcs.n	8005552 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 0207 	bic.w	r2, r3, #7
 8005538:	4923      	ldr	r1, [pc, #140]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	4313      	orrs	r3, r2
 800553e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005540:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d001      	beq.n	8005552 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e036      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d008      	beq.n	8005570 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800555e:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	4918      	ldr	r1, [pc, #96]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800556c:	4313      	orrs	r3, r2
 800556e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800557c:	4b13      	ldr	r3, [pc, #76]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4910      	ldr	r1, [pc, #64]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800558c:	4313      	orrs	r3, r2
 800558e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005590:	f000 f824 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	490b      	ldr	r1, [pc, #44]	; (80055d0 <HAL_RCC_ClockConfig+0x1f4>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
 80055ac:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <HAL_RCC_ClockConfig+0x1f8>)
 80055ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_RCC_ClockConfig+0x1fc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fc fe61 	bl	800227c <HAL_InitTick>
 80055ba:	4603      	mov	r3, r0
 80055bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80055be:	7afb      	ldrb	r3, [r7, #11]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40022000 	.word	0x40022000
 80055cc:	40021000 	.word	0x40021000
 80055d0:	0800b2a4 	.word	0x0800b2a4
 80055d4:	20000000 	.word	0x20000000
 80055d8:	20000004 	.word	0x20000004

080055dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ea:	4b3e      	ldr	r3, [pc, #248]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055f4:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x34>
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b0c      	cmp	r3, #12
 8005608:	d121      	bne.n	800564e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d11e      	bne.n	800564e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005610:	4b34      	ldr	r3, [pc, #208]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d107      	bne.n	800562c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800561c:	4b31      	ldr	r3, [pc, #196]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800561e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	e005      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800562c:	4b2d      	ldr	r3, [pc, #180]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	091b      	lsrs	r3, r3, #4
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005638:	4a2b      	ldr	r2, [pc, #172]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005640:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10d      	bne.n	8005664 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800564c:	e00a      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b04      	cmp	r3, #4
 8005652:	d102      	bne.n	800565a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	e004      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b08      	cmp	r3, #8
 800565e:	d101      	bne.n	8005664 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005660:	4b23      	ldr	r3, [pc, #140]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005662:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b0c      	cmp	r3, #12
 8005668:	d134      	bne.n	80056d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800566a:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d003      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0xa6>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d003      	beq.n	8005688 <HAL_RCC_GetSysClockFreq+0xac>
 8005680:	e005      	b.n	800568e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005682:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005684:	617b      	str	r3, [r7, #20]
      break;
 8005686:	e005      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800568a:	617b      	str	r3, [r7, #20]
      break;
 800568c:	e002      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	617b      	str	r3, [r7, #20]
      break;
 8005692:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005694:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	3301      	adds	r3, #1
 80056a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	fb03 f202 	mul.w	r2, r3, r2
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	0e5b      	lsrs	r3, r3, #25
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	3301      	adds	r3, #1
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056d4:	69bb      	ldr	r3, [r7, #24]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3724      	adds	r7, #36	; 0x24
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	0800b2bc 	.word	0x0800b2bc
 80056ec:	00f42400 	.word	0x00f42400
 80056f0:	007a1200 	.word	0x007a1200

080056f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <HAL_RCC_GetHCLKFreq+0x14>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000000 	.word	0x20000000

0800570c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005710:	f7ff fff0 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005714:	4602      	mov	r2, r0
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0a1b      	lsrs	r3, r3, #8
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	4904      	ldr	r1, [pc, #16]	; (8005734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005722:	5ccb      	ldrb	r3, [r1, r3]
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800572c:	4618      	mov	r0, r3
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40021000 	.word	0x40021000
 8005734:	0800b2b4 	.word	0x0800b2b4

08005738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800573c:	f7ff ffda 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005740:	4602      	mov	r2, r0
 8005742:	4b06      	ldr	r3, [pc, #24]	; (800575c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	0adb      	lsrs	r3, r3, #11
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	4904      	ldr	r1, [pc, #16]	; (8005760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	f003 031f 	and.w	r3, r3, #31
 8005754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005758:	4618      	mov	r0, r3
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40021000 	.word	0x40021000
 8005760:	0800b2b4 	.word	0x0800b2b4

08005764 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800576c:	2300      	movs	r3, #0
 800576e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005770:	4b2a      	ldr	r3, [pc, #168]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800577c:	f7ff f9b6 	bl	8004aec <HAL_PWREx_GetVoltageRange>
 8005780:	6178      	str	r0, [r7, #20]
 8005782:	e014      	b.n	80057ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005788:	4a24      	ldr	r2, [pc, #144]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800578a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578e:	6593      	str	r3, [r2, #88]	; 0x58
 8005790:	4b22      	ldr	r3, [pc, #136]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800579c:	f7ff f9a6 	bl	8004aec <HAL_PWREx_GetVoltageRange>
 80057a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80057a2:	4b1e      	ldr	r3, [pc, #120]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	4a1d      	ldr	r2, [pc, #116]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b4:	d10b      	bne.n	80057ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d919      	bls.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2ba0      	cmp	r3, #160	; 0xa0
 80057c0:	d902      	bls.n	80057c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057c2:	2302      	movs	r3, #2
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	e013      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057c8:	2301      	movs	r3, #1
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	e010      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d902      	bls.n	80057da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057d4:	2303      	movs	r3, #3
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	e00a      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b80      	cmp	r3, #128	; 0x80
 80057de:	d102      	bne.n	80057e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057e0:	2302      	movs	r3, #2
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	e004      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b70      	cmp	r3, #112	; 0x70
 80057ea:	d101      	bne.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057ec:	2301      	movs	r3, #1
 80057ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f023 0207 	bic.w	r2, r3, #7
 80057f8:	4909      	ldr	r1, [pc, #36]	; (8005820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	429a      	cmp	r2, r3
 800580c:	d001      	beq.n	8005812 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	40022000 	.word	0x40022000

08005824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800582c:	2300      	movs	r3, #0
 800582e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005830:	2300      	movs	r3, #0
 8005832:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800583c:	2b00      	cmp	r3, #0
 800583e:	d031      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005848:	d01a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800584a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800584e:	d814      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005858:	d10f      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800585a:	4b5d      	ldr	r3, [pc, #372]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	4a5c      	ldr	r2, [pc, #368]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005864:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005866:	e00c      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f9f0 	bl	8005c54 <RCCEx_PLLSAI1_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005878:	e003      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	74fb      	strb	r3, [r7, #19]
      break;
 800587e:	e000      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005882:	7cfb      	ldrb	r3, [r7, #19]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10b      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005888:	4b51      	ldr	r3, [pc, #324]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	494e      	ldr	r1, [pc, #312]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800589e:	e001      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a0:	7cfb      	ldrb	r3, [r7, #19]
 80058a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 809e 	beq.w	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058b2:	2300      	movs	r3, #0
 80058b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058b6:	4b46      	ldr	r3, [pc, #280]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80058c6:	2300      	movs	r3, #0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00d      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058cc:	4b40      	ldr	r3, [pc, #256]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d0:	4a3f      	ldr	r2, [pc, #252]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d6:	6593      	str	r3, [r2, #88]	; 0x58
 80058d8:	4b3d      	ldr	r3, [pc, #244]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058e4:	2301      	movs	r3, #1
 80058e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058e8:	4b3a      	ldr	r3, [pc, #232]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a39      	ldr	r2, [pc, #228]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80058ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058f4:	f7fc fd12 	bl	800231c <HAL_GetTick>
 80058f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058fa:	e009      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058fc:	f7fc fd0e 	bl	800231c <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d902      	bls.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	74fb      	strb	r3, [r7, #19]
        break;
 800590e:	e005      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005910:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ef      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d15a      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005922:	4b2b      	ldr	r3, [pc, #172]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01e      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	429a      	cmp	r2, r3
 800593c:	d019      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005948:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800594a:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800595a:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005960:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800596a:	4a19      	ldr	r2, [pc, #100]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d016      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fc fcce 	bl	800231c <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005982:	e00b      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005984:	f7fc fcca 	bl	800231c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d902      	bls.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	74fb      	strb	r3, [r7, #19]
            break;
 800599a:	e006      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800599e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0ec      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80059aa:	7cfb      	ldrb	r3, [r7, #19]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10b      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	4904      	ldr	r1, [pc, #16]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059c6:	e009      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059c8:	7cfb      	ldrb	r3, [r7, #19]
 80059ca:	74bb      	strb	r3, [r7, #18]
 80059cc:	e006      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000
 80059d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	7cfb      	ldrb	r3, [r7, #19]
 80059da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059dc:	7c7b      	ldrb	r3, [r7, #17]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d105      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e2:	4b9b      	ldr	r3, [pc, #620]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e6:	4a9a      	ldr	r2, [pc, #616]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059fa:	4b95      	ldr	r3, [pc, #596]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f023 0203 	bic.w	r2, r3, #3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	4991      	ldr	r1, [pc, #580]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a1c:	4b8c      	ldr	r3, [pc, #560]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	f023 020c 	bic.w	r2, r3, #12
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	4989      	ldr	r1, [pc, #548]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a3e:	4b84      	ldr	r3, [pc, #528]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	4980      	ldr	r1, [pc, #512]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a60:	4b7b      	ldr	r3, [pc, #492]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	4978      	ldr	r1, [pc, #480]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a82:	4b73      	ldr	r3, [pc, #460]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a90:	496f      	ldr	r1, [pc, #444]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005aa4:	4b6a      	ldr	r3, [pc, #424]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	4967      	ldr	r1, [pc, #412]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ac6:	4b62      	ldr	r3, [pc, #392]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	495e      	ldr	r1, [pc, #376]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ae8:	4b59      	ldr	r3, [pc, #356]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af6:	4956      	ldr	r1, [pc, #344]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b0a:	4b51      	ldr	r3, [pc, #324]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	494d      	ldr	r1, [pc, #308]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d028      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b2c:	4b48      	ldr	r3, [pc, #288]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3a:	4945      	ldr	r1, [pc, #276]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b4a:	d106      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b4c:	4b40      	ldr	r3, [pc, #256]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4a3f      	ldr	r2, [pc, #252]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b56:	60d3      	str	r3, [r2, #12]
 8005b58:	e011      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b62:	d10c      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	2101      	movs	r1, #1
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f872 	bl	8005c54 <RCCEx_PLLSAI1_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005b7a:	7cfb      	ldrb	r3, [r7, #19]
 8005b7c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d028      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b8a:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b98:	492d      	ldr	r1, [pc, #180]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005baa:	4b29      	ldr	r3, [pc, #164]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	4a28      	ldr	r2, [pc, #160]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb4:	60d3      	str	r3, [r2, #12]
 8005bb6:	e011      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 f843 	bl	8005c54 <RCCEx_PLLSAI1_Config>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bd2:	7cfb      	ldrb	r3, [r7, #19]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005bd8:	7cfb      	ldrb	r3, [r7, #19]
 8005bda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01c      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005be8:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf6:	4916      	ldr	r1, [pc, #88]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c06:	d10c      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f820 	bl	8005c54 <RCCEx_PLLSAI1_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c18:	7cfb      	ldrb	r3, [r7, #19]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005c1e:	7cfb      	ldrb	r3, [r7, #19]
 8005c20:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c2e:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c34:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3c:	4904      	ldr	r1, [pc, #16]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c44:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40021000 	.word	0x40021000

08005c54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c62:	4b74      	ldr	r3, [pc, #464]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d018      	beq.n	8005ca0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c6e:	4b71      	ldr	r3, [pc, #452]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f003 0203 	and.w	r2, r3, #3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d10d      	bne.n	8005c9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
       ||
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c86:	4b6b      	ldr	r3, [pc, #428]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
       ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d047      	beq.n	8005d2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
 8005c9e:	e044      	b.n	8005d2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d018      	beq.n	8005cda <RCCEx_PLLSAI1_Config+0x86>
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d825      	bhi.n	8005cf8 <RCCEx_PLLSAI1_Config+0xa4>
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d002      	beq.n	8005cb6 <RCCEx_PLLSAI1_Config+0x62>
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d009      	beq.n	8005cc8 <RCCEx_PLLSAI1_Config+0x74>
 8005cb4:	e020      	b.n	8005cf8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cb6:	4b5f      	ldr	r3, [pc, #380]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d11d      	bne.n	8005cfe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cc6:	e01a      	b.n	8005cfe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cc8:	4b5a      	ldr	r3, [pc, #360]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d116      	bne.n	8005d02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cd8:	e013      	b.n	8005d02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cda:	4b56      	ldr	r3, [pc, #344]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10f      	bne.n	8005d06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ce6:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cf6:	e006      	b.n	8005d06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfc:	e004      	b.n	8005d08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e002      	b.n	8005d08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d02:	bf00      	nop
 8005d04:	e000      	b.n	8005d08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d06:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10d      	bne.n	8005d2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d0e:	4b49      	ldr	r3, [pc, #292]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6819      	ldr	r1, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	430b      	orrs	r3, r1
 8005d24:	4943      	ldr	r1, [pc, #268]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d17c      	bne.n	8005e2a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d30:	4b40      	ldr	r3, [pc, #256]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a3f      	ldr	r2, [pc, #252]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3c:	f7fc faee 	bl	800231c <HAL_GetTick>
 8005d40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d42:	e009      	b.n	8005d58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d44:	f7fc faea 	bl	800231c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d902      	bls.n	8005d58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	73fb      	strb	r3, [r7, #15]
        break;
 8005d56:	e005      	b.n	8005d64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d58:	4b36      	ldr	r3, [pc, #216]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ef      	bne.n	8005d44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d15f      	bne.n	8005e2a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d110      	bne.n	8005d92 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d70:	4b30      	ldr	r3, [pc, #192]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005d78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6892      	ldr	r2, [r2, #8]
 8005d80:	0211      	lsls	r1, r2, #8
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	68d2      	ldr	r2, [r2, #12]
 8005d86:	06d2      	lsls	r2, r2, #27
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	492a      	ldr	r1, [pc, #168]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	610b      	str	r3, [r1, #16]
 8005d90:	e027      	b.n	8005de2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d112      	bne.n	8005dbe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d98:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005da0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6892      	ldr	r2, [r2, #8]
 8005da8:	0211      	lsls	r1, r2, #8
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6912      	ldr	r2, [r2, #16]
 8005dae:	0852      	lsrs	r2, r2, #1
 8005db0:	3a01      	subs	r2, #1
 8005db2:	0552      	lsls	r2, r2, #21
 8005db4:	430a      	orrs	r2, r1
 8005db6:	491f      	ldr	r1, [pc, #124]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	610b      	str	r3, [r1, #16]
 8005dbc:	e011      	b.n	8005de2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dbe:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005dc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6892      	ldr	r2, [r2, #8]
 8005dce:	0211      	lsls	r1, r2, #8
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6952      	ldr	r2, [r2, #20]
 8005dd4:	0852      	lsrs	r2, r2, #1
 8005dd6:	3a01      	subs	r2, #1
 8005dd8:	0652      	lsls	r2, r2, #25
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	4915      	ldr	r1, [pc, #84]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005de2:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a13      	ldr	r2, [pc, #76]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dee:	f7fc fa95 	bl	800231c <HAL_GetTick>
 8005df2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005df4:	e009      	b.n	8005e0a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005df6:	f7fc fa91 	bl	800231c <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d902      	bls.n	8005e0a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	73fb      	strb	r3, [r7, #15]
          break;
 8005e08:	e005      	b.n	8005e16 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0ef      	beq.n	8005df6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	4903      	ldr	r1, [pc, #12]	; (8005e34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40021000 	.word	0x40021000

08005e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e049      	b.n	8005ede <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fc f8c6 	bl	8001ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f000 fb80 	bl	800657c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d001      	beq.n	8005f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e03b      	b.n	8005f78 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <HAL_TIM_Base_Start_IT+0x9c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x4e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2a:	d004      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x4e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <HAL_TIM_Base_Start_IT+0xa0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d115      	bne.n	8005f62 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <HAL_TIM_Base_Start_IT+0xa4>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b06      	cmp	r3, #6
 8005f46:	d015      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x8c>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4e:	d011      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f60:	e008      	b.n	8005f74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e000      	b.n	8005f76 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	00010007 	.word	0x00010007

08005f90 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e049      	b.n	8006036 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f841 	bl	800603e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f000 fad4 	bl	800657c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b02      	cmp	r3, #2
 8006066:	d122      	bne.n	80060ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b02      	cmp	r3, #2
 8006074:	d11b      	bne.n	80060ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0202 	mvn.w	r2, #2
 800607e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fa52 	bl	800653e <HAL_TIM_IC_CaptureCallback>
 800609a:	e005      	b.n	80060a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fa44 	bl	800652a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa55 	bl	8006552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d122      	bne.n	8006102 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d11b      	bne.n	8006102 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f06f 0204 	mvn.w	r2, #4
 80060d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fa28 	bl	800653e <HAL_TIM_IC_CaptureCallback>
 80060ee:	e005      	b.n	80060fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fa1a 	bl	800652a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa2b 	bl	8006552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b08      	cmp	r3, #8
 800610e:	d122      	bne.n	8006156 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0308 	and.w	r3, r3, #8
 800611a:	2b08      	cmp	r3, #8
 800611c:	d11b      	bne.n	8006156 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f06f 0208 	mvn.w	r2, #8
 8006126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2204      	movs	r2, #4
 800612c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f9fe 	bl	800653e <HAL_TIM_IC_CaptureCallback>
 8006142:	e005      	b.n	8006150 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f9f0 	bl	800652a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa01 	bl	8006552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	2b10      	cmp	r3, #16
 8006162:	d122      	bne.n	80061aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0310 	and.w	r3, r3, #16
 800616e:	2b10      	cmp	r3, #16
 8006170:	d11b      	bne.n	80061aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f06f 0210 	mvn.w	r2, #16
 800617a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2208      	movs	r2, #8
 8006180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f9d4 	bl	800653e <HAL_TIM_IC_CaptureCallback>
 8006196:	e005      	b.n	80061a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f9c6 	bl	800652a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9d7 	bl	8006552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d10e      	bne.n	80061d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d107      	bne.n	80061d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f06f 0201 	mvn.w	r2, #1
 80061ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f9a0 	bl	8006516 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e0:	2b80      	cmp	r3, #128	; 0x80
 80061e2:	d10e      	bne.n	8006202 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ee:	2b80      	cmp	r3, #128	; 0x80
 80061f0:	d107      	bne.n	8006202 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fe21 	bl	8006e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006210:	d10e      	bne.n	8006230 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621c:	2b80      	cmp	r3, #128	; 0x80
 800621e:	d107      	bne.n	8006230 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fe14 	bl	8006e58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d10e      	bne.n	800625c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	d107      	bne.n	800625c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f985 	bl	8006566 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b20      	cmp	r3, #32
 8006268:	d10e      	bne.n	8006288 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b20      	cmp	r3, #32
 8006276:	d107      	bne.n	8006288 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0220 	mvn.w	r2, #32
 8006280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fdd4 	bl	8006e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_TIM_OC_ConfigChannel+0x1e>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e066      	b.n	800637c <HAL_TIM_OC_ConfigChannel+0xec>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b14      	cmp	r3, #20
 80062ba:	d857      	bhi.n	800636c <HAL_TIM_OC_ConfigChannel+0xdc>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	08006319 	.word	0x08006319
 80062c8:	0800636d 	.word	0x0800636d
 80062cc:	0800636d 	.word	0x0800636d
 80062d0:	0800636d 	.word	0x0800636d
 80062d4:	08006327 	.word	0x08006327
 80062d8:	0800636d 	.word	0x0800636d
 80062dc:	0800636d 	.word	0x0800636d
 80062e0:	0800636d 	.word	0x0800636d
 80062e4:	08006335 	.word	0x08006335
 80062e8:	0800636d 	.word	0x0800636d
 80062ec:	0800636d 	.word	0x0800636d
 80062f0:	0800636d 	.word	0x0800636d
 80062f4:	08006343 	.word	0x08006343
 80062f8:	0800636d 	.word	0x0800636d
 80062fc:	0800636d 	.word	0x0800636d
 8006300:	0800636d 	.word	0x0800636d
 8006304:	08006351 	.word	0x08006351
 8006308:	0800636d 	.word	0x0800636d
 800630c:	0800636d 	.word	0x0800636d
 8006310:	0800636d 	.word	0x0800636d
 8006314:	0800635f 	.word	0x0800635f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f990 	bl	8006644 <TIM_OC1_SetConfig>
      break;
 8006324:	e025      	b.n	8006372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fa05 	bl	800673c <TIM_OC2_SetConfig>
      break;
 8006332:	e01e      	b.n	8006372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fa78 	bl	8006830 <TIM_OC3_SetConfig>
      break;
 8006340:	e017      	b.n	8006372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fae9 	bl	8006920 <TIM_OC4_SetConfig>
      break;
 800634e:	e010      	b.n	8006372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68b9      	ldr	r1, [r7, #8]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fb40 	bl	80069dc <TIM_OC5_SetConfig>
      break;
 800635c:	e009      	b.n	8006372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fb91 	bl	8006a8c <TIM_OC6_SetConfig>
      break;
 800636a:	e002      	b.n	8006372 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]
      break;
 8006370:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_TIM_ConfigClockSource+0x1c>
 800639c:	2302      	movs	r3, #2
 800639e:	e0b6      	b.n	800650e <HAL_TIM_ConfigClockSource+0x18a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063dc:	d03e      	beq.n	800645c <HAL_TIM_ConfigClockSource+0xd8>
 80063de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e2:	f200 8087 	bhi.w	80064f4 <HAL_TIM_ConfigClockSource+0x170>
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ea:	f000 8086 	beq.w	80064fa <HAL_TIM_ConfigClockSource+0x176>
 80063ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f2:	d87f      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x170>
 80063f4:	2b70      	cmp	r3, #112	; 0x70
 80063f6:	d01a      	beq.n	800642e <HAL_TIM_ConfigClockSource+0xaa>
 80063f8:	2b70      	cmp	r3, #112	; 0x70
 80063fa:	d87b      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x170>
 80063fc:	2b60      	cmp	r3, #96	; 0x60
 80063fe:	d050      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0x11e>
 8006400:	2b60      	cmp	r3, #96	; 0x60
 8006402:	d877      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x170>
 8006404:	2b50      	cmp	r3, #80	; 0x50
 8006406:	d03c      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0xfe>
 8006408:	2b50      	cmp	r3, #80	; 0x50
 800640a:	d873      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x170>
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d058      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0x13e>
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d86f      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x170>
 8006414:	2b30      	cmp	r3, #48	; 0x30
 8006416:	d064      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006418:	2b30      	cmp	r3, #48	; 0x30
 800641a:	d86b      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x170>
 800641c:	2b20      	cmp	r3, #32
 800641e:	d060      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006420:	2b20      	cmp	r3, #32
 8006422:	d867      	bhi.n	80064f4 <HAL_TIM_ConfigClockSource+0x170>
 8006424:	2b00      	cmp	r3, #0
 8006426:	d05c      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006428:	2b10      	cmp	r3, #16
 800642a:	d05a      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x15e>
 800642c:	e062      	b.n	80064f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6899      	ldr	r1, [r3, #8]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f000 fbf9 	bl	8006c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	609a      	str	r2, [r3, #8]
      break;
 800645a:	e04f      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	6899      	ldr	r1, [r3, #8]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f000 fbe2 	bl	8006c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800647e:	609a      	str	r2, [r3, #8]
      break;
 8006480:	e03c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	461a      	mov	r2, r3
 8006490:	f000 fb56 	bl	8006b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2150      	movs	r1, #80	; 0x50
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fbaf 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 80064a0:	e02c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6859      	ldr	r1, [r3, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f000 fb75 	bl	8006b9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2160      	movs	r1, #96	; 0x60
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fb9f 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 80064c0:	e01c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f000 fb36 	bl	8006b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2140      	movs	r1, #64	; 0x40
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fb8f 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 80064e0:	e00c      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f000 fb86 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 80064f2:	e003      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]
      break;
 80064f8:	e000      	b.n	80064fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80064fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a2a      	ldr	r2, [pc, #168]	; (8006638 <TIM_Base_SetConfig+0xbc>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_Base_SetConfig+0x20>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659a:	d108      	bne.n	80065ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a21      	ldr	r2, [pc, #132]	; (8006638 <TIM_Base_SetConfig+0xbc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_Base_SetConfig+0x52>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d007      	beq.n	80065ce <TIM_Base_SetConfig+0x52>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1e      	ldr	r2, [pc, #120]	; (800663c <TIM_Base_SetConfig+0xc0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_Base_SetConfig+0x52>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <TIM_Base_SetConfig+0xc4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d108      	bne.n	80065e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a0c      	ldr	r2, [pc, #48]	; (8006638 <TIM_Base_SetConfig+0xbc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d007      	beq.n	800661c <TIM_Base_SetConfig+0xa0>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a0b      	ldr	r2, [pc, #44]	; (800663c <TIM_Base_SetConfig+0xc0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0xa0>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a0a      	ldr	r2, [pc, #40]	; (8006640 <TIM_Base_SetConfig+0xc4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d103      	bne.n	8006624 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	615a      	str	r2, [r3, #20]
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40012c00 	.word	0x40012c00
 800663c:	40014000 	.word	0x40014000
 8006640:	40014400 	.word	0x40014400

08006644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f023 0201 	bic.w	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f023 0302 	bic.w	r3, r3, #2
 8006690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a24      	ldr	r2, [pc, #144]	; (8006730 <TIM_OC1_SetConfig+0xec>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d007      	beq.n	80066b4 <TIM_OC1_SetConfig+0x70>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a23      	ldr	r2, [pc, #140]	; (8006734 <TIM_OC1_SetConfig+0xf0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_OC1_SetConfig+0x70>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a22      	ldr	r2, [pc, #136]	; (8006738 <TIM_OC1_SetConfig+0xf4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d10c      	bne.n	80066ce <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f023 0308 	bic.w	r3, r3, #8
 80066ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f023 0304 	bic.w	r3, r3, #4
 80066cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a17      	ldr	r2, [pc, #92]	; (8006730 <TIM_OC1_SetConfig+0xec>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d007      	beq.n	80066e6 <TIM_OC1_SetConfig+0xa2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a16      	ldr	r2, [pc, #88]	; (8006734 <TIM_OC1_SetConfig+0xf0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_OC1_SetConfig+0xa2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a15      	ldr	r2, [pc, #84]	; (8006738 <TIM_OC1_SetConfig+0xf4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d111      	bne.n	800670a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40014000 	.word	0x40014000
 8006738:	40014400 	.word	0x40014400

0800673c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f023 0210 	bic.w	r2, r3, #16
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800676a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0320 	bic.w	r3, r3, #32
 800678a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a22      	ldr	r2, [pc, #136]	; (8006824 <TIM_OC2_SetConfig+0xe8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10d      	bne.n	80067bc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a19      	ldr	r2, [pc, #100]	; (8006824 <TIM_OC2_SetConfig+0xe8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d007      	beq.n	80067d4 <TIM_OC2_SetConfig+0x98>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a18      	ldr	r2, [pc, #96]	; (8006828 <TIM_OC2_SetConfig+0xec>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC2_SetConfig+0x98>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a17      	ldr	r2, [pc, #92]	; (800682c <TIM_OC2_SetConfig+0xf0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d113      	bne.n	80067fc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40014000 	.word	0x40014000
 800682c:	40014400 	.word	0x40014400

08006830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800687c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a21      	ldr	r2, [pc, #132]	; (8006914 <TIM_OC3_SetConfig+0xe4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d10d      	bne.n	80068ae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	021b      	lsls	r3, r3, #8
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a18      	ldr	r2, [pc, #96]	; (8006914 <TIM_OC3_SetConfig+0xe4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d007      	beq.n	80068c6 <TIM_OC3_SetConfig+0x96>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a17      	ldr	r2, [pc, #92]	; (8006918 <TIM_OC3_SetConfig+0xe8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d003      	beq.n	80068c6 <TIM_OC3_SetConfig+0x96>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a16      	ldr	r2, [pc, #88]	; (800691c <TIM_OC3_SetConfig+0xec>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d113      	bne.n	80068ee <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	621a      	str	r2, [r3, #32]
}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40014000 	.word	0x40014000
 800691c:	40014400 	.word	0x40014400

08006920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800696e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	031b      	lsls	r3, r3, #12
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a14      	ldr	r2, [pc, #80]	; (80069d0 <TIM_OC4_SetConfig+0xb0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d007      	beq.n	8006994 <TIM_OC4_SetConfig+0x74>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a13      	ldr	r2, [pc, #76]	; (80069d4 <TIM_OC4_SetConfig+0xb4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_OC4_SetConfig+0x74>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a12      	ldr	r2, [pc, #72]	; (80069d8 <TIM_OC4_SetConfig+0xb8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d109      	bne.n	80069a8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	019b      	lsls	r3, r3, #6
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	40012c00 	.word	0x40012c00
 80069d4:	40014000 	.word	0x40014000
 80069d8:	40014400 	.word	0x40014400

080069dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <TIM_OC5_SetConfig+0xa4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d007      	beq.n	8006a46 <TIM_OC5_SetConfig+0x6a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <TIM_OC5_SetConfig+0xa8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d003      	beq.n	8006a46 <TIM_OC5_SetConfig+0x6a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a11      	ldr	r2, [pc, #68]	; (8006a88 <TIM_OC5_SetConfig+0xac>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d109      	bne.n	8006a5a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	621a      	str	r2, [r3, #32]
}
 8006a74:	bf00      	nop
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40014000 	.word	0x40014000
 8006a88:	40014400 	.word	0x40014400

08006a8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	051b      	lsls	r3, r3, #20
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a14      	ldr	r2, [pc, #80]	; (8006b34 <TIM_OC6_SetConfig+0xa8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d007      	beq.n	8006af8 <TIM_OC6_SetConfig+0x6c>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a13      	ldr	r2, [pc, #76]	; (8006b38 <TIM_OC6_SetConfig+0xac>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_OC6_SetConfig+0x6c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a12      	ldr	r2, [pc, #72]	; (8006b3c <TIM_OC6_SetConfig+0xb0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d109      	bne.n	8006b0c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006afe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	029b      	lsls	r3, r3, #10
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	40014000 	.word	0x40014000
 8006b3c:	40014400 	.word	0x40014400

08006b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0201 	bic.w	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f023 030a 	bic.w	r3, r3, #10
 8006b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b087      	sub	sp, #28
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f023 0210 	bic.w	r2, r3, #16
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	031b      	lsls	r3, r3, #12
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f043 0307 	orr.w	r3, r3, #7
 8006c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	609a      	str	r2, [r3, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	021a      	lsls	r2, r3, #8
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	431a      	orrs	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	609a      	str	r2, [r3, #8]
}
 8006c68:	bf00      	nop
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e04f      	b.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a21      	ldr	r2, [pc, #132]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d108      	bne.n	8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a14      	ldr	r2, [pc, #80]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf4:	d004      	beq.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a10      	ldr	r2, [pc, #64]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d10c      	bne.n	8006d1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	40012c00 	.word	0x40012c00
 8006d3c:	40014000 	.word	0x40014000

08006d40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e060      	b.n	8006e1e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	041b      	lsls	r3, r3, #16
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d115      	bne.n	8006e0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	051b      	lsls	r3, r3, #20
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40012c00 	.word	0x40012c00

08006e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e040      	b.n	8006f00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d106      	bne.n	8006e94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fb f952 	bl	8002138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2224      	movs	r2, #36	; 0x24
 8006e98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0201 	bic.w	r2, r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fbc2 	bl	8007634 <UART_SetConfig>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e022      	b.n	8006f00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fe10 	bl	8007ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fe97 	bl	8007c2c <UART_CheckIdleState>
 8006efe:	4603      	mov	r3, r0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	; 0x28
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	f040 8082 	bne.w	8007026 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <HAL_UART_Transmit+0x26>
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e07a      	b.n	8007028 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_UART_Transmit+0x38>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e073      	b.n	8007028 <HAL_UART_Transmit+0x120>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2221      	movs	r2, #33	; 0x21
 8006f54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f56:	f7fb f9e1 	bl	800231c <HAL_GetTick>
 8006f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	88fa      	ldrh	r2, [r7, #6]
 8006f60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f74:	d108      	bne.n	8006f88 <HAL_UART_Transmit+0x80>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	e003      	b.n	8006f90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006f98:	e02d      	b.n	8006ff6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2180      	movs	r1, #128	; 0x80
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fe8a 	bl	8007cbe <UART_WaitOnFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e039      	b.n	8007028 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10b      	bne.n	8006fd2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	881a      	ldrh	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fc6:	b292      	uxth	r2, r2
 8006fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	3302      	adds	r3, #2
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	e008      	b.n	8006fe4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	b292      	uxth	r2, r2
 8006fdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	3b01      	subs	r3, #1
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1cb      	bne.n	8006f9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2200      	movs	r2, #0
 800700a:	2140      	movs	r1, #64	; 0x40
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fe56 	bl	8007cbe <UART_WaitOnFlagUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e005      	b.n	8007028 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e000      	b.n	8007028 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007026:	2302      	movs	r3, #2
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b0ba      	sub	sp, #232	; 0xe8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007056:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800705a:	f640 030f 	movw	r3, #2063	; 0x80f
 800705e:	4013      	ands	r3, r2
 8007060:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007064:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d115      	bne.n	8007098 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800706c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00f      	beq.n	8007098 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d009      	beq.n	8007098 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 82a6 	beq.w	80075da <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	4798      	blx	r3
      }
      return;
 8007096:	e2a0      	b.n	80075da <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8117 	beq.w	80072d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070b2:	4b85      	ldr	r3, [pc, #532]	; (80072c8 <HAL_UART_IRQHandler+0x298>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 810a 	beq.w	80072d0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d011      	beq.n	80070ec <HAL_UART_IRQHandler+0xbc>
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2201      	movs	r2, #1
 80070da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e2:	f043 0201 	orr.w	r2, r3, #1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d011      	beq.n	800711c <HAL_UART_IRQHandler+0xec>
 80070f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2202      	movs	r2, #2
 800710a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007112:	f043 0204 	orr.w	r2, r3, #4
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800711c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d011      	beq.n	800714c <HAL_UART_IRQHandler+0x11c>
 8007128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00b      	beq.n	800714c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2204      	movs	r2, #4
 800713a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007142:	f043 0202 	orr.w	r2, r3, #2
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800714c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d017      	beq.n	8007188 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d105      	bne.n	8007170 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007168:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2208      	movs	r2, #8
 8007176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800717e:	f043 0208 	orr.w	r2, r3, #8
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007190:	2b00      	cmp	r3, #0
 8007192:	d012      	beq.n	80071ba <HAL_UART_IRQHandler+0x18a>
 8007194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00c      	beq.n	80071ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071b0:	f043 0220 	orr.w	r2, r3, #32
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 820c 	beq.w	80075de <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00d      	beq.n	80071ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d005      	beq.n	8007212 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800720a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800720e:	2b00      	cmp	r3, #0
 8007210:	d04f      	beq.n	80072b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fe17 	bl	8007e46 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d141      	bne.n	80072aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007234:	e853 3f00 	ldrex	r3, [r3]
 8007238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800723c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3308      	adds	r3, #8
 800724e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007252:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800725e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800726a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1d9      	bne.n	8007226 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007276:	2b00      	cmp	r3, #0
 8007278:	d013      	beq.n	80072a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	4a13      	ldr	r2, [pc, #76]	; (80072cc <HAL_UART_IRQHandler+0x29c>)
 8007280:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	4618      	mov	r0, r3
 8007288:	f7fc fb82 	bl	8003990 <HAL_DMA_Abort_IT>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d017      	beq.n	80072c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a0:	e00f      	b.n	80072c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9b0 	bl	8007608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	e00b      	b.n	80072c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f9ac 	bl	8007608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b0:	e007      	b.n	80072c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f9a8 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80072c0:	e18d      	b.n	80075de <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c2:	bf00      	nop
    return;
 80072c4:	e18b      	b.n	80075de <HAL_UART_IRQHandler+0x5ae>
 80072c6:	bf00      	nop
 80072c8:	04000120 	.word	0x04000120
 80072cc:	08007f0d 	.word	0x08007f0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	f040 8146 	bne.w	8007566 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072de:	f003 0310 	and.w	r3, r3, #16
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 813f 	beq.w	8007566 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 8138 	beq.w	8007566 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2210      	movs	r2, #16
 80072fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	f040 80b4 	bne.w	8007476 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800731a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 815f 	beq.w	80075e2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800732a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800732e:	429a      	cmp	r2, r3
 8007330:	f080 8157 	bcs.w	80075e2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800733a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b00      	cmp	r3, #0
 800734c:	f040 8085 	bne.w	800745a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007364:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800736c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800737a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800737e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007386:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1da      	bne.n	8007350 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3308      	adds	r3, #8
 80073a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3308      	adds	r3, #8
 80073ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e1      	bne.n	800739a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3308      	adds	r3, #8
 80073dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3308      	adds	r3, #8
 80073f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007400:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e3      	bne.n	80073d6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800742a:	f023 0310 	bic.w	r3, r3, #16
 800742e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800743c:	65bb      	str	r3, [r7, #88]	; 0x58
 800743e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800744a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e4      	bne.n	800741a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007454:	4618      	mov	r0, r3
 8007456:	f7fc fa5d 	bl	8003914 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007466:	b29b      	uxth	r3, r3
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	b29b      	uxth	r3, r3
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f8d4 	bl	800761c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007474:	e0b5      	b.n	80075e2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007482:	b29b      	uxth	r3, r3
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80a7 	beq.w	80075e6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80a2 	beq.w	80075e6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074c4:	647b      	str	r3, [r7, #68]	; 0x44
 80074c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e4      	bne.n	80074a2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3308      	adds	r3, #8
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	623b      	str	r3, [r7, #32]
   return(result);
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	f023 0301 	bic.w	r3, r3, #1
 80074ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3308      	adds	r3, #8
 80074f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074fc:	633a      	str	r2, [r7, #48]	; 0x30
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e3      	bne.n	80074d8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2220      	movs	r2, #32
 8007514:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0310 	bic.w	r3, r3, #16
 8007536:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007544:	61fb      	str	r3, [r7, #28]
 8007546:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	69b9      	ldr	r1, [r7, #24]
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	617b      	str	r3, [r7, #20]
   return(result);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e4      	bne.n	8007522 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f85c 	bl	800761c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007564:	e03f      	b.n	80075e6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00e      	beq.n	8007590 <HAL_UART_IRQHandler+0x560>
 8007572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007586:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fcff 	bl	8007f8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800758e:	e02d      	b.n	80075ec <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00e      	beq.n	80075ba <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800759c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d008      	beq.n	80075ba <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01c      	beq.n	80075ea <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
    }
    return;
 80075b8:	e017      	b.n	80075ea <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d012      	beq.n	80075ec <HAL_UART_IRQHandler+0x5bc>
 80075c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00c      	beq.n	80075ec <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fcb0 	bl	8007f38 <UART_EndTransmit_IT>
    return;
 80075d8:	e008      	b.n	80075ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80075da:	bf00      	nop
 80075dc:	e006      	b.n	80075ec <HAL_UART_IRQHandler+0x5bc>
    return;
 80075de:	bf00      	nop
 80075e0:	e004      	b.n	80075ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80075e2:	bf00      	nop
 80075e4:	e002      	b.n	80075ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <HAL_UART_IRQHandler+0x5bc>
    return;
 80075ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80075ec:	37e8      	adds	r7, #232	; 0xe8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop

080075f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007638:	b08a      	sub	sp, #40	; 0x28
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	431a      	orrs	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	431a      	orrs	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	4313      	orrs	r3, r2
 800765a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b9e      	ldr	r3, [pc, #632]	; (80078dc <UART_SetConfig+0x2a8>)
 8007664:	4013      	ands	r3, r2
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800766c:	430b      	orrs	r3, r1
 800766e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a93      	ldr	r2, [pc, #588]	; (80078e0 <UART_SetConfig+0x2ac>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d004      	beq.n	80076a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769c:	4313      	orrs	r3, r2
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b0:	430a      	orrs	r2, r1
 80076b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a8a      	ldr	r2, [pc, #552]	; (80078e4 <UART_SetConfig+0x2b0>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d126      	bne.n	800770c <UART_SetConfig+0xd8>
 80076be:	4b8a      	ldr	r3, [pc, #552]	; (80078e8 <UART_SetConfig+0x2b4>)
 80076c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c4:	f003 0303 	and.w	r3, r3, #3
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d81b      	bhi.n	8007704 <UART_SetConfig+0xd0>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <UART_SetConfig+0xa0>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076e5 	.word	0x080076e5
 80076d8:	080076f5 	.word	0x080076f5
 80076dc:	080076ed 	.word	0x080076ed
 80076e0:	080076fd 	.word	0x080076fd
 80076e4:	2301      	movs	r3, #1
 80076e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ea:	e0ab      	b.n	8007844 <UART_SetConfig+0x210>
 80076ec:	2302      	movs	r3, #2
 80076ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076f2:	e0a7      	b.n	8007844 <UART_SetConfig+0x210>
 80076f4:	2304      	movs	r3, #4
 80076f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fa:	e0a3      	b.n	8007844 <UART_SetConfig+0x210>
 80076fc:	2308      	movs	r3, #8
 80076fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007702:	e09f      	b.n	8007844 <UART_SetConfig+0x210>
 8007704:	2310      	movs	r3, #16
 8007706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770a:	e09b      	b.n	8007844 <UART_SetConfig+0x210>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a76      	ldr	r2, [pc, #472]	; (80078ec <UART_SetConfig+0x2b8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d138      	bne.n	8007788 <UART_SetConfig+0x154>
 8007716:	4b74      	ldr	r3, [pc, #464]	; (80078e8 <UART_SetConfig+0x2b4>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f003 030c 	and.w	r3, r3, #12
 8007720:	2b0c      	cmp	r3, #12
 8007722:	d82d      	bhi.n	8007780 <UART_SetConfig+0x14c>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <UART_SetConfig+0xf8>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	08007761 	.word	0x08007761
 8007730:	08007781 	.word	0x08007781
 8007734:	08007781 	.word	0x08007781
 8007738:	08007781 	.word	0x08007781
 800773c:	08007771 	.word	0x08007771
 8007740:	08007781 	.word	0x08007781
 8007744:	08007781 	.word	0x08007781
 8007748:	08007781 	.word	0x08007781
 800774c:	08007769 	.word	0x08007769
 8007750:	08007781 	.word	0x08007781
 8007754:	08007781 	.word	0x08007781
 8007758:	08007781 	.word	0x08007781
 800775c:	08007779 	.word	0x08007779
 8007760:	2300      	movs	r3, #0
 8007762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007766:	e06d      	b.n	8007844 <UART_SetConfig+0x210>
 8007768:	2302      	movs	r3, #2
 800776a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800776e:	e069      	b.n	8007844 <UART_SetConfig+0x210>
 8007770:	2304      	movs	r3, #4
 8007772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007776:	e065      	b.n	8007844 <UART_SetConfig+0x210>
 8007778:	2308      	movs	r3, #8
 800777a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800777e:	e061      	b.n	8007844 <UART_SetConfig+0x210>
 8007780:	2310      	movs	r3, #16
 8007782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007786:	e05d      	b.n	8007844 <UART_SetConfig+0x210>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a58      	ldr	r2, [pc, #352]	; (80078f0 <UART_SetConfig+0x2bc>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d125      	bne.n	80077de <UART_SetConfig+0x1aa>
 8007792:	4b55      	ldr	r3, [pc, #340]	; (80078e8 <UART_SetConfig+0x2b4>)
 8007794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007798:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800779c:	2b30      	cmp	r3, #48	; 0x30
 800779e:	d016      	beq.n	80077ce <UART_SetConfig+0x19a>
 80077a0:	2b30      	cmp	r3, #48	; 0x30
 80077a2:	d818      	bhi.n	80077d6 <UART_SetConfig+0x1a2>
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d00a      	beq.n	80077be <UART_SetConfig+0x18a>
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d814      	bhi.n	80077d6 <UART_SetConfig+0x1a2>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <UART_SetConfig+0x182>
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d008      	beq.n	80077c6 <UART_SetConfig+0x192>
 80077b4:	e00f      	b.n	80077d6 <UART_SetConfig+0x1a2>
 80077b6:	2300      	movs	r3, #0
 80077b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077bc:	e042      	b.n	8007844 <UART_SetConfig+0x210>
 80077be:	2302      	movs	r3, #2
 80077c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c4:	e03e      	b.n	8007844 <UART_SetConfig+0x210>
 80077c6:	2304      	movs	r3, #4
 80077c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077cc:	e03a      	b.n	8007844 <UART_SetConfig+0x210>
 80077ce:	2308      	movs	r3, #8
 80077d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d4:	e036      	b.n	8007844 <UART_SetConfig+0x210>
 80077d6:	2310      	movs	r3, #16
 80077d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077dc:	e032      	b.n	8007844 <UART_SetConfig+0x210>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a3f      	ldr	r2, [pc, #252]	; (80078e0 <UART_SetConfig+0x2ac>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d12a      	bne.n	800783e <UART_SetConfig+0x20a>
 80077e8:	4b3f      	ldr	r3, [pc, #252]	; (80078e8 <UART_SetConfig+0x2b4>)
 80077ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077f6:	d01a      	beq.n	800782e <UART_SetConfig+0x1fa>
 80077f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077fc:	d81b      	bhi.n	8007836 <UART_SetConfig+0x202>
 80077fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007802:	d00c      	beq.n	800781e <UART_SetConfig+0x1ea>
 8007804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007808:	d815      	bhi.n	8007836 <UART_SetConfig+0x202>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <UART_SetConfig+0x1e2>
 800780e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007812:	d008      	beq.n	8007826 <UART_SetConfig+0x1f2>
 8007814:	e00f      	b.n	8007836 <UART_SetConfig+0x202>
 8007816:	2300      	movs	r3, #0
 8007818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781c:	e012      	b.n	8007844 <UART_SetConfig+0x210>
 800781e:	2302      	movs	r3, #2
 8007820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007824:	e00e      	b.n	8007844 <UART_SetConfig+0x210>
 8007826:	2304      	movs	r3, #4
 8007828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782c:	e00a      	b.n	8007844 <UART_SetConfig+0x210>
 800782e:	2308      	movs	r3, #8
 8007830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007834:	e006      	b.n	8007844 <UART_SetConfig+0x210>
 8007836:	2310      	movs	r3, #16
 8007838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800783c:	e002      	b.n	8007844 <UART_SetConfig+0x210>
 800783e:	2310      	movs	r3, #16
 8007840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a25      	ldr	r2, [pc, #148]	; (80078e0 <UART_SetConfig+0x2ac>)
 800784a:	4293      	cmp	r3, r2
 800784c:	f040 808a 	bne.w	8007964 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007854:	2b08      	cmp	r3, #8
 8007856:	d824      	bhi.n	80078a2 <UART_SetConfig+0x26e>
 8007858:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0x22c>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007885 	.word	0x08007885
 8007864:	080078a3 	.word	0x080078a3
 8007868:	0800788d 	.word	0x0800788d
 800786c:	080078a3 	.word	0x080078a3
 8007870:	08007893 	.word	0x08007893
 8007874:	080078a3 	.word	0x080078a3
 8007878:	080078a3 	.word	0x080078a3
 800787c:	080078a3 	.word	0x080078a3
 8007880:	0800789b 	.word	0x0800789b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007884:	f7fd ff42 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8007888:	61f8      	str	r0, [r7, #28]
        break;
 800788a:	e010      	b.n	80078ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800788c:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <UART_SetConfig+0x2c0>)
 800788e:	61fb      	str	r3, [r7, #28]
        break;
 8007890:	e00d      	b.n	80078ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007892:	f7fd fea3 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8007896:	61f8      	str	r0, [r7, #28]
        break;
 8007898:	e009      	b.n	80078ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800789e:	61fb      	str	r3, [r7, #28]
        break;
 80078a0:	e005      	b.n	80078ae <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80078ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8109 	beq.w	8007ac8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	4613      	mov	r3, r2
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	4413      	add	r3, r2
 80078c0:	69fa      	ldr	r2, [r7, #28]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d305      	bcc.n	80078d2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d912      	bls.n	80078f8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078d8:	e0f6      	b.n	8007ac8 <UART_SetConfig+0x494>
 80078da:	bf00      	nop
 80078dc:	efff69f3 	.word	0xefff69f3
 80078e0:	40008000 	.word	0x40008000
 80078e4:	40013800 	.word	0x40013800
 80078e8:	40021000 	.word	0x40021000
 80078ec:	40004400 	.word	0x40004400
 80078f0:	40004800 	.word	0x40004800
 80078f4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	2200      	movs	r2, #0
 80078fc:	461c      	mov	r4, r3
 80078fe:	4615      	mov	r5, r2
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	022b      	lsls	r3, r5, #8
 800790a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800790e:	0222      	lsls	r2, r4, #8
 8007910:	68f9      	ldr	r1, [r7, #12]
 8007912:	6849      	ldr	r1, [r1, #4]
 8007914:	0849      	lsrs	r1, r1, #1
 8007916:	2000      	movs	r0, #0
 8007918:	4688      	mov	r8, r1
 800791a:	4681      	mov	r9, r0
 800791c:	eb12 0a08 	adds.w	sl, r2, r8
 8007920:	eb43 0b09 	adc.w	fp, r3, r9
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007932:	4650      	mov	r0, sl
 8007934:	4659      	mov	r1, fp
 8007936:	f7f9 f987 	bl	8000c48 <__aeabi_uldivmod>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4613      	mov	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007948:	d308      	bcc.n	800795c <UART_SetConfig+0x328>
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007950:	d204      	bcs.n	800795c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	60da      	str	r2, [r3, #12]
 800795a:	e0b5      	b.n	8007ac8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007962:	e0b1      	b.n	8007ac8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800796c:	d15d      	bne.n	8007a2a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800796e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007972:	2b08      	cmp	r3, #8
 8007974:	d827      	bhi.n	80079c6 <UART_SetConfig+0x392>
 8007976:	a201      	add	r2, pc, #4	; (adr r2, 800797c <UART_SetConfig+0x348>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	080079a1 	.word	0x080079a1
 8007980:	080079a9 	.word	0x080079a9
 8007984:	080079b1 	.word	0x080079b1
 8007988:	080079c7 	.word	0x080079c7
 800798c:	080079b7 	.word	0x080079b7
 8007990:	080079c7 	.word	0x080079c7
 8007994:	080079c7 	.word	0x080079c7
 8007998:	080079c7 	.word	0x080079c7
 800799c:	080079bf 	.word	0x080079bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079a0:	f7fd feb4 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 80079a4:	61f8      	str	r0, [r7, #28]
        break;
 80079a6:	e014      	b.n	80079d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079a8:	f7fd fec6 	bl	8005738 <HAL_RCC_GetPCLK2Freq>
 80079ac:	61f8      	str	r0, [r7, #28]
        break;
 80079ae:	e010      	b.n	80079d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079b0:	4b4c      	ldr	r3, [pc, #304]	; (8007ae4 <UART_SetConfig+0x4b0>)
 80079b2:	61fb      	str	r3, [r7, #28]
        break;
 80079b4:	e00d      	b.n	80079d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079b6:	f7fd fe11 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 80079ba:	61f8      	str	r0, [r7, #28]
        break;
 80079bc:	e009      	b.n	80079d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079c2:	61fb      	str	r3, [r7, #28]
        break;
 80079c4:	e005      	b.n	80079d2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d077      	beq.n	8007ac8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	005a      	lsls	r2, r3, #1
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	085b      	lsrs	r3, r3, #1
 80079e2:	441a      	add	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	2b0f      	cmp	r3, #15
 80079f2:	d916      	bls.n	8007a22 <UART_SetConfig+0x3ee>
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079fa:	d212      	bcs.n	8007a22 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f023 030f 	bic.w	r3, r3, #15
 8007a04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	085b      	lsrs	r3, r3, #1
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	8afb      	ldrh	r3, [r7, #22]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	8afa      	ldrh	r2, [r7, #22]
 8007a1e:	60da      	str	r2, [r3, #12]
 8007a20:	e052      	b.n	8007ac8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a28:	e04e      	b.n	8007ac8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a2e:	2b08      	cmp	r3, #8
 8007a30:	d827      	bhi.n	8007a82 <UART_SetConfig+0x44e>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <UART_SetConfig+0x404>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a5d 	.word	0x08007a5d
 8007a3c:	08007a65 	.word	0x08007a65
 8007a40:	08007a6d 	.word	0x08007a6d
 8007a44:	08007a83 	.word	0x08007a83
 8007a48:	08007a73 	.word	0x08007a73
 8007a4c:	08007a83 	.word	0x08007a83
 8007a50:	08007a83 	.word	0x08007a83
 8007a54:	08007a83 	.word	0x08007a83
 8007a58:	08007a7b 	.word	0x08007a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a5c:	f7fd fe56 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8007a60:	61f8      	str	r0, [r7, #28]
        break;
 8007a62:	e014      	b.n	8007a8e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a64:	f7fd fe68 	bl	8005738 <HAL_RCC_GetPCLK2Freq>
 8007a68:	61f8      	str	r0, [r7, #28]
        break;
 8007a6a:	e010      	b.n	8007a8e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a6c:	4b1d      	ldr	r3, [pc, #116]	; (8007ae4 <UART_SetConfig+0x4b0>)
 8007a6e:	61fb      	str	r3, [r7, #28]
        break;
 8007a70:	e00d      	b.n	8007a8e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a72:	f7fd fdb3 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8007a76:	61f8      	str	r0, [r7, #28]
        break;
 8007a78:	e009      	b.n	8007a8e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a7e:	61fb      	str	r3, [r7, #28]
        break;
 8007a80:	e005      	b.n	8007a8e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a8c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d019      	beq.n	8007ac8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	085a      	lsrs	r2, r3, #1
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	441a      	add	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	2b0f      	cmp	r3, #15
 8007aac:	d909      	bls.n	8007ac2 <UART_SetConfig+0x48e>
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab4:	d205      	bcs.n	8007ac2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60da      	str	r2, [r3, #12]
 8007ac0:	e002      	b.n	8007ac8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007ad4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3728      	adds	r7, #40	; 0x28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ae2:	bf00      	nop
 8007ae4:	00f42400 	.word	0x00f42400

08007ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00a      	beq.n	8007b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	f003 0310 	and.w	r3, r3, #16
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	f003 0320 	and.w	r3, r3, #32
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01a      	beq.n	8007bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007be6:	d10a      	bne.n	8007bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	605a      	str	r2, [r3, #4]
  }
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c3c:	f7fa fb6e 	bl	800231c <HAL_GetTick>
 8007c40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d10e      	bne.n	8007c6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f82d 	bl	8007cbe <UART_WaitOnFlagUntilTimeout>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e023      	b.n	8007cb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d10e      	bne.n	8007c9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f817 	bl	8007cbe <UART_WaitOnFlagUntilTimeout>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e00d      	b.n	8007cb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b09c      	sub	sp, #112	; 0x70
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	603b      	str	r3, [r7, #0]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cce:	e0a5      	b.n	8007e1c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd6:	f000 80a1 	beq.w	8007e1c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cda:	f7fa fb1f 	bl	800231c <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d302      	bcc.n	8007cf0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d13e      	bne.n	8007d6e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d04:	667b      	str	r3, [r7, #100]	; 0x64
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e6      	bne.n	8007cf0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3308      	adds	r3, #8
 8007d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	f023 0301 	bic.w	r3, r3, #1
 8007d38:	663b      	str	r3, [r7, #96]	; 0x60
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d42:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e5      	bne.n	8007d22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e067      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d04f      	beq.n	8007e1c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d8a:	d147      	bne.n	8007e1c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d94:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007daa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	461a      	mov	r2, r3
 8007db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
 8007db6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e6      	bne.n	8007d96 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3308      	adds	r3, #8
 8007dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f023 0301 	bic.w	r3, r3, #1
 8007dde:	66bb      	str	r3, [r7, #104]	; 0x68
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3308      	adds	r3, #8
 8007de6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007de8:	623a      	str	r2, [r7, #32]
 8007dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	69f9      	ldr	r1, [r7, #28]
 8007dee:	6a3a      	ldr	r2, [r7, #32]
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e5      	bne.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e010      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	69da      	ldr	r2, [r3, #28]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	4013      	ands	r3, r2
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	461a      	mov	r2, r3
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	f43f af4a 	beq.w	8007cd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3770      	adds	r7, #112	; 0x70
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b095      	sub	sp, #84	; 0x54
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e6      	bne.n	8007e4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3308      	adds	r3, #8
 8007e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	f023 0301 	bic.w	r3, r3, #1
 8007e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3308      	adds	r3, #8
 8007e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ea0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e5      	bne.n	8007e80 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d118      	bne.n	8007eee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f023 0310 	bic.w	r3, r3, #16
 8007ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6979      	ldr	r1, [r7, #20]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e6      	bne.n	8007ebc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007f00:	bf00      	nop
 8007f02:	3754      	adds	r7, #84	; 0x54
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f7ff fb6c 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f30:	bf00      	nop
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	61bb      	str	r3, [r7, #24]
 8007f60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6979      	ldr	r1, [r7, #20]
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e6      	bne.n	8007f40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7ff fb38 	bl	80075f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f84:	bf00      	nop
 8007f86:	3720      	adds	r7, #32
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <__errno>:
 8007fa0:	4b01      	ldr	r3, [pc, #4]	; (8007fa8 <__errno+0x8>)
 8007fa2:	6818      	ldr	r0, [r3, #0]
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	2000000c 	.word	0x2000000c

08007fac <__libc_init_array>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	4d0d      	ldr	r5, [pc, #52]	; (8007fe4 <__libc_init_array+0x38>)
 8007fb0:	4c0d      	ldr	r4, [pc, #52]	; (8007fe8 <__libc_init_array+0x3c>)
 8007fb2:	1b64      	subs	r4, r4, r5
 8007fb4:	10a4      	asrs	r4, r4, #2
 8007fb6:	2600      	movs	r6, #0
 8007fb8:	42a6      	cmp	r6, r4
 8007fba:	d109      	bne.n	8007fd0 <__libc_init_array+0x24>
 8007fbc:	4d0b      	ldr	r5, [pc, #44]	; (8007fec <__libc_init_array+0x40>)
 8007fbe:	4c0c      	ldr	r4, [pc, #48]	; (8007ff0 <__libc_init_array+0x44>)
 8007fc0:	f003 f916 	bl	800b1f0 <_init>
 8007fc4:	1b64      	subs	r4, r4, r5
 8007fc6:	10a4      	asrs	r4, r4, #2
 8007fc8:	2600      	movs	r6, #0
 8007fca:	42a6      	cmp	r6, r4
 8007fcc:	d105      	bne.n	8007fda <__libc_init_array+0x2e>
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd4:	4798      	blx	r3
 8007fd6:	3601      	adds	r6, #1
 8007fd8:	e7ee      	b.n	8007fb8 <__libc_init_array+0xc>
 8007fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fde:	4798      	blx	r3
 8007fe0:	3601      	adds	r6, #1
 8007fe2:	e7f2      	b.n	8007fca <__libc_init_array+0x1e>
 8007fe4:	0800b704 	.word	0x0800b704
 8007fe8:	0800b704 	.word	0x0800b704
 8007fec:	0800b704 	.word	0x0800b704
 8007ff0:	0800b708 	.word	0x0800b708

08007ff4 <memcpy>:
 8007ff4:	440a      	add	r2, r1
 8007ff6:	4291      	cmp	r1, r2
 8007ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ffc:	d100      	bne.n	8008000 <memcpy+0xc>
 8007ffe:	4770      	bx	lr
 8008000:	b510      	push	{r4, lr}
 8008002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800800a:	4291      	cmp	r1, r2
 800800c:	d1f9      	bne.n	8008002 <memcpy+0xe>
 800800e:	bd10      	pop	{r4, pc}

08008010 <memset>:
 8008010:	4402      	add	r2, r0
 8008012:	4603      	mov	r3, r0
 8008014:	4293      	cmp	r3, r2
 8008016:	d100      	bne.n	800801a <memset+0xa>
 8008018:	4770      	bx	lr
 800801a:	f803 1b01 	strb.w	r1, [r3], #1
 800801e:	e7f9      	b.n	8008014 <memset+0x4>

08008020 <__cvt>:
 8008020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008024:	ec55 4b10 	vmov	r4, r5, d0
 8008028:	2d00      	cmp	r5, #0
 800802a:	460e      	mov	r6, r1
 800802c:	4619      	mov	r1, r3
 800802e:	462b      	mov	r3, r5
 8008030:	bfbb      	ittet	lt
 8008032:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008036:	461d      	movlt	r5, r3
 8008038:	2300      	movge	r3, #0
 800803a:	232d      	movlt	r3, #45	; 0x2d
 800803c:	700b      	strb	r3, [r1, #0]
 800803e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008040:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008044:	4691      	mov	r9, r2
 8008046:	f023 0820 	bic.w	r8, r3, #32
 800804a:	bfbc      	itt	lt
 800804c:	4622      	movlt	r2, r4
 800804e:	4614      	movlt	r4, r2
 8008050:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008054:	d005      	beq.n	8008062 <__cvt+0x42>
 8008056:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800805a:	d100      	bne.n	800805e <__cvt+0x3e>
 800805c:	3601      	adds	r6, #1
 800805e:	2102      	movs	r1, #2
 8008060:	e000      	b.n	8008064 <__cvt+0x44>
 8008062:	2103      	movs	r1, #3
 8008064:	ab03      	add	r3, sp, #12
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	ab02      	add	r3, sp, #8
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	ec45 4b10 	vmov	d0, r4, r5
 8008070:	4653      	mov	r3, sl
 8008072:	4632      	mov	r2, r6
 8008074:	f000 fe20 	bl	8008cb8 <_dtoa_r>
 8008078:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800807c:	4607      	mov	r7, r0
 800807e:	d102      	bne.n	8008086 <__cvt+0x66>
 8008080:	f019 0f01 	tst.w	r9, #1
 8008084:	d022      	beq.n	80080cc <__cvt+0xac>
 8008086:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800808a:	eb07 0906 	add.w	r9, r7, r6
 800808e:	d110      	bne.n	80080b2 <__cvt+0x92>
 8008090:	783b      	ldrb	r3, [r7, #0]
 8008092:	2b30      	cmp	r3, #48	; 0x30
 8008094:	d10a      	bne.n	80080ac <__cvt+0x8c>
 8008096:	2200      	movs	r2, #0
 8008098:	2300      	movs	r3, #0
 800809a:	4620      	mov	r0, r4
 800809c:	4629      	mov	r1, r5
 800809e:	f7f8 fd13 	bl	8000ac8 <__aeabi_dcmpeq>
 80080a2:	b918      	cbnz	r0, 80080ac <__cvt+0x8c>
 80080a4:	f1c6 0601 	rsb	r6, r6, #1
 80080a8:	f8ca 6000 	str.w	r6, [sl]
 80080ac:	f8da 3000 	ldr.w	r3, [sl]
 80080b0:	4499      	add	r9, r3
 80080b2:	2200      	movs	r2, #0
 80080b4:	2300      	movs	r3, #0
 80080b6:	4620      	mov	r0, r4
 80080b8:	4629      	mov	r1, r5
 80080ba:	f7f8 fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 80080be:	b108      	cbz	r0, 80080c4 <__cvt+0xa4>
 80080c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80080c4:	2230      	movs	r2, #48	; 0x30
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	454b      	cmp	r3, r9
 80080ca:	d307      	bcc.n	80080dc <__cvt+0xbc>
 80080cc:	9b03      	ldr	r3, [sp, #12]
 80080ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080d0:	1bdb      	subs	r3, r3, r7
 80080d2:	4638      	mov	r0, r7
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	b004      	add	sp, #16
 80080d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080dc:	1c59      	adds	r1, r3, #1
 80080de:	9103      	str	r1, [sp, #12]
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	e7f0      	b.n	80080c6 <__cvt+0xa6>

080080e4 <__exponent>:
 80080e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080e6:	4603      	mov	r3, r0
 80080e8:	2900      	cmp	r1, #0
 80080ea:	bfb8      	it	lt
 80080ec:	4249      	neglt	r1, r1
 80080ee:	f803 2b02 	strb.w	r2, [r3], #2
 80080f2:	bfb4      	ite	lt
 80080f4:	222d      	movlt	r2, #45	; 0x2d
 80080f6:	222b      	movge	r2, #43	; 0x2b
 80080f8:	2909      	cmp	r1, #9
 80080fa:	7042      	strb	r2, [r0, #1]
 80080fc:	dd2a      	ble.n	8008154 <__exponent+0x70>
 80080fe:	f10d 0407 	add.w	r4, sp, #7
 8008102:	46a4      	mov	ip, r4
 8008104:	270a      	movs	r7, #10
 8008106:	46a6      	mov	lr, r4
 8008108:	460a      	mov	r2, r1
 800810a:	fb91 f6f7 	sdiv	r6, r1, r7
 800810e:	fb07 1516 	mls	r5, r7, r6, r1
 8008112:	3530      	adds	r5, #48	; 0x30
 8008114:	2a63      	cmp	r2, #99	; 0x63
 8008116:	f104 34ff 	add.w	r4, r4, #4294967295
 800811a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800811e:	4631      	mov	r1, r6
 8008120:	dcf1      	bgt.n	8008106 <__exponent+0x22>
 8008122:	3130      	adds	r1, #48	; 0x30
 8008124:	f1ae 0502 	sub.w	r5, lr, #2
 8008128:	f804 1c01 	strb.w	r1, [r4, #-1]
 800812c:	1c44      	adds	r4, r0, #1
 800812e:	4629      	mov	r1, r5
 8008130:	4561      	cmp	r1, ip
 8008132:	d30a      	bcc.n	800814a <__exponent+0x66>
 8008134:	f10d 0209 	add.w	r2, sp, #9
 8008138:	eba2 020e 	sub.w	r2, r2, lr
 800813c:	4565      	cmp	r5, ip
 800813e:	bf88      	it	hi
 8008140:	2200      	movhi	r2, #0
 8008142:	4413      	add	r3, r2
 8008144:	1a18      	subs	r0, r3, r0
 8008146:	b003      	add	sp, #12
 8008148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800814a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800814e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008152:	e7ed      	b.n	8008130 <__exponent+0x4c>
 8008154:	2330      	movs	r3, #48	; 0x30
 8008156:	3130      	adds	r1, #48	; 0x30
 8008158:	7083      	strb	r3, [r0, #2]
 800815a:	70c1      	strb	r1, [r0, #3]
 800815c:	1d03      	adds	r3, r0, #4
 800815e:	e7f1      	b.n	8008144 <__exponent+0x60>

08008160 <_printf_float>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	ed2d 8b02 	vpush	{d8}
 8008168:	b08d      	sub	sp, #52	; 0x34
 800816a:	460c      	mov	r4, r1
 800816c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008170:	4616      	mov	r6, r2
 8008172:	461f      	mov	r7, r3
 8008174:	4605      	mov	r5, r0
 8008176:	f001 fd45 	bl	8009c04 <_localeconv_r>
 800817a:	f8d0 a000 	ldr.w	sl, [r0]
 800817e:	4650      	mov	r0, sl
 8008180:	f7f8 f826 	bl	80001d0 <strlen>
 8008184:	2300      	movs	r3, #0
 8008186:	930a      	str	r3, [sp, #40]	; 0x28
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	9305      	str	r3, [sp, #20]
 800818c:	f8d8 3000 	ldr.w	r3, [r8]
 8008190:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008194:	3307      	adds	r3, #7
 8008196:	f023 0307 	bic.w	r3, r3, #7
 800819a:	f103 0208 	add.w	r2, r3, #8
 800819e:	f8c8 2000 	str.w	r2, [r8]
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081b2:	9307      	str	r3, [sp, #28]
 80081b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80081b8:	ee08 0a10 	vmov	s16, r0
 80081bc:	4b9f      	ldr	r3, [pc, #636]	; (800843c <_printf_float+0x2dc>)
 80081be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081c2:	f04f 32ff 	mov.w	r2, #4294967295
 80081c6:	f7f8 fcb1 	bl	8000b2c <__aeabi_dcmpun>
 80081ca:	bb88      	cbnz	r0, 8008230 <_printf_float+0xd0>
 80081cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081d0:	4b9a      	ldr	r3, [pc, #616]	; (800843c <_printf_float+0x2dc>)
 80081d2:	f04f 32ff 	mov.w	r2, #4294967295
 80081d6:	f7f8 fc8b 	bl	8000af0 <__aeabi_dcmple>
 80081da:	bb48      	cbnz	r0, 8008230 <_printf_float+0xd0>
 80081dc:	2200      	movs	r2, #0
 80081de:	2300      	movs	r3, #0
 80081e0:	4640      	mov	r0, r8
 80081e2:	4649      	mov	r1, r9
 80081e4:	f7f8 fc7a 	bl	8000adc <__aeabi_dcmplt>
 80081e8:	b110      	cbz	r0, 80081f0 <_printf_float+0x90>
 80081ea:	232d      	movs	r3, #45	; 0x2d
 80081ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f0:	4b93      	ldr	r3, [pc, #588]	; (8008440 <_printf_float+0x2e0>)
 80081f2:	4894      	ldr	r0, [pc, #592]	; (8008444 <_printf_float+0x2e4>)
 80081f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081f8:	bf94      	ite	ls
 80081fa:	4698      	movls	r8, r3
 80081fc:	4680      	movhi	r8, r0
 80081fe:	2303      	movs	r3, #3
 8008200:	6123      	str	r3, [r4, #16]
 8008202:	9b05      	ldr	r3, [sp, #20]
 8008204:	f023 0204 	bic.w	r2, r3, #4
 8008208:	6022      	str	r2, [r4, #0]
 800820a:	f04f 0900 	mov.w	r9, #0
 800820e:	9700      	str	r7, [sp, #0]
 8008210:	4633      	mov	r3, r6
 8008212:	aa0b      	add	r2, sp, #44	; 0x2c
 8008214:	4621      	mov	r1, r4
 8008216:	4628      	mov	r0, r5
 8008218:	f000 f9d8 	bl	80085cc <_printf_common>
 800821c:	3001      	adds	r0, #1
 800821e:	f040 8090 	bne.w	8008342 <_printf_float+0x1e2>
 8008222:	f04f 30ff 	mov.w	r0, #4294967295
 8008226:	b00d      	add	sp, #52	; 0x34
 8008228:	ecbd 8b02 	vpop	{d8}
 800822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008230:	4642      	mov	r2, r8
 8008232:	464b      	mov	r3, r9
 8008234:	4640      	mov	r0, r8
 8008236:	4649      	mov	r1, r9
 8008238:	f7f8 fc78 	bl	8000b2c <__aeabi_dcmpun>
 800823c:	b140      	cbz	r0, 8008250 <_printf_float+0xf0>
 800823e:	464b      	mov	r3, r9
 8008240:	2b00      	cmp	r3, #0
 8008242:	bfbc      	itt	lt
 8008244:	232d      	movlt	r3, #45	; 0x2d
 8008246:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800824a:	487f      	ldr	r0, [pc, #508]	; (8008448 <_printf_float+0x2e8>)
 800824c:	4b7f      	ldr	r3, [pc, #508]	; (800844c <_printf_float+0x2ec>)
 800824e:	e7d1      	b.n	80081f4 <_printf_float+0x94>
 8008250:	6863      	ldr	r3, [r4, #4]
 8008252:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008256:	9206      	str	r2, [sp, #24]
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	d13f      	bne.n	80082dc <_printf_float+0x17c>
 800825c:	2306      	movs	r3, #6
 800825e:	6063      	str	r3, [r4, #4]
 8008260:	9b05      	ldr	r3, [sp, #20]
 8008262:	6861      	ldr	r1, [r4, #4]
 8008264:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008268:	2300      	movs	r3, #0
 800826a:	9303      	str	r3, [sp, #12]
 800826c:	ab0a      	add	r3, sp, #40	; 0x28
 800826e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008272:	ab09      	add	r3, sp, #36	; 0x24
 8008274:	ec49 8b10 	vmov	d0, r8, r9
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	6022      	str	r2, [r4, #0]
 800827c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008280:	4628      	mov	r0, r5
 8008282:	f7ff fecd 	bl	8008020 <__cvt>
 8008286:	9b06      	ldr	r3, [sp, #24]
 8008288:	9909      	ldr	r1, [sp, #36]	; 0x24
 800828a:	2b47      	cmp	r3, #71	; 0x47
 800828c:	4680      	mov	r8, r0
 800828e:	d108      	bne.n	80082a2 <_printf_float+0x142>
 8008290:	1cc8      	adds	r0, r1, #3
 8008292:	db02      	blt.n	800829a <_printf_float+0x13a>
 8008294:	6863      	ldr	r3, [r4, #4]
 8008296:	4299      	cmp	r1, r3
 8008298:	dd41      	ble.n	800831e <_printf_float+0x1be>
 800829a:	f1ab 0b02 	sub.w	fp, fp, #2
 800829e:	fa5f fb8b 	uxtb.w	fp, fp
 80082a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082a6:	d820      	bhi.n	80082ea <_printf_float+0x18a>
 80082a8:	3901      	subs	r1, #1
 80082aa:	465a      	mov	r2, fp
 80082ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082b0:	9109      	str	r1, [sp, #36]	; 0x24
 80082b2:	f7ff ff17 	bl	80080e4 <__exponent>
 80082b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b8:	1813      	adds	r3, r2, r0
 80082ba:	2a01      	cmp	r2, #1
 80082bc:	4681      	mov	r9, r0
 80082be:	6123      	str	r3, [r4, #16]
 80082c0:	dc02      	bgt.n	80082c8 <_printf_float+0x168>
 80082c2:	6822      	ldr	r2, [r4, #0]
 80082c4:	07d2      	lsls	r2, r2, #31
 80082c6:	d501      	bpl.n	80082cc <_printf_float+0x16c>
 80082c8:	3301      	adds	r3, #1
 80082ca:	6123      	str	r3, [r4, #16]
 80082cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d09c      	beq.n	800820e <_printf_float+0xae>
 80082d4:	232d      	movs	r3, #45	; 0x2d
 80082d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082da:	e798      	b.n	800820e <_printf_float+0xae>
 80082dc:	9a06      	ldr	r2, [sp, #24]
 80082de:	2a47      	cmp	r2, #71	; 0x47
 80082e0:	d1be      	bne.n	8008260 <_printf_float+0x100>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1bc      	bne.n	8008260 <_printf_float+0x100>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e7b9      	b.n	800825e <_printf_float+0xfe>
 80082ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082ee:	d118      	bne.n	8008322 <_printf_float+0x1c2>
 80082f0:	2900      	cmp	r1, #0
 80082f2:	6863      	ldr	r3, [r4, #4]
 80082f4:	dd0b      	ble.n	800830e <_printf_float+0x1ae>
 80082f6:	6121      	str	r1, [r4, #16]
 80082f8:	b913      	cbnz	r3, 8008300 <_printf_float+0x1a0>
 80082fa:	6822      	ldr	r2, [r4, #0]
 80082fc:	07d0      	lsls	r0, r2, #31
 80082fe:	d502      	bpl.n	8008306 <_printf_float+0x1a6>
 8008300:	3301      	adds	r3, #1
 8008302:	440b      	add	r3, r1
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	65a1      	str	r1, [r4, #88]	; 0x58
 8008308:	f04f 0900 	mov.w	r9, #0
 800830c:	e7de      	b.n	80082cc <_printf_float+0x16c>
 800830e:	b913      	cbnz	r3, 8008316 <_printf_float+0x1b6>
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	07d2      	lsls	r2, r2, #31
 8008314:	d501      	bpl.n	800831a <_printf_float+0x1ba>
 8008316:	3302      	adds	r3, #2
 8008318:	e7f4      	b.n	8008304 <_printf_float+0x1a4>
 800831a:	2301      	movs	r3, #1
 800831c:	e7f2      	b.n	8008304 <_printf_float+0x1a4>
 800831e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008324:	4299      	cmp	r1, r3
 8008326:	db05      	blt.n	8008334 <_printf_float+0x1d4>
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	6121      	str	r1, [r4, #16]
 800832c:	07d8      	lsls	r0, r3, #31
 800832e:	d5ea      	bpl.n	8008306 <_printf_float+0x1a6>
 8008330:	1c4b      	adds	r3, r1, #1
 8008332:	e7e7      	b.n	8008304 <_printf_float+0x1a4>
 8008334:	2900      	cmp	r1, #0
 8008336:	bfd4      	ite	le
 8008338:	f1c1 0202 	rsble	r2, r1, #2
 800833c:	2201      	movgt	r2, #1
 800833e:	4413      	add	r3, r2
 8008340:	e7e0      	b.n	8008304 <_printf_float+0x1a4>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	055a      	lsls	r2, r3, #21
 8008346:	d407      	bmi.n	8008358 <_printf_float+0x1f8>
 8008348:	6923      	ldr	r3, [r4, #16]
 800834a:	4642      	mov	r2, r8
 800834c:	4631      	mov	r1, r6
 800834e:	4628      	mov	r0, r5
 8008350:	47b8      	blx	r7
 8008352:	3001      	adds	r0, #1
 8008354:	d12c      	bne.n	80083b0 <_printf_float+0x250>
 8008356:	e764      	b.n	8008222 <_printf_float+0xc2>
 8008358:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800835c:	f240 80e0 	bls.w	8008520 <_printf_float+0x3c0>
 8008360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008364:	2200      	movs	r2, #0
 8008366:	2300      	movs	r3, #0
 8008368:	f7f8 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800836c:	2800      	cmp	r0, #0
 800836e:	d034      	beq.n	80083da <_printf_float+0x27a>
 8008370:	4a37      	ldr	r2, [pc, #220]	; (8008450 <_printf_float+0x2f0>)
 8008372:	2301      	movs	r3, #1
 8008374:	4631      	mov	r1, r6
 8008376:	4628      	mov	r0, r5
 8008378:	47b8      	blx	r7
 800837a:	3001      	adds	r0, #1
 800837c:	f43f af51 	beq.w	8008222 <_printf_float+0xc2>
 8008380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008384:	429a      	cmp	r2, r3
 8008386:	db02      	blt.n	800838e <_printf_float+0x22e>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	07d8      	lsls	r0, r3, #31
 800838c:	d510      	bpl.n	80083b0 <_printf_float+0x250>
 800838e:	ee18 3a10 	vmov	r3, s16
 8008392:	4652      	mov	r2, sl
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f43f af41 	beq.w	8008222 <_printf_float+0xc2>
 80083a0:	f04f 0800 	mov.w	r8, #0
 80083a4:	f104 091a 	add.w	r9, r4, #26
 80083a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083aa:	3b01      	subs	r3, #1
 80083ac:	4543      	cmp	r3, r8
 80083ae:	dc09      	bgt.n	80083c4 <_printf_float+0x264>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	079b      	lsls	r3, r3, #30
 80083b4:	f100 8105 	bmi.w	80085c2 <_printf_float+0x462>
 80083b8:	68e0      	ldr	r0, [r4, #12]
 80083ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083bc:	4298      	cmp	r0, r3
 80083be:	bfb8      	it	lt
 80083c0:	4618      	movlt	r0, r3
 80083c2:	e730      	b.n	8008226 <_printf_float+0xc6>
 80083c4:	2301      	movs	r3, #1
 80083c6:	464a      	mov	r2, r9
 80083c8:	4631      	mov	r1, r6
 80083ca:	4628      	mov	r0, r5
 80083cc:	47b8      	blx	r7
 80083ce:	3001      	adds	r0, #1
 80083d0:	f43f af27 	beq.w	8008222 <_printf_float+0xc2>
 80083d4:	f108 0801 	add.w	r8, r8, #1
 80083d8:	e7e6      	b.n	80083a8 <_printf_float+0x248>
 80083da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dc39      	bgt.n	8008454 <_printf_float+0x2f4>
 80083e0:	4a1b      	ldr	r2, [pc, #108]	; (8008450 <_printf_float+0x2f0>)
 80083e2:	2301      	movs	r3, #1
 80083e4:	4631      	mov	r1, r6
 80083e6:	4628      	mov	r0, r5
 80083e8:	47b8      	blx	r7
 80083ea:	3001      	adds	r0, #1
 80083ec:	f43f af19 	beq.w	8008222 <_printf_float+0xc2>
 80083f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083f4:	4313      	orrs	r3, r2
 80083f6:	d102      	bne.n	80083fe <_printf_float+0x29e>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	07d9      	lsls	r1, r3, #31
 80083fc:	d5d8      	bpl.n	80083b0 <_printf_float+0x250>
 80083fe:	ee18 3a10 	vmov	r3, s16
 8008402:	4652      	mov	r2, sl
 8008404:	4631      	mov	r1, r6
 8008406:	4628      	mov	r0, r5
 8008408:	47b8      	blx	r7
 800840a:	3001      	adds	r0, #1
 800840c:	f43f af09 	beq.w	8008222 <_printf_float+0xc2>
 8008410:	f04f 0900 	mov.w	r9, #0
 8008414:	f104 0a1a 	add.w	sl, r4, #26
 8008418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841a:	425b      	negs	r3, r3
 800841c:	454b      	cmp	r3, r9
 800841e:	dc01      	bgt.n	8008424 <_printf_float+0x2c4>
 8008420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008422:	e792      	b.n	800834a <_printf_float+0x1ea>
 8008424:	2301      	movs	r3, #1
 8008426:	4652      	mov	r2, sl
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f aef7 	beq.w	8008222 <_printf_float+0xc2>
 8008434:	f109 0901 	add.w	r9, r9, #1
 8008438:	e7ee      	b.n	8008418 <_printf_float+0x2b8>
 800843a:	bf00      	nop
 800843c:	7fefffff 	.word	0x7fefffff
 8008440:	0800b2f0 	.word	0x0800b2f0
 8008444:	0800b2f4 	.word	0x0800b2f4
 8008448:	0800b2fc 	.word	0x0800b2fc
 800844c:	0800b2f8 	.word	0x0800b2f8
 8008450:	0800b300 	.word	0x0800b300
 8008454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008458:	429a      	cmp	r2, r3
 800845a:	bfa8      	it	ge
 800845c:	461a      	movge	r2, r3
 800845e:	2a00      	cmp	r2, #0
 8008460:	4691      	mov	r9, r2
 8008462:	dc37      	bgt.n	80084d4 <_printf_float+0x374>
 8008464:	f04f 0b00 	mov.w	fp, #0
 8008468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800846c:	f104 021a 	add.w	r2, r4, #26
 8008470:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008472:	9305      	str	r3, [sp, #20]
 8008474:	eba3 0309 	sub.w	r3, r3, r9
 8008478:	455b      	cmp	r3, fp
 800847a:	dc33      	bgt.n	80084e4 <_printf_float+0x384>
 800847c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008480:	429a      	cmp	r2, r3
 8008482:	db3b      	blt.n	80084fc <_printf_float+0x39c>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	07da      	lsls	r2, r3, #31
 8008488:	d438      	bmi.n	80084fc <_printf_float+0x39c>
 800848a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848c:	9a05      	ldr	r2, [sp, #20]
 800848e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008490:	1a9a      	subs	r2, r3, r2
 8008492:	eba3 0901 	sub.w	r9, r3, r1
 8008496:	4591      	cmp	r9, r2
 8008498:	bfa8      	it	ge
 800849a:	4691      	movge	r9, r2
 800849c:	f1b9 0f00 	cmp.w	r9, #0
 80084a0:	dc35      	bgt.n	800850e <_printf_float+0x3ae>
 80084a2:	f04f 0800 	mov.w	r8, #0
 80084a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084aa:	f104 0a1a 	add.w	sl, r4, #26
 80084ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084b2:	1a9b      	subs	r3, r3, r2
 80084b4:	eba3 0309 	sub.w	r3, r3, r9
 80084b8:	4543      	cmp	r3, r8
 80084ba:	f77f af79 	ble.w	80083b0 <_printf_float+0x250>
 80084be:	2301      	movs	r3, #1
 80084c0:	4652      	mov	r2, sl
 80084c2:	4631      	mov	r1, r6
 80084c4:	4628      	mov	r0, r5
 80084c6:	47b8      	blx	r7
 80084c8:	3001      	adds	r0, #1
 80084ca:	f43f aeaa 	beq.w	8008222 <_printf_float+0xc2>
 80084ce:	f108 0801 	add.w	r8, r8, #1
 80084d2:	e7ec      	b.n	80084ae <_printf_float+0x34e>
 80084d4:	4613      	mov	r3, r2
 80084d6:	4631      	mov	r1, r6
 80084d8:	4642      	mov	r2, r8
 80084da:	4628      	mov	r0, r5
 80084dc:	47b8      	blx	r7
 80084de:	3001      	adds	r0, #1
 80084e0:	d1c0      	bne.n	8008464 <_printf_float+0x304>
 80084e2:	e69e      	b.n	8008222 <_printf_float+0xc2>
 80084e4:	2301      	movs	r3, #1
 80084e6:	4631      	mov	r1, r6
 80084e8:	4628      	mov	r0, r5
 80084ea:	9205      	str	r2, [sp, #20]
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	f43f ae97 	beq.w	8008222 <_printf_float+0xc2>
 80084f4:	9a05      	ldr	r2, [sp, #20]
 80084f6:	f10b 0b01 	add.w	fp, fp, #1
 80084fa:	e7b9      	b.n	8008470 <_printf_float+0x310>
 80084fc:	ee18 3a10 	vmov	r3, s16
 8008500:	4652      	mov	r2, sl
 8008502:	4631      	mov	r1, r6
 8008504:	4628      	mov	r0, r5
 8008506:	47b8      	blx	r7
 8008508:	3001      	adds	r0, #1
 800850a:	d1be      	bne.n	800848a <_printf_float+0x32a>
 800850c:	e689      	b.n	8008222 <_printf_float+0xc2>
 800850e:	9a05      	ldr	r2, [sp, #20]
 8008510:	464b      	mov	r3, r9
 8008512:	4442      	add	r2, r8
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	d1c1      	bne.n	80084a2 <_printf_float+0x342>
 800851e:	e680      	b.n	8008222 <_printf_float+0xc2>
 8008520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008522:	2a01      	cmp	r2, #1
 8008524:	dc01      	bgt.n	800852a <_printf_float+0x3ca>
 8008526:	07db      	lsls	r3, r3, #31
 8008528:	d538      	bpl.n	800859c <_printf_float+0x43c>
 800852a:	2301      	movs	r3, #1
 800852c:	4642      	mov	r2, r8
 800852e:	4631      	mov	r1, r6
 8008530:	4628      	mov	r0, r5
 8008532:	47b8      	blx	r7
 8008534:	3001      	adds	r0, #1
 8008536:	f43f ae74 	beq.w	8008222 <_printf_float+0xc2>
 800853a:	ee18 3a10 	vmov	r3, s16
 800853e:	4652      	mov	r2, sl
 8008540:	4631      	mov	r1, r6
 8008542:	4628      	mov	r0, r5
 8008544:	47b8      	blx	r7
 8008546:	3001      	adds	r0, #1
 8008548:	f43f ae6b 	beq.w	8008222 <_printf_float+0xc2>
 800854c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008550:	2200      	movs	r2, #0
 8008552:	2300      	movs	r3, #0
 8008554:	f7f8 fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008558:	b9d8      	cbnz	r0, 8008592 <_printf_float+0x432>
 800855a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855c:	f108 0201 	add.w	r2, r8, #1
 8008560:	3b01      	subs	r3, #1
 8008562:	4631      	mov	r1, r6
 8008564:	4628      	mov	r0, r5
 8008566:	47b8      	blx	r7
 8008568:	3001      	adds	r0, #1
 800856a:	d10e      	bne.n	800858a <_printf_float+0x42a>
 800856c:	e659      	b.n	8008222 <_printf_float+0xc2>
 800856e:	2301      	movs	r3, #1
 8008570:	4652      	mov	r2, sl
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	47b8      	blx	r7
 8008578:	3001      	adds	r0, #1
 800857a:	f43f ae52 	beq.w	8008222 <_printf_float+0xc2>
 800857e:	f108 0801 	add.w	r8, r8, #1
 8008582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008584:	3b01      	subs	r3, #1
 8008586:	4543      	cmp	r3, r8
 8008588:	dcf1      	bgt.n	800856e <_printf_float+0x40e>
 800858a:	464b      	mov	r3, r9
 800858c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008590:	e6dc      	b.n	800834c <_printf_float+0x1ec>
 8008592:	f04f 0800 	mov.w	r8, #0
 8008596:	f104 0a1a 	add.w	sl, r4, #26
 800859a:	e7f2      	b.n	8008582 <_printf_float+0x422>
 800859c:	2301      	movs	r3, #1
 800859e:	4642      	mov	r2, r8
 80085a0:	e7df      	b.n	8008562 <_printf_float+0x402>
 80085a2:	2301      	movs	r3, #1
 80085a4:	464a      	mov	r2, r9
 80085a6:	4631      	mov	r1, r6
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	f43f ae38 	beq.w	8008222 <_printf_float+0xc2>
 80085b2:	f108 0801 	add.w	r8, r8, #1
 80085b6:	68e3      	ldr	r3, [r4, #12]
 80085b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085ba:	1a5b      	subs	r3, r3, r1
 80085bc:	4543      	cmp	r3, r8
 80085be:	dcf0      	bgt.n	80085a2 <_printf_float+0x442>
 80085c0:	e6fa      	b.n	80083b8 <_printf_float+0x258>
 80085c2:	f04f 0800 	mov.w	r8, #0
 80085c6:	f104 0919 	add.w	r9, r4, #25
 80085ca:	e7f4      	b.n	80085b6 <_printf_float+0x456>

080085cc <_printf_common>:
 80085cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	4616      	mov	r6, r2
 80085d2:	4699      	mov	r9, r3
 80085d4:	688a      	ldr	r2, [r1, #8]
 80085d6:	690b      	ldr	r3, [r1, #16]
 80085d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085dc:	4293      	cmp	r3, r2
 80085de:	bfb8      	it	lt
 80085e0:	4613      	movlt	r3, r2
 80085e2:	6033      	str	r3, [r6, #0]
 80085e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085e8:	4607      	mov	r7, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	b10a      	cbz	r2, 80085f2 <_printf_common+0x26>
 80085ee:	3301      	adds	r3, #1
 80085f0:	6033      	str	r3, [r6, #0]
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	0699      	lsls	r1, r3, #26
 80085f6:	bf42      	ittt	mi
 80085f8:	6833      	ldrmi	r3, [r6, #0]
 80085fa:	3302      	addmi	r3, #2
 80085fc:	6033      	strmi	r3, [r6, #0]
 80085fe:	6825      	ldr	r5, [r4, #0]
 8008600:	f015 0506 	ands.w	r5, r5, #6
 8008604:	d106      	bne.n	8008614 <_printf_common+0x48>
 8008606:	f104 0a19 	add.w	sl, r4, #25
 800860a:	68e3      	ldr	r3, [r4, #12]
 800860c:	6832      	ldr	r2, [r6, #0]
 800860e:	1a9b      	subs	r3, r3, r2
 8008610:	42ab      	cmp	r3, r5
 8008612:	dc26      	bgt.n	8008662 <_printf_common+0x96>
 8008614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008618:	1e13      	subs	r3, r2, #0
 800861a:	6822      	ldr	r2, [r4, #0]
 800861c:	bf18      	it	ne
 800861e:	2301      	movne	r3, #1
 8008620:	0692      	lsls	r2, r2, #26
 8008622:	d42b      	bmi.n	800867c <_printf_common+0xb0>
 8008624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008628:	4649      	mov	r1, r9
 800862a:	4638      	mov	r0, r7
 800862c:	47c0      	blx	r8
 800862e:	3001      	adds	r0, #1
 8008630:	d01e      	beq.n	8008670 <_printf_common+0xa4>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	68e5      	ldr	r5, [r4, #12]
 8008636:	6832      	ldr	r2, [r6, #0]
 8008638:	f003 0306 	and.w	r3, r3, #6
 800863c:	2b04      	cmp	r3, #4
 800863e:	bf08      	it	eq
 8008640:	1aad      	subeq	r5, r5, r2
 8008642:	68a3      	ldr	r3, [r4, #8]
 8008644:	6922      	ldr	r2, [r4, #16]
 8008646:	bf0c      	ite	eq
 8008648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800864c:	2500      	movne	r5, #0
 800864e:	4293      	cmp	r3, r2
 8008650:	bfc4      	itt	gt
 8008652:	1a9b      	subgt	r3, r3, r2
 8008654:	18ed      	addgt	r5, r5, r3
 8008656:	2600      	movs	r6, #0
 8008658:	341a      	adds	r4, #26
 800865a:	42b5      	cmp	r5, r6
 800865c:	d11a      	bne.n	8008694 <_printf_common+0xc8>
 800865e:	2000      	movs	r0, #0
 8008660:	e008      	b.n	8008674 <_printf_common+0xa8>
 8008662:	2301      	movs	r3, #1
 8008664:	4652      	mov	r2, sl
 8008666:	4649      	mov	r1, r9
 8008668:	4638      	mov	r0, r7
 800866a:	47c0      	blx	r8
 800866c:	3001      	adds	r0, #1
 800866e:	d103      	bne.n	8008678 <_printf_common+0xac>
 8008670:	f04f 30ff 	mov.w	r0, #4294967295
 8008674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008678:	3501      	adds	r5, #1
 800867a:	e7c6      	b.n	800860a <_printf_common+0x3e>
 800867c:	18e1      	adds	r1, r4, r3
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	2030      	movs	r0, #48	; 0x30
 8008682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008686:	4422      	add	r2, r4
 8008688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800868c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008690:	3302      	adds	r3, #2
 8008692:	e7c7      	b.n	8008624 <_printf_common+0x58>
 8008694:	2301      	movs	r3, #1
 8008696:	4622      	mov	r2, r4
 8008698:	4649      	mov	r1, r9
 800869a:	4638      	mov	r0, r7
 800869c:	47c0      	blx	r8
 800869e:	3001      	adds	r0, #1
 80086a0:	d0e6      	beq.n	8008670 <_printf_common+0xa4>
 80086a2:	3601      	adds	r6, #1
 80086a4:	e7d9      	b.n	800865a <_printf_common+0x8e>
	...

080086a8 <_printf_i>:
 80086a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086ac:	7e0f      	ldrb	r7, [r1, #24]
 80086ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086b0:	2f78      	cmp	r7, #120	; 0x78
 80086b2:	4691      	mov	r9, r2
 80086b4:	4680      	mov	r8, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	469a      	mov	sl, r3
 80086ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086be:	d807      	bhi.n	80086d0 <_printf_i+0x28>
 80086c0:	2f62      	cmp	r7, #98	; 0x62
 80086c2:	d80a      	bhi.n	80086da <_printf_i+0x32>
 80086c4:	2f00      	cmp	r7, #0
 80086c6:	f000 80d8 	beq.w	800887a <_printf_i+0x1d2>
 80086ca:	2f58      	cmp	r7, #88	; 0x58
 80086cc:	f000 80a3 	beq.w	8008816 <_printf_i+0x16e>
 80086d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086d8:	e03a      	b.n	8008750 <_printf_i+0xa8>
 80086da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086de:	2b15      	cmp	r3, #21
 80086e0:	d8f6      	bhi.n	80086d0 <_printf_i+0x28>
 80086e2:	a101      	add	r1, pc, #4	; (adr r1, 80086e8 <_printf_i+0x40>)
 80086e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086e8:	08008741 	.word	0x08008741
 80086ec:	08008755 	.word	0x08008755
 80086f0:	080086d1 	.word	0x080086d1
 80086f4:	080086d1 	.word	0x080086d1
 80086f8:	080086d1 	.word	0x080086d1
 80086fc:	080086d1 	.word	0x080086d1
 8008700:	08008755 	.word	0x08008755
 8008704:	080086d1 	.word	0x080086d1
 8008708:	080086d1 	.word	0x080086d1
 800870c:	080086d1 	.word	0x080086d1
 8008710:	080086d1 	.word	0x080086d1
 8008714:	08008861 	.word	0x08008861
 8008718:	08008785 	.word	0x08008785
 800871c:	08008843 	.word	0x08008843
 8008720:	080086d1 	.word	0x080086d1
 8008724:	080086d1 	.word	0x080086d1
 8008728:	08008883 	.word	0x08008883
 800872c:	080086d1 	.word	0x080086d1
 8008730:	08008785 	.word	0x08008785
 8008734:	080086d1 	.word	0x080086d1
 8008738:	080086d1 	.word	0x080086d1
 800873c:	0800884b 	.word	0x0800884b
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	1d1a      	adds	r2, r3, #4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	602a      	str	r2, [r5, #0]
 8008748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800874c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008750:	2301      	movs	r3, #1
 8008752:	e0a3      	b.n	800889c <_printf_i+0x1f4>
 8008754:	6820      	ldr	r0, [r4, #0]
 8008756:	6829      	ldr	r1, [r5, #0]
 8008758:	0606      	lsls	r6, r0, #24
 800875a:	f101 0304 	add.w	r3, r1, #4
 800875e:	d50a      	bpl.n	8008776 <_printf_i+0xce>
 8008760:	680e      	ldr	r6, [r1, #0]
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	2e00      	cmp	r6, #0
 8008766:	da03      	bge.n	8008770 <_printf_i+0xc8>
 8008768:	232d      	movs	r3, #45	; 0x2d
 800876a:	4276      	negs	r6, r6
 800876c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008770:	485e      	ldr	r0, [pc, #376]	; (80088ec <_printf_i+0x244>)
 8008772:	230a      	movs	r3, #10
 8008774:	e019      	b.n	80087aa <_printf_i+0x102>
 8008776:	680e      	ldr	r6, [r1, #0]
 8008778:	602b      	str	r3, [r5, #0]
 800877a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800877e:	bf18      	it	ne
 8008780:	b236      	sxthne	r6, r6
 8008782:	e7ef      	b.n	8008764 <_printf_i+0xbc>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	6820      	ldr	r0, [r4, #0]
 8008788:	1d19      	adds	r1, r3, #4
 800878a:	6029      	str	r1, [r5, #0]
 800878c:	0601      	lsls	r1, r0, #24
 800878e:	d501      	bpl.n	8008794 <_printf_i+0xec>
 8008790:	681e      	ldr	r6, [r3, #0]
 8008792:	e002      	b.n	800879a <_printf_i+0xf2>
 8008794:	0646      	lsls	r6, r0, #25
 8008796:	d5fb      	bpl.n	8008790 <_printf_i+0xe8>
 8008798:	881e      	ldrh	r6, [r3, #0]
 800879a:	4854      	ldr	r0, [pc, #336]	; (80088ec <_printf_i+0x244>)
 800879c:	2f6f      	cmp	r7, #111	; 0x6f
 800879e:	bf0c      	ite	eq
 80087a0:	2308      	moveq	r3, #8
 80087a2:	230a      	movne	r3, #10
 80087a4:	2100      	movs	r1, #0
 80087a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087aa:	6865      	ldr	r5, [r4, #4]
 80087ac:	60a5      	str	r5, [r4, #8]
 80087ae:	2d00      	cmp	r5, #0
 80087b0:	bfa2      	ittt	ge
 80087b2:	6821      	ldrge	r1, [r4, #0]
 80087b4:	f021 0104 	bicge.w	r1, r1, #4
 80087b8:	6021      	strge	r1, [r4, #0]
 80087ba:	b90e      	cbnz	r6, 80087c0 <_printf_i+0x118>
 80087bc:	2d00      	cmp	r5, #0
 80087be:	d04d      	beq.n	800885c <_printf_i+0x1b4>
 80087c0:	4615      	mov	r5, r2
 80087c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80087c6:	fb03 6711 	mls	r7, r3, r1, r6
 80087ca:	5dc7      	ldrb	r7, [r0, r7]
 80087cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087d0:	4637      	mov	r7, r6
 80087d2:	42bb      	cmp	r3, r7
 80087d4:	460e      	mov	r6, r1
 80087d6:	d9f4      	bls.n	80087c2 <_printf_i+0x11a>
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d10b      	bne.n	80087f4 <_printf_i+0x14c>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	07de      	lsls	r6, r3, #31
 80087e0:	d508      	bpl.n	80087f4 <_printf_i+0x14c>
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	6861      	ldr	r1, [r4, #4]
 80087e6:	4299      	cmp	r1, r3
 80087e8:	bfde      	ittt	le
 80087ea:	2330      	movle	r3, #48	; 0x30
 80087ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087f4:	1b52      	subs	r2, r2, r5
 80087f6:	6122      	str	r2, [r4, #16]
 80087f8:	f8cd a000 	str.w	sl, [sp]
 80087fc:	464b      	mov	r3, r9
 80087fe:	aa03      	add	r2, sp, #12
 8008800:	4621      	mov	r1, r4
 8008802:	4640      	mov	r0, r8
 8008804:	f7ff fee2 	bl	80085cc <_printf_common>
 8008808:	3001      	adds	r0, #1
 800880a:	d14c      	bne.n	80088a6 <_printf_i+0x1fe>
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	b004      	add	sp, #16
 8008812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008816:	4835      	ldr	r0, [pc, #212]	; (80088ec <_printf_i+0x244>)
 8008818:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800881c:	6829      	ldr	r1, [r5, #0]
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	f851 6b04 	ldr.w	r6, [r1], #4
 8008824:	6029      	str	r1, [r5, #0]
 8008826:	061d      	lsls	r5, r3, #24
 8008828:	d514      	bpl.n	8008854 <_printf_i+0x1ac>
 800882a:	07df      	lsls	r7, r3, #31
 800882c:	bf44      	itt	mi
 800882e:	f043 0320 	orrmi.w	r3, r3, #32
 8008832:	6023      	strmi	r3, [r4, #0]
 8008834:	b91e      	cbnz	r6, 800883e <_printf_i+0x196>
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	f023 0320 	bic.w	r3, r3, #32
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	2310      	movs	r3, #16
 8008840:	e7b0      	b.n	80087a4 <_printf_i+0xfc>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	f043 0320 	orr.w	r3, r3, #32
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	2378      	movs	r3, #120	; 0x78
 800884c:	4828      	ldr	r0, [pc, #160]	; (80088f0 <_printf_i+0x248>)
 800884e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008852:	e7e3      	b.n	800881c <_printf_i+0x174>
 8008854:	0659      	lsls	r1, r3, #25
 8008856:	bf48      	it	mi
 8008858:	b2b6      	uxthmi	r6, r6
 800885a:	e7e6      	b.n	800882a <_printf_i+0x182>
 800885c:	4615      	mov	r5, r2
 800885e:	e7bb      	b.n	80087d8 <_printf_i+0x130>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	6826      	ldr	r6, [r4, #0]
 8008864:	6961      	ldr	r1, [r4, #20]
 8008866:	1d18      	adds	r0, r3, #4
 8008868:	6028      	str	r0, [r5, #0]
 800886a:	0635      	lsls	r5, r6, #24
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	d501      	bpl.n	8008874 <_printf_i+0x1cc>
 8008870:	6019      	str	r1, [r3, #0]
 8008872:	e002      	b.n	800887a <_printf_i+0x1d2>
 8008874:	0670      	lsls	r0, r6, #25
 8008876:	d5fb      	bpl.n	8008870 <_printf_i+0x1c8>
 8008878:	8019      	strh	r1, [r3, #0]
 800887a:	2300      	movs	r3, #0
 800887c:	6123      	str	r3, [r4, #16]
 800887e:	4615      	mov	r5, r2
 8008880:	e7ba      	b.n	80087f8 <_printf_i+0x150>
 8008882:	682b      	ldr	r3, [r5, #0]
 8008884:	1d1a      	adds	r2, r3, #4
 8008886:	602a      	str	r2, [r5, #0]
 8008888:	681d      	ldr	r5, [r3, #0]
 800888a:	6862      	ldr	r2, [r4, #4]
 800888c:	2100      	movs	r1, #0
 800888e:	4628      	mov	r0, r5
 8008890:	f7f7 fca6 	bl	80001e0 <memchr>
 8008894:	b108      	cbz	r0, 800889a <_printf_i+0x1f2>
 8008896:	1b40      	subs	r0, r0, r5
 8008898:	6060      	str	r0, [r4, #4]
 800889a:	6863      	ldr	r3, [r4, #4]
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	2300      	movs	r3, #0
 80088a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a4:	e7a8      	b.n	80087f8 <_printf_i+0x150>
 80088a6:	6923      	ldr	r3, [r4, #16]
 80088a8:	462a      	mov	r2, r5
 80088aa:	4649      	mov	r1, r9
 80088ac:	4640      	mov	r0, r8
 80088ae:	47d0      	blx	sl
 80088b0:	3001      	adds	r0, #1
 80088b2:	d0ab      	beq.n	800880c <_printf_i+0x164>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	079b      	lsls	r3, r3, #30
 80088b8:	d413      	bmi.n	80088e2 <_printf_i+0x23a>
 80088ba:	68e0      	ldr	r0, [r4, #12]
 80088bc:	9b03      	ldr	r3, [sp, #12]
 80088be:	4298      	cmp	r0, r3
 80088c0:	bfb8      	it	lt
 80088c2:	4618      	movlt	r0, r3
 80088c4:	e7a4      	b.n	8008810 <_printf_i+0x168>
 80088c6:	2301      	movs	r3, #1
 80088c8:	4632      	mov	r2, r6
 80088ca:	4649      	mov	r1, r9
 80088cc:	4640      	mov	r0, r8
 80088ce:	47d0      	blx	sl
 80088d0:	3001      	adds	r0, #1
 80088d2:	d09b      	beq.n	800880c <_printf_i+0x164>
 80088d4:	3501      	adds	r5, #1
 80088d6:	68e3      	ldr	r3, [r4, #12]
 80088d8:	9903      	ldr	r1, [sp, #12]
 80088da:	1a5b      	subs	r3, r3, r1
 80088dc:	42ab      	cmp	r3, r5
 80088de:	dcf2      	bgt.n	80088c6 <_printf_i+0x21e>
 80088e0:	e7eb      	b.n	80088ba <_printf_i+0x212>
 80088e2:	2500      	movs	r5, #0
 80088e4:	f104 0619 	add.w	r6, r4, #25
 80088e8:	e7f5      	b.n	80088d6 <_printf_i+0x22e>
 80088ea:	bf00      	nop
 80088ec:	0800b302 	.word	0x0800b302
 80088f0:	0800b313 	.word	0x0800b313

080088f4 <_puts_r>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	460e      	mov	r6, r1
 80088f8:	4605      	mov	r5, r0
 80088fa:	b118      	cbz	r0, 8008904 <_puts_r+0x10>
 80088fc:	6983      	ldr	r3, [r0, #24]
 80088fe:	b90b      	cbnz	r3, 8008904 <_puts_r+0x10>
 8008900:	f001 f8e2 	bl	8009ac8 <__sinit>
 8008904:	69ab      	ldr	r3, [r5, #24]
 8008906:	68ac      	ldr	r4, [r5, #8]
 8008908:	b913      	cbnz	r3, 8008910 <_puts_r+0x1c>
 800890a:	4628      	mov	r0, r5
 800890c:	f001 f8dc 	bl	8009ac8 <__sinit>
 8008910:	4b2c      	ldr	r3, [pc, #176]	; (80089c4 <_puts_r+0xd0>)
 8008912:	429c      	cmp	r4, r3
 8008914:	d120      	bne.n	8008958 <_puts_r+0x64>
 8008916:	686c      	ldr	r4, [r5, #4]
 8008918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800891a:	07db      	lsls	r3, r3, #31
 800891c:	d405      	bmi.n	800892a <_puts_r+0x36>
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	0598      	lsls	r0, r3, #22
 8008922:	d402      	bmi.n	800892a <_puts_r+0x36>
 8008924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008926:	f001 f972 	bl	8009c0e <__retarget_lock_acquire_recursive>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	0719      	lsls	r1, r3, #28
 800892e:	d51d      	bpl.n	800896c <_puts_r+0x78>
 8008930:	6923      	ldr	r3, [r4, #16]
 8008932:	b1db      	cbz	r3, 800896c <_puts_r+0x78>
 8008934:	3e01      	subs	r6, #1
 8008936:	68a3      	ldr	r3, [r4, #8]
 8008938:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800893c:	3b01      	subs	r3, #1
 800893e:	60a3      	str	r3, [r4, #8]
 8008940:	bb39      	cbnz	r1, 8008992 <_puts_r+0x9e>
 8008942:	2b00      	cmp	r3, #0
 8008944:	da38      	bge.n	80089b8 <_puts_r+0xc4>
 8008946:	4622      	mov	r2, r4
 8008948:	210a      	movs	r1, #10
 800894a:	4628      	mov	r0, r5
 800894c:	f000 f868 	bl	8008a20 <__swbuf_r>
 8008950:	3001      	adds	r0, #1
 8008952:	d011      	beq.n	8008978 <_puts_r+0x84>
 8008954:	250a      	movs	r5, #10
 8008956:	e011      	b.n	800897c <_puts_r+0x88>
 8008958:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <_puts_r+0xd4>)
 800895a:	429c      	cmp	r4, r3
 800895c:	d101      	bne.n	8008962 <_puts_r+0x6e>
 800895e:	68ac      	ldr	r4, [r5, #8]
 8008960:	e7da      	b.n	8008918 <_puts_r+0x24>
 8008962:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <_puts_r+0xd8>)
 8008964:	429c      	cmp	r4, r3
 8008966:	bf08      	it	eq
 8008968:	68ec      	ldreq	r4, [r5, #12]
 800896a:	e7d5      	b.n	8008918 <_puts_r+0x24>
 800896c:	4621      	mov	r1, r4
 800896e:	4628      	mov	r0, r5
 8008970:	f000 f8a8 	bl	8008ac4 <__swsetup_r>
 8008974:	2800      	cmp	r0, #0
 8008976:	d0dd      	beq.n	8008934 <_puts_r+0x40>
 8008978:	f04f 35ff 	mov.w	r5, #4294967295
 800897c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800897e:	07da      	lsls	r2, r3, #31
 8008980:	d405      	bmi.n	800898e <_puts_r+0x9a>
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	059b      	lsls	r3, r3, #22
 8008986:	d402      	bmi.n	800898e <_puts_r+0x9a>
 8008988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800898a:	f001 f941 	bl	8009c10 <__retarget_lock_release_recursive>
 800898e:	4628      	mov	r0, r5
 8008990:	bd70      	pop	{r4, r5, r6, pc}
 8008992:	2b00      	cmp	r3, #0
 8008994:	da04      	bge.n	80089a0 <_puts_r+0xac>
 8008996:	69a2      	ldr	r2, [r4, #24]
 8008998:	429a      	cmp	r2, r3
 800899a:	dc06      	bgt.n	80089aa <_puts_r+0xb6>
 800899c:	290a      	cmp	r1, #10
 800899e:	d004      	beq.n	80089aa <_puts_r+0xb6>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	6022      	str	r2, [r4, #0]
 80089a6:	7019      	strb	r1, [r3, #0]
 80089a8:	e7c5      	b.n	8008936 <_puts_r+0x42>
 80089aa:	4622      	mov	r2, r4
 80089ac:	4628      	mov	r0, r5
 80089ae:	f000 f837 	bl	8008a20 <__swbuf_r>
 80089b2:	3001      	adds	r0, #1
 80089b4:	d1bf      	bne.n	8008936 <_puts_r+0x42>
 80089b6:	e7df      	b.n	8008978 <_puts_r+0x84>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	250a      	movs	r5, #10
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	6022      	str	r2, [r4, #0]
 80089c0:	701d      	strb	r5, [r3, #0]
 80089c2:	e7db      	b.n	800897c <_puts_r+0x88>
 80089c4:	0800b3d4 	.word	0x0800b3d4
 80089c8:	0800b3f4 	.word	0x0800b3f4
 80089cc:	0800b3b4 	.word	0x0800b3b4

080089d0 <puts>:
 80089d0:	4b02      	ldr	r3, [pc, #8]	; (80089dc <puts+0xc>)
 80089d2:	4601      	mov	r1, r0
 80089d4:	6818      	ldr	r0, [r3, #0]
 80089d6:	f7ff bf8d 	b.w	80088f4 <_puts_r>
 80089da:	bf00      	nop
 80089dc:	2000000c 	.word	0x2000000c

080089e0 <siprintf>:
 80089e0:	b40e      	push	{r1, r2, r3}
 80089e2:	b500      	push	{lr}
 80089e4:	b09c      	sub	sp, #112	; 0x70
 80089e6:	ab1d      	add	r3, sp, #116	; 0x74
 80089e8:	9002      	str	r0, [sp, #8]
 80089ea:	9006      	str	r0, [sp, #24]
 80089ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089f0:	4809      	ldr	r0, [pc, #36]	; (8008a18 <siprintf+0x38>)
 80089f2:	9107      	str	r1, [sp, #28]
 80089f4:	9104      	str	r1, [sp, #16]
 80089f6:	4909      	ldr	r1, [pc, #36]	; (8008a1c <siprintf+0x3c>)
 80089f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fc:	9105      	str	r1, [sp, #20]
 80089fe:	6800      	ldr	r0, [r0, #0]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	a902      	add	r1, sp, #8
 8008a04:	f001 fe48 	bl	800a698 <_svfiprintf_r>
 8008a08:	9b02      	ldr	r3, [sp, #8]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	b01c      	add	sp, #112	; 0x70
 8008a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a14:	b003      	add	sp, #12
 8008a16:	4770      	bx	lr
 8008a18:	2000000c 	.word	0x2000000c
 8008a1c:	ffff0208 	.word	0xffff0208

08008a20 <__swbuf_r>:
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	460e      	mov	r6, r1
 8008a24:	4614      	mov	r4, r2
 8008a26:	4605      	mov	r5, r0
 8008a28:	b118      	cbz	r0, 8008a32 <__swbuf_r+0x12>
 8008a2a:	6983      	ldr	r3, [r0, #24]
 8008a2c:	b90b      	cbnz	r3, 8008a32 <__swbuf_r+0x12>
 8008a2e:	f001 f84b 	bl	8009ac8 <__sinit>
 8008a32:	4b21      	ldr	r3, [pc, #132]	; (8008ab8 <__swbuf_r+0x98>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	d12b      	bne.n	8008a90 <__swbuf_r+0x70>
 8008a38:	686c      	ldr	r4, [r5, #4]
 8008a3a:	69a3      	ldr	r3, [r4, #24]
 8008a3c:	60a3      	str	r3, [r4, #8]
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	071a      	lsls	r2, r3, #28
 8008a42:	d52f      	bpl.n	8008aa4 <__swbuf_r+0x84>
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	b36b      	cbz	r3, 8008aa4 <__swbuf_r+0x84>
 8008a48:	6923      	ldr	r3, [r4, #16]
 8008a4a:	6820      	ldr	r0, [r4, #0]
 8008a4c:	1ac0      	subs	r0, r0, r3
 8008a4e:	6963      	ldr	r3, [r4, #20]
 8008a50:	b2f6      	uxtb	r6, r6
 8008a52:	4283      	cmp	r3, r0
 8008a54:	4637      	mov	r7, r6
 8008a56:	dc04      	bgt.n	8008a62 <__swbuf_r+0x42>
 8008a58:	4621      	mov	r1, r4
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f000 ffa0 	bl	80099a0 <_fflush_r>
 8008a60:	bb30      	cbnz	r0, 8008ab0 <__swbuf_r+0x90>
 8008a62:	68a3      	ldr	r3, [r4, #8]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	60a3      	str	r3, [r4, #8]
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	6022      	str	r2, [r4, #0]
 8008a6e:	701e      	strb	r6, [r3, #0]
 8008a70:	6963      	ldr	r3, [r4, #20]
 8008a72:	3001      	adds	r0, #1
 8008a74:	4283      	cmp	r3, r0
 8008a76:	d004      	beq.n	8008a82 <__swbuf_r+0x62>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	07db      	lsls	r3, r3, #31
 8008a7c:	d506      	bpl.n	8008a8c <__swbuf_r+0x6c>
 8008a7e:	2e0a      	cmp	r6, #10
 8008a80:	d104      	bne.n	8008a8c <__swbuf_r+0x6c>
 8008a82:	4621      	mov	r1, r4
 8008a84:	4628      	mov	r0, r5
 8008a86:	f000 ff8b 	bl	80099a0 <_fflush_r>
 8008a8a:	b988      	cbnz	r0, 8008ab0 <__swbuf_r+0x90>
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a90:	4b0a      	ldr	r3, [pc, #40]	; (8008abc <__swbuf_r+0x9c>)
 8008a92:	429c      	cmp	r4, r3
 8008a94:	d101      	bne.n	8008a9a <__swbuf_r+0x7a>
 8008a96:	68ac      	ldr	r4, [r5, #8]
 8008a98:	e7cf      	b.n	8008a3a <__swbuf_r+0x1a>
 8008a9a:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <__swbuf_r+0xa0>)
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	bf08      	it	eq
 8008aa0:	68ec      	ldreq	r4, [r5, #12]
 8008aa2:	e7ca      	b.n	8008a3a <__swbuf_r+0x1a>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 f80c 	bl	8008ac4 <__swsetup_r>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d0cb      	beq.n	8008a48 <__swbuf_r+0x28>
 8008ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ab4:	e7ea      	b.n	8008a8c <__swbuf_r+0x6c>
 8008ab6:	bf00      	nop
 8008ab8:	0800b3d4 	.word	0x0800b3d4
 8008abc:	0800b3f4 	.word	0x0800b3f4
 8008ac0:	0800b3b4 	.word	0x0800b3b4

08008ac4 <__swsetup_r>:
 8008ac4:	4b32      	ldr	r3, [pc, #200]	; (8008b90 <__swsetup_r+0xcc>)
 8008ac6:	b570      	push	{r4, r5, r6, lr}
 8008ac8:	681d      	ldr	r5, [r3, #0]
 8008aca:	4606      	mov	r6, r0
 8008acc:	460c      	mov	r4, r1
 8008ace:	b125      	cbz	r5, 8008ada <__swsetup_r+0x16>
 8008ad0:	69ab      	ldr	r3, [r5, #24]
 8008ad2:	b913      	cbnz	r3, 8008ada <__swsetup_r+0x16>
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	f000 fff7 	bl	8009ac8 <__sinit>
 8008ada:	4b2e      	ldr	r3, [pc, #184]	; (8008b94 <__swsetup_r+0xd0>)
 8008adc:	429c      	cmp	r4, r3
 8008ade:	d10f      	bne.n	8008b00 <__swsetup_r+0x3c>
 8008ae0:	686c      	ldr	r4, [r5, #4]
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ae8:	0719      	lsls	r1, r3, #28
 8008aea:	d42c      	bmi.n	8008b46 <__swsetup_r+0x82>
 8008aec:	06dd      	lsls	r5, r3, #27
 8008aee:	d411      	bmi.n	8008b14 <__swsetup_r+0x50>
 8008af0:	2309      	movs	r3, #9
 8008af2:	6033      	str	r3, [r6, #0]
 8008af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	f04f 30ff 	mov.w	r0, #4294967295
 8008afe:	e03e      	b.n	8008b7e <__swsetup_r+0xba>
 8008b00:	4b25      	ldr	r3, [pc, #148]	; (8008b98 <__swsetup_r+0xd4>)
 8008b02:	429c      	cmp	r4, r3
 8008b04:	d101      	bne.n	8008b0a <__swsetup_r+0x46>
 8008b06:	68ac      	ldr	r4, [r5, #8]
 8008b08:	e7eb      	b.n	8008ae2 <__swsetup_r+0x1e>
 8008b0a:	4b24      	ldr	r3, [pc, #144]	; (8008b9c <__swsetup_r+0xd8>)
 8008b0c:	429c      	cmp	r4, r3
 8008b0e:	bf08      	it	eq
 8008b10:	68ec      	ldreq	r4, [r5, #12]
 8008b12:	e7e6      	b.n	8008ae2 <__swsetup_r+0x1e>
 8008b14:	0758      	lsls	r0, r3, #29
 8008b16:	d512      	bpl.n	8008b3e <__swsetup_r+0x7a>
 8008b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b1a:	b141      	cbz	r1, 8008b2e <__swsetup_r+0x6a>
 8008b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b20:	4299      	cmp	r1, r3
 8008b22:	d002      	beq.n	8008b2a <__swsetup_r+0x66>
 8008b24:	4630      	mov	r0, r6
 8008b26:	f001 fc7b 	bl	800a420 <_free_r>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b34:	81a3      	strh	r3, [r4, #12]
 8008b36:	2300      	movs	r3, #0
 8008b38:	6063      	str	r3, [r4, #4]
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	f043 0308 	orr.w	r3, r3, #8
 8008b44:	81a3      	strh	r3, [r4, #12]
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	b94b      	cbnz	r3, 8008b5e <__swsetup_r+0x9a>
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b54:	d003      	beq.n	8008b5e <__swsetup_r+0x9a>
 8008b56:	4621      	mov	r1, r4
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f001 f87f 	bl	8009c5c <__smakebuf_r>
 8008b5e:	89a0      	ldrh	r0, [r4, #12]
 8008b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b64:	f010 0301 	ands.w	r3, r0, #1
 8008b68:	d00a      	beq.n	8008b80 <__swsetup_r+0xbc>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60a3      	str	r3, [r4, #8]
 8008b6e:	6963      	ldr	r3, [r4, #20]
 8008b70:	425b      	negs	r3, r3
 8008b72:	61a3      	str	r3, [r4, #24]
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	b943      	cbnz	r3, 8008b8a <__swsetup_r+0xc6>
 8008b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b7c:	d1ba      	bne.n	8008af4 <__swsetup_r+0x30>
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
 8008b80:	0781      	lsls	r1, r0, #30
 8008b82:	bf58      	it	pl
 8008b84:	6963      	ldrpl	r3, [r4, #20]
 8008b86:	60a3      	str	r3, [r4, #8]
 8008b88:	e7f4      	b.n	8008b74 <__swsetup_r+0xb0>
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	e7f7      	b.n	8008b7e <__swsetup_r+0xba>
 8008b8e:	bf00      	nop
 8008b90:	2000000c 	.word	0x2000000c
 8008b94:	0800b3d4 	.word	0x0800b3d4
 8008b98:	0800b3f4 	.word	0x0800b3f4
 8008b9c:	0800b3b4 	.word	0x0800b3b4

08008ba0 <quorem>:
 8008ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	6903      	ldr	r3, [r0, #16]
 8008ba6:	690c      	ldr	r4, [r1, #16]
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	4607      	mov	r7, r0
 8008bac:	f2c0 8081 	blt.w	8008cb2 <quorem+0x112>
 8008bb0:	3c01      	subs	r4, #1
 8008bb2:	f101 0814 	add.w	r8, r1, #20
 8008bb6:	f100 0514 	add.w	r5, r0, #20
 8008bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008bc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008bd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bd8:	d331      	bcc.n	8008c3e <quorem+0x9e>
 8008bda:	f04f 0e00 	mov.w	lr, #0
 8008bde:	4640      	mov	r0, r8
 8008be0:	46ac      	mov	ip, r5
 8008be2:	46f2      	mov	sl, lr
 8008be4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008be8:	b293      	uxth	r3, r2
 8008bea:	fb06 e303 	mla	r3, r6, r3, lr
 8008bee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	ebaa 0303 	sub.w	r3, sl, r3
 8008bf8:	f8dc a000 	ldr.w	sl, [ip]
 8008bfc:	0c12      	lsrs	r2, r2, #16
 8008bfe:	fa13 f38a 	uxtah	r3, r3, sl
 8008c02:	fb06 e202 	mla	r2, r6, r2, lr
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	9b00      	ldr	r3, [sp, #0]
 8008c0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c0e:	b292      	uxth	r2, r2
 8008c10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c18:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c1c:	4581      	cmp	r9, r0
 8008c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c22:	f84c 3b04 	str.w	r3, [ip], #4
 8008c26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c2a:	d2db      	bcs.n	8008be4 <quorem+0x44>
 8008c2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c30:	b92b      	cbnz	r3, 8008c3e <quorem+0x9e>
 8008c32:	9b01      	ldr	r3, [sp, #4]
 8008c34:	3b04      	subs	r3, #4
 8008c36:	429d      	cmp	r5, r3
 8008c38:	461a      	mov	r2, r3
 8008c3a:	d32e      	bcc.n	8008c9a <quorem+0xfa>
 8008c3c:	613c      	str	r4, [r7, #16]
 8008c3e:	4638      	mov	r0, r7
 8008c40:	f001 fad6 	bl	800a1f0 <__mcmp>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	db24      	blt.n	8008c92 <quorem+0xf2>
 8008c48:	3601      	adds	r6, #1
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f04f 0c00 	mov.w	ip, #0
 8008c50:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c54:	f8d0 e000 	ldr.w	lr, [r0]
 8008c58:	b293      	uxth	r3, r2
 8008c5a:	ebac 0303 	sub.w	r3, ip, r3
 8008c5e:	0c12      	lsrs	r2, r2, #16
 8008c60:	fa13 f38e 	uxtah	r3, r3, lr
 8008c64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c72:	45c1      	cmp	r9, r8
 8008c74:	f840 3b04 	str.w	r3, [r0], #4
 8008c78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c7c:	d2e8      	bcs.n	8008c50 <quorem+0xb0>
 8008c7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c86:	b922      	cbnz	r2, 8008c92 <quorem+0xf2>
 8008c88:	3b04      	subs	r3, #4
 8008c8a:	429d      	cmp	r5, r3
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	d30a      	bcc.n	8008ca6 <quorem+0x106>
 8008c90:	613c      	str	r4, [r7, #16]
 8008c92:	4630      	mov	r0, r6
 8008c94:	b003      	add	sp, #12
 8008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9a:	6812      	ldr	r2, [r2, #0]
 8008c9c:	3b04      	subs	r3, #4
 8008c9e:	2a00      	cmp	r2, #0
 8008ca0:	d1cc      	bne.n	8008c3c <quorem+0x9c>
 8008ca2:	3c01      	subs	r4, #1
 8008ca4:	e7c7      	b.n	8008c36 <quorem+0x96>
 8008ca6:	6812      	ldr	r2, [r2, #0]
 8008ca8:	3b04      	subs	r3, #4
 8008caa:	2a00      	cmp	r2, #0
 8008cac:	d1f0      	bne.n	8008c90 <quorem+0xf0>
 8008cae:	3c01      	subs	r4, #1
 8008cb0:	e7eb      	b.n	8008c8a <quorem+0xea>
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e7ee      	b.n	8008c94 <quorem+0xf4>
	...

08008cb8 <_dtoa_r>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	ed2d 8b04 	vpush	{d8-d9}
 8008cc0:	ec57 6b10 	vmov	r6, r7, d0
 8008cc4:	b093      	sub	sp, #76	; 0x4c
 8008cc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008cc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ccc:	9106      	str	r1, [sp, #24]
 8008cce:	ee10 aa10 	vmov	sl, s0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8008cd8:	46bb      	mov	fp, r7
 8008cda:	b975      	cbnz	r5, 8008cfa <_dtoa_r+0x42>
 8008cdc:	2010      	movs	r0, #16
 8008cde:	f000 fffd 	bl	8009cdc <malloc>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	6260      	str	r0, [r4, #36]	; 0x24
 8008ce6:	b920      	cbnz	r0, 8008cf2 <_dtoa_r+0x3a>
 8008ce8:	4ba7      	ldr	r3, [pc, #668]	; (8008f88 <_dtoa_r+0x2d0>)
 8008cea:	21ea      	movs	r1, #234	; 0xea
 8008cec:	48a7      	ldr	r0, [pc, #668]	; (8008f8c <_dtoa_r+0x2d4>)
 8008cee:	f001 fe39 	bl	800a964 <__assert_func>
 8008cf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cf6:	6005      	str	r5, [r0, #0]
 8008cf8:	60c5      	str	r5, [r0, #12]
 8008cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cfc:	6819      	ldr	r1, [r3, #0]
 8008cfe:	b151      	cbz	r1, 8008d16 <_dtoa_r+0x5e>
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	604a      	str	r2, [r1, #4]
 8008d04:	2301      	movs	r3, #1
 8008d06:	4093      	lsls	r3, r2
 8008d08:	608b      	str	r3, [r1, #8]
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f001 f82e 	bl	8009d6c <_Bfree>
 8008d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	1e3b      	subs	r3, r7, #0
 8008d18:	bfaa      	itet	ge
 8008d1a:	2300      	movge	r3, #0
 8008d1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008d20:	f8c8 3000 	strge.w	r3, [r8]
 8008d24:	4b9a      	ldr	r3, [pc, #616]	; (8008f90 <_dtoa_r+0x2d8>)
 8008d26:	bfbc      	itt	lt
 8008d28:	2201      	movlt	r2, #1
 8008d2a:	f8c8 2000 	strlt.w	r2, [r8]
 8008d2e:	ea33 030b 	bics.w	r3, r3, fp
 8008d32:	d11b      	bne.n	8008d6c <_dtoa_r+0xb4>
 8008d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d36:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d40:	4333      	orrs	r3, r6
 8008d42:	f000 8592 	beq.w	800986a <_dtoa_r+0xbb2>
 8008d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d48:	b963      	cbnz	r3, 8008d64 <_dtoa_r+0xac>
 8008d4a:	4b92      	ldr	r3, [pc, #584]	; (8008f94 <_dtoa_r+0x2dc>)
 8008d4c:	e022      	b.n	8008d94 <_dtoa_r+0xdc>
 8008d4e:	4b92      	ldr	r3, [pc, #584]	; (8008f98 <_dtoa_r+0x2e0>)
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	3308      	adds	r3, #8
 8008d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	9801      	ldr	r0, [sp, #4]
 8008d5a:	b013      	add	sp, #76	; 0x4c
 8008d5c:	ecbd 8b04 	vpop	{d8-d9}
 8008d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d64:	4b8b      	ldr	r3, [pc, #556]	; (8008f94 <_dtoa_r+0x2dc>)
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	3303      	adds	r3, #3
 8008d6a:	e7f3      	b.n	8008d54 <_dtoa_r+0x9c>
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	2300      	movs	r3, #0
 8008d70:	4650      	mov	r0, sl
 8008d72:	4659      	mov	r1, fp
 8008d74:	f7f7 fea8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d78:	ec4b ab19 	vmov	d9, sl, fp
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	b158      	cbz	r0, 8008d98 <_dtoa_r+0xe0>
 8008d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d82:	2301      	movs	r3, #1
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 856b 	beq.w	8009864 <_dtoa_r+0xbac>
 8008d8e:	4883      	ldr	r0, [pc, #524]	; (8008f9c <_dtoa_r+0x2e4>)
 8008d90:	6018      	str	r0, [r3, #0]
 8008d92:	1e43      	subs	r3, r0, #1
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	e7df      	b.n	8008d58 <_dtoa_r+0xa0>
 8008d98:	ec4b ab10 	vmov	d0, sl, fp
 8008d9c:	aa10      	add	r2, sp, #64	; 0x40
 8008d9e:	a911      	add	r1, sp, #68	; 0x44
 8008da0:	4620      	mov	r0, r4
 8008da2:	f001 facb 	bl	800a33c <__d2b>
 8008da6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008daa:	ee08 0a10 	vmov	s16, r0
 8008dae:	2d00      	cmp	r5, #0
 8008db0:	f000 8084 	beq.w	8008ebc <_dtoa_r+0x204>
 8008db4:	ee19 3a90 	vmov	r3, s19
 8008db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008dc0:	4656      	mov	r6, sl
 8008dc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008dca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008dce:	4b74      	ldr	r3, [pc, #464]	; (8008fa0 <_dtoa_r+0x2e8>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	f7f7 fa57 	bl	8000288 <__aeabi_dsub>
 8008dda:	a365      	add	r3, pc, #404	; (adr r3, 8008f70 <_dtoa_r+0x2b8>)
 8008ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de0:	f7f7 fc0a 	bl	80005f8 <__aeabi_dmul>
 8008de4:	a364      	add	r3, pc, #400	; (adr r3, 8008f78 <_dtoa_r+0x2c0>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7f7 fa4f 	bl	800028c <__adddf3>
 8008dee:	4606      	mov	r6, r0
 8008df0:	4628      	mov	r0, r5
 8008df2:	460f      	mov	r7, r1
 8008df4:	f7f7 fb96 	bl	8000524 <__aeabi_i2d>
 8008df8:	a361      	add	r3, pc, #388	; (adr r3, 8008f80 <_dtoa_r+0x2c8>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f7f7 fbfb 	bl	80005f8 <__aeabi_dmul>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4630      	mov	r0, r6
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7f7 fa3f 	bl	800028c <__adddf3>
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460f      	mov	r7, r1
 8008e12:	f7f7 fea1 	bl	8000b58 <__aeabi_d2iz>
 8008e16:	2200      	movs	r2, #0
 8008e18:	9000      	str	r0, [sp, #0]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f7f7 fe5c 	bl	8000adc <__aeabi_dcmplt>
 8008e24:	b150      	cbz	r0, 8008e3c <_dtoa_r+0x184>
 8008e26:	9800      	ldr	r0, [sp, #0]
 8008e28:	f7f7 fb7c 	bl	8000524 <__aeabi_i2d>
 8008e2c:	4632      	mov	r2, r6
 8008e2e:	463b      	mov	r3, r7
 8008e30:	f7f7 fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e34:	b910      	cbnz	r0, 8008e3c <_dtoa_r+0x184>
 8008e36:	9b00      	ldr	r3, [sp, #0]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	9b00      	ldr	r3, [sp, #0]
 8008e3e:	2b16      	cmp	r3, #22
 8008e40:	d85a      	bhi.n	8008ef8 <_dtoa_r+0x240>
 8008e42:	9a00      	ldr	r2, [sp, #0]
 8008e44:	4b57      	ldr	r3, [pc, #348]	; (8008fa4 <_dtoa_r+0x2ec>)
 8008e46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	ec51 0b19 	vmov	r0, r1, d9
 8008e52:	f7f7 fe43 	bl	8000adc <__aeabi_dcmplt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d050      	beq.n	8008efc <_dtoa_r+0x244>
 8008e5a:	9b00      	ldr	r3, [sp, #0]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	2300      	movs	r3, #0
 8008e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e66:	1b5d      	subs	r5, r3, r5
 8008e68:	1e6b      	subs	r3, r5, #1
 8008e6a:	9305      	str	r3, [sp, #20]
 8008e6c:	bf45      	ittet	mi
 8008e6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008e72:	9304      	strmi	r3, [sp, #16]
 8008e74:	2300      	movpl	r3, #0
 8008e76:	2300      	movmi	r3, #0
 8008e78:	bf4c      	ite	mi
 8008e7a:	9305      	strmi	r3, [sp, #20]
 8008e7c:	9304      	strpl	r3, [sp, #16]
 8008e7e:	9b00      	ldr	r3, [sp, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	db3d      	blt.n	8008f00 <_dtoa_r+0x248>
 8008e84:	9b05      	ldr	r3, [sp, #20]
 8008e86:	9a00      	ldr	r2, [sp, #0]
 8008e88:	920a      	str	r2, [sp, #40]	; 0x28
 8008e8a:	4413      	add	r3, r2
 8008e8c:	9305      	str	r3, [sp, #20]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9307      	str	r3, [sp, #28]
 8008e92:	9b06      	ldr	r3, [sp, #24]
 8008e94:	2b09      	cmp	r3, #9
 8008e96:	f200 8089 	bhi.w	8008fac <_dtoa_r+0x2f4>
 8008e9a:	2b05      	cmp	r3, #5
 8008e9c:	bfc4      	itt	gt
 8008e9e:	3b04      	subgt	r3, #4
 8008ea0:	9306      	strgt	r3, [sp, #24]
 8008ea2:	9b06      	ldr	r3, [sp, #24]
 8008ea4:	f1a3 0302 	sub.w	r3, r3, #2
 8008ea8:	bfcc      	ite	gt
 8008eaa:	2500      	movgt	r5, #0
 8008eac:	2501      	movle	r5, #1
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	f200 8087 	bhi.w	8008fc2 <_dtoa_r+0x30a>
 8008eb4:	e8df f003 	tbb	[pc, r3]
 8008eb8:	59383a2d 	.word	0x59383a2d
 8008ebc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ec0:	441d      	add	r5, r3
 8008ec2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	bfc1      	itttt	gt
 8008eca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ece:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ed2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008ed6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008eda:	bfda      	itte	le
 8008edc:	f1c3 0320 	rsble	r3, r3, #32
 8008ee0:	fa06 f003 	lslle.w	r0, r6, r3
 8008ee4:	4318      	orrgt	r0, r3
 8008ee6:	f7f7 fb0d 	bl	8000504 <__aeabi_ui2d>
 8008eea:	2301      	movs	r3, #1
 8008eec:	4606      	mov	r6, r0
 8008eee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ef2:	3d01      	subs	r5, #1
 8008ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ef6:	e76a      	b.n	8008dce <_dtoa_r+0x116>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e7b2      	b.n	8008e62 <_dtoa_r+0x1aa>
 8008efc:	900b      	str	r0, [sp, #44]	; 0x2c
 8008efe:	e7b1      	b.n	8008e64 <_dtoa_r+0x1ac>
 8008f00:	9b04      	ldr	r3, [sp, #16]
 8008f02:	9a00      	ldr	r2, [sp, #0]
 8008f04:	1a9b      	subs	r3, r3, r2
 8008f06:	9304      	str	r3, [sp, #16]
 8008f08:	4253      	negs	r3, r2
 8008f0a:	9307      	str	r3, [sp, #28]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f10:	e7bf      	b.n	8008e92 <_dtoa_r+0x1da>
 8008f12:	2300      	movs	r3, #0
 8008f14:	9308      	str	r3, [sp, #32]
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	dc55      	bgt.n	8008fc8 <_dtoa_r+0x310>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f22:	461a      	mov	r2, r3
 8008f24:	9209      	str	r2, [sp, #36]	; 0x24
 8008f26:	e00c      	b.n	8008f42 <_dtoa_r+0x28a>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e7f3      	b.n	8008f14 <_dtoa_r+0x25c>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f30:	9308      	str	r3, [sp, #32]
 8008f32:	9b00      	ldr	r3, [sp, #0]
 8008f34:	4413      	add	r3, r2
 8008f36:	9302      	str	r3, [sp, #8]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	9303      	str	r3, [sp, #12]
 8008f3e:	bfb8      	it	lt
 8008f40:	2301      	movlt	r3, #1
 8008f42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f44:	2200      	movs	r2, #0
 8008f46:	6042      	str	r2, [r0, #4]
 8008f48:	2204      	movs	r2, #4
 8008f4a:	f102 0614 	add.w	r6, r2, #20
 8008f4e:	429e      	cmp	r6, r3
 8008f50:	6841      	ldr	r1, [r0, #4]
 8008f52:	d93d      	bls.n	8008fd0 <_dtoa_r+0x318>
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 fec9 	bl	8009cec <_Balloc>
 8008f5a:	9001      	str	r0, [sp, #4]
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d13b      	bne.n	8008fd8 <_dtoa_r+0x320>
 8008f60:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <_dtoa_r+0x2f0>)
 8008f62:	4602      	mov	r2, r0
 8008f64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f68:	e6c0      	b.n	8008cec <_dtoa_r+0x34>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e7df      	b.n	8008f2e <_dtoa_r+0x276>
 8008f6e:	bf00      	nop
 8008f70:	636f4361 	.word	0x636f4361
 8008f74:	3fd287a7 	.word	0x3fd287a7
 8008f78:	8b60c8b3 	.word	0x8b60c8b3
 8008f7c:	3fc68a28 	.word	0x3fc68a28
 8008f80:	509f79fb 	.word	0x509f79fb
 8008f84:	3fd34413 	.word	0x3fd34413
 8008f88:	0800b331 	.word	0x0800b331
 8008f8c:	0800b348 	.word	0x0800b348
 8008f90:	7ff00000 	.word	0x7ff00000
 8008f94:	0800b32d 	.word	0x0800b32d
 8008f98:	0800b324 	.word	0x0800b324
 8008f9c:	0800b301 	.word	0x0800b301
 8008fa0:	3ff80000 	.word	0x3ff80000
 8008fa4:	0800b498 	.word	0x0800b498
 8008fa8:	0800b3a3 	.word	0x0800b3a3
 8008fac:	2501      	movs	r5, #1
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9306      	str	r3, [sp, #24]
 8008fb2:	9508      	str	r5, [sp, #32]
 8008fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2312      	movs	r3, #18
 8008fc0:	e7b0      	b.n	8008f24 <_dtoa_r+0x26c>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	9308      	str	r3, [sp, #32]
 8008fc6:	e7f5      	b.n	8008fb4 <_dtoa_r+0x2fc>
 8008fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008fce:	e7b8      	b.n	8008f42 <_dtoa_r+0x28a>
 8008fd0:	3101      	adds	r1, #1
 8008fd2:	6041      	str	r1, [r0, #4]
 8008fd4:	0052      	lsls	r2, r2, #1
 8008fd6:	e7b8      	b.n	8008f4a <_dtoa_r+0x292>
 8008fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fda:	9a01      	ldr	r2, [sp, #4]
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	2b0e      	cmp	r3, #14
 8008fe2:	f200 809d 	bhi.w	8009120 <_dtoa_r+0x468>
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	f000 809a 	beq.w	8009120 <_dtoa_r+0x468>
 8008fec:	9b00      	ldr	r3, [sp, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dd32      	ble.n	8009058 <_dtoa_r+0x3a0>
 8008ff2:	4ab7      	ldr	r2, [pc, #732]	; (80092d0 <_dtoa_r+0x618>)
 8008ff4:	f003 030f 	and.w	r3, r3, #15
 8008ff8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009000:	9b00      	ldr	r3, [sp, #0]
 8009002:	05d8      	lsls	r0, r3, #23
 8009004:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009008:	d516      	bpl.n	8009038 <_dtoa_r+0x380>
 800900a:	4bb2      	ldr	r3, [pc, #712]	; (80092d4 <_dtoa_r+0x61c>)
 800900c:	ec51 0b19 	vmov	r0, r1, d9
 8009010:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009014:	f7f7 fc1a 	bl	800084c <__aeabi_ddiv>
 8009018:	f007 070f 	and.w	r7, r7, #15
 800901c:	4682      	mov	sl, r0
 800901e:	468b      	mov	fp, r1
 8009020:	2503      	movs	r5, #3
 8009022:	4eac      	ldr	r6, [pc, #688]	; (80092d4 <_dtoa_r+0x61c>)
 8009024:	b957      	cbnz	r7, 800903c <_dtoa_r+0x384>
 8009026:	4642      	mov	r2, r8
 8009028:	464b      	mov	r3, r9
 800902a:	4650      	mov	r0, sl
 800902c:	4659      	mov	r1, fp
 800902e:	f7f7 fc0d 	bl	800084c <__aeabi_ddiv>
 8009032:	4682      	mov	sl, r0
 8009034:	468b      	mov	fp, r1
 8009036:	e028      	b.n	800908a <_dtoa_r+0x3d2>
 8009038:	2502      	movs	r5, #2
 800903a:	e7f2      	b.n	8009022 <_dtoa_r+0x36a>
 800903c:	07f9      	lsls	r1, r7, #31
 800903e:	d508      	bpl.n	8009052 <_dtoa_r+0x39a>
 8009040:	4640      	mov	r0, r8
 8009042:	4649      	mov	r1, r9
 8009044:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009048:	f7f7 fad6 	bl	80005f8 <__aeabi_dmul>
 800904c:	3501      	adds	r5, #1
 800904e:	4680      	mov	r8, r0
 8009050:	4689      	mov	r9, r1
 8009052:	107f      	asrs	r7, r7, #1
 8009054:	3608      	adds	r6, #8
 8009056:	e7e5      	b.n	8009024 <_dtoa_r+0x36c>
 8009058:	f000 809b 	beq.w	8009192 <_dtoa_r+0x4da>
 800905c:	9b00      	ldr	r3, [sp, #0]
 800905e:	4f9d      	ldr	r7, [pc, #628]	; (80092d4 <_dtoa_r+0x61c>)
 8009060:	425e      	negs	r6, r3
 8009062:	4b9b      	ldr	r3, [pc, #620]	; (80092d0 <_dtoa_r+0x618>)
 8009064:	f006 020f 	and.w	r2, r6, #15
 8009068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	ec51 0b19 	vmov	r0, r1, d9
 8009074:	f7f7 fac0 	bl	80005f8 <__aeabi_dmul>
 8009078:	1136      	asrs	r6, r6, #4
 800907a:	4682      	mov	sl, r0
 800907c:	468b      	mov	fp, r1
 800907e:	2300      	movs	r3, #0
 8009080:	2502      	movs	r5, #2
 8009082:	2e00      	cmp	r6, #0
 8009084:	d17a      	bne.n	800917c <_dtoa_r+0x4c4>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1d3      	bne.n	8009032 <_dtoa_r+0x37a>
 800908a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 8082 	beq.w	8009196 <_dtoa_r+0x4de>
 8009092:	4b91      	ldr	r3, [pc, #580]	; (80092d8 <_dtoa_r+0x620>)
 8009094:	2200      	movs	r2, #0
 8009096:	4650      	mov	r0, sl
 8009098:	4659      	mov	r1, fp
 800909a:	f7f7 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d079      	beq.n	8009196 <_dtoa_r+0x4de>
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d076      	beq.n	8009196 <_dtoa_r+0x4de>
 80090a8:	9b02      	ldr	r3, [sp, #8]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dd36      	ble.n	800911c <_dtoa_r+0x464>
 80090ae:	9b00      	ldr	r3, [sp, #0]
 80090b0:	4650      	mov	r0, sl
 80090b2:	4659      	mov	r1, fp
 80090b4:	1e5f      	subs	r7, r3, #1
 80090b6:	2200      	movs	r2, #0
 80090b8:	4b88      	ldr	r3, [pc, #544]	; (80092dc <_dtoa_r+0x624>)
 80090ba:	f7f7 fa9d 	bl	80005f8 <__aeabi_dmul>
 80090be:	9e02      	ldr	r6, [sp, #8]
 80090c0:	4682      	mov	sl, r0
 80090c2:	468b      	mov	fp, r1
 80090c4:	3501      	adds	r5, #1
 80090c6:	4628      	mov	r0, r5
 80090c8:	f7f7 fa2c 	bl	8000524 <__aeabi_i2d>
 80090cc:	4652      	mov	r2, sl
 80090ce:	465b      	mov	r3, fp
 80090d0:	f7f7 fa92 	bl	80005f8 <__aeabi_dmul>
 80090d4:	4b82      	ldr	r3, [pc, #520]	; (80092e0 <_dtoa_r+0x628>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	f7f7 f8d8 	bl	800028c <__adddf3>
 80090dc:	46d0      	mov	r8, sl
 80090de:	46d9      	mov	r9, fp
 80090e0:	4682      	mov	sl, r0
 80090e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80090e6:	2e00      	cmp	r6, #0
 80090e8:	d158      	bne.n	800919c <_dtoa_r+0x4e4>
 80090ea:	4b7e      	ldr	r3, [pc, #504]	; (80092e4 <_dtoa_r+0x62c>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 f8c9 	bl	8000288 <__aeabi_dsub>
 80090f6:	4652      	mov	r2, sl
 80090f8:	465b      	mov	r3, fp
 80090fa:	4680      	mov	r8, r0
 80090fc:	4689      	mov	r9, r1
 80090fe:	f7f7 fd0b 	bl	8000b18 <__aeabi_dcmpgt>
 8009102:	2800      	cmp	r0, #0
 8009104:	f040 8295 	bne.w	8009632 <_dtoa_r+0x97a>
 8009108:	4652      	mov	r2, sl
 800910a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800910e:	4640      	mov	r0, r8
 8009110:	4649      	mov	r1, r9
 8009112:	f7f7 fce3 	bl	8000adc <__aeabi_dcmplt>
 8009116:	2800      	cmp	r0, #0
 8009118:	f040 8289 	bne.w	800962e <_dtoa_r+0x976>
 800911c:	ec5b ab19 	vmov	sl, fp, d9
 8009120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009122:	2b00      	cmp	r3, #0
 8009124:	f2c0 8148 	blt.w	80093b8 <_dtoa_r+0x700>
 8009128:	9a00      	ldr	r2, [sp, #0]
 800912a:	2a0e      	cmp	r2, #14
 800912c:	f300 8144 	bgt.w	80093b8 <_dtoa_r+0x700>
 8009130:	4b67      	ldr	r3, [pc, #412]	; (80092d0 <_dtoa_r+0x618>)
 8009132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009136:	e9d3 8900 	ldrd	r8, r9, [r3]
 800913a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800913c:	2b00      	cmp	r3, #0
 800913e:	f280 80d5 	bge.w	80092ec <_dtoa_r+0x634>
 8009142:	9b03      	ldr	r3, [sp, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	f300 80d1 	bgt.w	80092ec <_dtoa_r+0x634>
 800914a:	f040 826f 	bne.w	800962c <_dtoa_r+0x974>
 800914e:	4b65      	ldr	r3, [pc, #404]	; (80092e4 <_dtoa_r+0x62c>)
 8009150:	2200      	movs	r2, #0
 8009152:	4640      	mov	r0, r8
 8009154:	4649      	mov	r1, r9
 8009156:	f7f7 fa4f 	bl	80005f8 <__aeabi_dmul>
 800915a:	4652      	mov	r2, sl
 800915c:	465b      	mov	r3, fp
 800915e:	f7f7 fcd1 	bl	8000b04 <__aeabi_dcmpge>
 8009162:	9e03      	ldr	r6, [sp, #12]
 8009164:	4637      	mov	r7, r6
 8009166:	2800      	cmp	r0, #0
 8009168:	f040 8245 	bne.w	80095f6 <_dtoa_r+0x93e>
 800916c:	9d01      	ldr	r5, [sp, #4]
 800916e:	2331      	movs	r3, #49	; 0x31
 8009170:	f805 3b01 	strb.w	r3, [r5], #1
 8009174:	9b00      	ldr	r3, [sp, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	e240      	b.n	80095fe <_dtoa_r+0x946>
 800917c:	07f2      	lsls	r2, r6, #31
 800917e:	d505      	bpl.n	800918c <_dtoa_r+0x4d4>
 8009180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009184:	f7f7 fa38 	bl	80005f8 <__aeabi_dmul>
 8009188:	3501      	adds	r5, #1
 800918a:	2301      	movs	r3, #1
 800918c:	1076      	asrs	r6, r6, #1
 800918e:	3708      	adds	r7, #8
 8009190:	e777      	b.n	8009082 <_dtoa_r+0x3ca>
 8009192:	2502      	movs	r5, #2
 8009194:	e779      	b.n	800908a <_dtoa_r+0x3d2>
 8009196:	9f00      	ldr	r7, [sp, #0]
 8009198:	9e03      	ldr	r6, [sp, #12]
 800919a:	e794      	b.n	80090c6 <_dtoa_r+0x40e>
 800919c:	9901      	ldr	r1, [sp, #4]
 800919e:	4b4c      	ldr	r3, [pc, #304]	; (80092d0 <_dtoa_r+0x618>)
 80091a0:	4431      	add	r1, r6
 80091a2:	910d      	str	r1, [sp, #52]	; 0x34
 80091a4:	9908      	ldr	r1, [sp, #32]
 80091a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091ae:	2900      	cmp	r1, #0
 80091b0:	d043      	beq.n	800923a <_dtoa_r+0x582>
 80091b2:	494d      	ldr	r1, [pc, #308]	; (80092e8 <_dtoa_r+0x630>)
 80091b4:	2000      	movs	r0, #0
 80091b6:	f7f7 fb49 	bl	800084c <__aeabi_ddiv>
 80091ba:	4652      	mov	r2, sl
 80091bc:	465b      	mov	r3, fp
 80091be:	f7f7 f863 	bl	8000288 <__aeabi_dsub>
 80091c2:	9d01      	ldr	r5, [sp, #4]
 80091c4:	4682      	mov	sl, r0
 80091c6:	468b      	mov	fp, r1
 80091c8:	4649      	mov	r1, r9
 80091ca:	4640      	mov	r0, r8
 80091cc:	f7f7 fcc4 	bl	8000b58 <__aeabi_d2iz>
 80091d0:	4606      	mov	r6, r0
 80091d2:	f7f7 f9a7 	bl	8000524 <__aeabi_i2d>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4640      	mov	r0, r8
 80091dc:	4649      	mov	r1, r9
 80091de:	f7f7 f853 	bl	8000288 <__aeabi_dsub>
 80091e2:	3630      	adds	r6, #48	; 0x30
 80091e4:	f805 6b01 	strb.w	r6, [r5], #1
 80091e8:	4652      	mov	r2, sl
 80091ea:	465b      	mov	r3, fp
 80091ec:	4680      	mov	r8, r0
 80091ee:	4689      	mov	r9, r1
 80091f0:	f7f7 fc74 	bl	8000adc <__aeabi_dcmplt>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d163      	bne.n	80092c0 <_dtoa_r+0x608>
 80091f8:	4642      	mov	r2, r8
 80091fa:	464b      	mov	r3, r9
 80091fc:	4936      	ldr	r1, [pc, #216]	; (80092d8 <_dtoa_r+0x620>)
 80091fe:	2000      	movs	r0, #0
 8009200:	f7f7 f842 	bl	8000288 <__aeabi_dsub>
 8009204:	4652      	mov	r2, sl
 8009206:	465b      	mov	r3, fp
 8009208:	f7f7 fc68 	bl	8000adc <__aeabi_dcmplt>
 800920c:	2800      	cmp	r0, #0
 800920e:	f040 80b5 	bne.w	800937c <_dtoa_r+0x6c4>
 8009212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009214:	429d      	cmp	r5, r3
 8009216:	d081      	beq.n	800911c <_dtoa_r+0x464>
 8009218:	4b30      	ldr	r3, [pc, #192]	; (80092dc <_dtoa_r+0x624>)
 800921a:	2200      	movs	r2, #0
 800921c:	4650      	mov	r0, sl
 800921e:	4659      	mov	r1, fp
 8009220:	f7f7 f9ea 	bl	80005f8 <__aeabi_dmul>
 8009224:	4b2d      	ldr	r3, [pc, #180]	; (80092dc <_dtoa_r+0x624>)
 8009226:	4682      	mov	sl, r0
 8009228:	468b      	mov	fp, r1
 800922a:	4640      	mov	r0, r8
 800922c:	4649      	mov	r1, r9
 800922e:	2200      	movs	r2, #0
 8009230:	f7f7 f9e2 	bl	80005f8 <__aeabi_dmul>
 8009234:	4680      	mov	r8, r0
 8009236:	4689      	mov	r9, r1
 8009238:	e7c6      	b.n	80091c8 <_dtoa_r+0x510>
 800923a:	4650      	mov	r0, sl
 800923c:	4659      	mov	r1, fp
 800923e:	f7f7 f9db 	bl	80005f8 <__aeabi_dmul>
 8009242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009244:	9d01      	ldr	r5, [sp, #4]
 8009246:	930f      	str	r3, [sp, #60]	; 0x3c
 8009248:	4682      	mov	sl, r0
 800924a:	468b      	mov	fp, r1
 800924c:	4649      	mov	r1, r9
 800924e:	4640      	mov	r0, r8
 8009250:	f7f7 fc82 	bl	8000b58 <__aeabi_d2iz>
 8009254:	4606      	mov	r6, r0
 8009256:	f7f7 f965 	bl	8000524 <__aeabi_i2d>
 800925a:	3630      	adds	r6, #48	; 0x30
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	4640      	mov	r0, r8
 8009262:	4649      	mov	r1, r9
 8009264:	f7f7 f810 	bl	8000288 <__aeabi_dsub>
 8009268:	f805 6b01 	strb.w	r6, [r5], #1
 800926c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800926e:	429d      	cmp	r5, r3
 8009270:	4680      	mov	r8, r0
 8009272:	4689      	mov	r9, r1
 8009274:	f04f 0200 	mov.w	r2, #0
 8009278:	d124      	bne.n	80092c4 <_dtoa_r+0x60c>
 800927a:	4b1b      	ldr	r3, [pc, #108]	; (80092e8 <_dtoa_r+0x630>)
 800927c:	4650      	mov	r0, sl
 800927e:	4659      	mov	r1, fp
 8009280:	f7f7 f804 	bl	800028c <__adddf3>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 fc44 	bl	8000b18 <__aeabi_dcmpgt>
 8009290:	2800      	cmp	r0, #0
 8009292:	d173      	bne.n	800937c <_dtoa_r+0x6c4>
 8009294:	4652      	mov	r2, sl
 8009296:	465b      	mov	r3, fp
 8009298:	4913      	ldr	r1, [pc, #76]	; (80092e8 <_dtoa_r+0x630>)
 800929a:	2000      	movs	r0, #0
 800929c:	f7f6 fff4 	bl	8000288 <__aeabi_dsub>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4640      	mov	r0, r8
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7f7 fc18 	bl	8000adc <__aeabi_dcmplt>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	f43f af35 	beq.w	800911c <_dtoa_r+0x464>
 80092b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092b4:	1e6b      	subs	r3, r5, #1
 80092b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80092b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092bc:	2b30      	cmp	r3, #48	; 0x30
 80092be:	d0f8      	beq.n	80092b2 <_dtoa_r+0x5fa>
 80092c0:	9700      	str	r7, [sp, #0]
 80092c2:	e049      	b.n	8009358 <_dtoa_r+0x6a0>
 80092c4:	4b05      	ldr	r3, [pc, #20]	; (80092dc <_dtoa_r+0x624>)
 80092c6:	f7f7 f997 	bl	80005f8 <__aeabi_dmul>
 80092ca:	4680      	mov	r8, r0
 80092cc:	4689      	mov	r9, r1
 80092ce:	e7bd      	b.n	800924c <_dtoa_r+0x594>
 80092d0:	0800b498 	.word	0x0800b498
 80092d4:	0800b470 	.word	0x0800b470
 80092d8:	3ff00000 	.word	0x3ff00000
 80092dc:	40240000 	.word	0x40240000
 80092e0:	401c0000 	.word	0x401c0000
 80092e4:	40140000 	.word	0x40140000
 80092e8:	3fe00000 	.word	0x3fe00000
 80092ec:	9d01      	ldr	r5, [sp, #4]
 80092ee:	4656      	mov	r6, sl
 80092f0:	465f      	mov	r7, fp
 80092f2:	4642      	mov	r2, r8
 80092f4:	464b      	mov	r3, r9
 80092f6:	4630      	mov	r0, r6
 80092f8:	4639      	mov	r1, r7
 80092fa:	f7f7 faa7 	bl	800084c <__aeabi_ddiv>
 80092fe:	f7f7 fc2b 	bl	8000b58 <__aeabi_d2iz>
 8009302:	4682      	mov	sl, r0
 8009304:	f7f7 f90e 	bl	8000524 <__aeabi_i2d>
 8009308:	4642      	mov	r2, r8
 800930a:	464b      	mov	r3, r9
 800930c:	f7f7 f974 	bl	80005f8 <__aeabi_dmul>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4630      	mov	r0, r6
 8009316:	4639      	mov	r1, r7
 8009318:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800931c:	f7f6 ffb4 	bl	8000288 <__aeabi_dsub>
 8009320:	f805 6b01 	strb.w	r6, [r5], #1
 8009324:	9e01      	ldr	r6, [sp, #4]
 8009326:	9f03      	ldr	r7, [sp, #12]
 8009328:	1bae      	subs	r6, r5, r6
 800932a:	42b7      	cmp	r7, r6
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	d135      	bne.n	800939e <_dtoa_r+0x6e6>
 8009332:	f7f6 ffab 	bl	800028c <__adddf3>
 8009336:	4642      	mov	r2, r8
 8009338:	464b      	mov	r3, r9
 800933a:	4606      	mov	r6, r0
 800933c:	460f      	mov	r7, r1
 800933e:	f7f7 fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 8009342:	b9d0      	cbnz	r0, 800937a <_dtoa_r+0x6c2>
 8009344:	4642      	mov	r2, r8
 8009346:	464b      	mov	r3, r9
 8009348:	4630      	mov	r0, r6
 800934a:	4639      	mov	r1, r7
 800934c:	f7f7 fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009350:	b110      	cbz	r0, 8009358 <_dtoa_r+0x6a0>
 8009352:	f01a 0f01 	tst.w	sl, #1
 8009356:	d110      	bne.n	800937a <_dtoa_r+0x6c2>
 8009358:	4620      	mov	r0, r4
 800935a:	ee18 1a10 	vmov	r1, s16
 800935e:	f000 fd05 	bl	8009d6c <_Bfree>
 8009362:	2300      	movs	r3, #0
 8009364:	9800      	ldr	r0, [sp, #0]
 8009366:	702b      	strb	r3, [r5, #0]
 8009368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800936a:	3001      	adds	r0, #1
 800936c:	6018      	str	r0, [r3, #0]
 800936e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009370:	2b00      	cmp	r3, #0
 8009372:	f43f acf1 	beq.w	8008d58 <_dtoa_r+0xa0>
 8009376:	601d      	str	r5, [r3, #0]
 8009378:	e4ee      	b.n	8008d58 <_dtoa_r+0xa0>
 800937a:	9f00      	ldr	r7, [sp, #0]
 800937c:	462b      	mov	r3, r5
 800937e:	461d      	mov	r5, r3
 8009380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009384:	2a39      	cmp	r2, #57	; 0x39
 8009386:	d106      	bne.n	8009396 <_dtoa_r+0x6de>
 8009388:	9a01      	ldr	r2, [sp, #4]
 800938a:	429a      	cmp	r2, r3
 800938c:	d1f7      	bne.n	800937e <_dtoa_r+0x6c6>
 800938e:	9901      	ldr	r1, [sp, #4]
 8009390:	2230      	movs	r2, #48	; 0x30
 8009392:	3701      	adds	r7, #1
 8009394:	700a      	strb	r2, [r1, #0]
 8009396:	781a      	ldrb	r2, [r3, #0]
 8009398:	3201      	adds	r2, #1
 800939a:	701a      	strb	r2, [r3, #0]
 800939c:	e790      	b.n	80092c0 <_dtoa_r+0x608>
 800939e:	4ba6      	ldr	r3, [pc, #664]	; (8009638 <_dtoa_r+0x980>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	f7f7 f929 	bl	80005f8 <__aeabi_dmul>
 80093a6:	2200      	movs	r2, #0
 80093a8:	2300      	movs	r3, #0
 80093aa:	4606      	mov	r6, r0
 80093ac:	460f      	mov	r7, r1
 80093ae:	f7f7 fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d09d      	beq.n	80092f2 <_dtoa_r+0x63a>
 80093b6:	e7cf      	b.n	8009358 <_dtoa_r+0x6a0>
 80093b8:	9a08      	ldr	r2, [sp, #32]
 80093ba:	2a00      	cmp	r2, #0
 80093bc:	f000 80d7 	beq.w	800956e <_dtoa_r+0x8b6>
 80093c0:	9a06      	ldr	r2, [sp, #24]
 80093c2:	2a01      	cmp	r2, #1
 80093c4:	f300 80ba 	bgt.w	800953c <_dtoa_r+0x884>
 80093c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093ca:	2a00      	cmp	r2, #0
 80093cc:	f000 80b2 	beq.w	8009534 <_dtoa_r+0x87c>
 80093d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093d4:	9e07      	ldr	r6, [sp, #28]
 80093d6:	9d04      	ldr	r5, [sp, #16]
 80093d8:	9a04      	ldr	r2, [sp, #16]
 80093da:	441a      	add	r2, r3
 80093dc:	9204      	str	r2, [sp, #16]
 80093de:	9a05      	ldr	r2, [sp, #20]
 80093e0:	2101      	movs	r1, #1
 80093e2:	441a      	add	r2, r3
 80093e4:	4620      	mov	r0, r4
 80093e6:	9205      	str	r2, [sp, #20]
 80093e8:	f000 fd78 	bl	8009edc <__i2b>
 80093ec:	4607      	mov	r7, r0
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	dd0c      	ble.n	800940c <_dtoa_r+0x754>
 80093f2:	9b05      	ldr	r3, [sp, #20]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	dd09      	ble.n	800940c <_dtoa_r+0x754>
 80093f8:	42ab      	cmp	r3, r5
 80093fa:	9a04      	ldr	r2, [sp, #16]
 80093fc:	bfa8      	it	ge
 80093fe:	462b      	movge	r3, r5
 8009400:	1ad2      	subs	r2, r2, r3
 8009402:	9204      	str	r2, [sp, #16]
 8009404:	9a05      	ldr	r2, [sp, #20]
 8009406:	1aed      	subs	r5, r5, r3
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	9305      	str	r3, [sp, #20]
 800940c:	9b07      	ldr	r3, [sp, #28]
 800940e:	b31b      	cbz	r3, 8009458 <_dtoa_r+0x7a0>
 8009410:	9b08      	ldr	r3, [sp, #32]
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 80af 	beq.w	8009576 <_dtoa_r+0x8be>
 8009418:	2e00      	cmp	r6, #0
 800941a:	dd13      	ble.n	8009444 <_dtoa_r+0x78c>
 800941c:	4639      	mov	r1, r7
 800941e:	4632      	mov	r2, r6
 8009420:	4620      	mov	r0, r4
 8009422:	f000 fe1b 	bl	800a05c <__pow5mult>
 8009426:	ee18 2a10 	vmov	r2, s16
 800942a:	4601      	mov	r1, r0
 800942c:	4607      	mov	r7, r0
 800942e:	4620      	mov	r0, r4
 8009430:	f000 fd6a 	bl	8009f08 <__multiply>
 8009434:	ee18 1a10 	vmov	r1, s16
 8009438:	4680      	mov	r8, r0
 800943a:	4620      	mov	r0, r4
 800943c:	f000 fc96 	bl	8009d6c <_Bfree>
 8009440:	ee08 8a10 	vmov	s16, r8
 8009444:	9b07      	ldr	r3, [sp, #28]
 8009446:	1b9a      	subs	r2, r3, r6
 8009448:	d006      	beq.n	8009458 <_dtoa_r+0x7a0>
 800944a:	ee18 1a10 	vmov	r1, s16
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fe04 	bl	800a05c <__pow5mult>
 8009454:	ee08 0a10 	vmov	s16, r0
 8009458:	2101      	movs	r1, #1
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fd3e 	bl	8009edc <__i2b>
 8009460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009462:	2b00      	cmp	r3, #0
 8009464:	4606      	mov	r6, r0
 8009466:	f340 8088 	ble.w	800957a <_dtoa_r+0x8c2>
 800946a:	461a      	mov	r2, r3
 800946c:	4601      	mov	r1, r0
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fdf4 	bl	800a05c <__pow5mult>
 8009474:	9b06      	ldr	r3, [sp, #24]
 8009476:	2b01      	cmp	r3, #1
 8009478:	4606      	mov	r6, r0
 800947a:	f340 8081 	ble.w	8009580 <_dtoa_r+0x8c8>
 800947e:	f04f 0800 	mov.w	r8, #0
 8009482:	6933      	ldr	r3, [r6, #16]
 8009484:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009488:	6918      	ldr	r0, [r3, #16]
 800948a:	f000 fcd7 	bl	8009e3c <__hi0bits>
 800948e:	f1c0 0020 	rsb	r0, r0, #32
 8009492:	9b05      	ldr	r3, [sp, #20]
 8009494:	4418      	add	r0, r3
 8009496:	f010 001f 	ands.w	r0, r0, #31
 800949a:	f000 8092 	beq.w	80095c2 <_dtoa_r+0x90a>
 800949e:	f1c0 0320 	rsb	r3, r0, #32
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	f340 808a 	ble.w	80095bc <_dtoa_r+0x904>
 80094a8:	f1c0 001c 	rsb	r0, r0, #28
 80094ac:	9b04      	ldr	r3, [sp, #16]
 80094ae:	4403      	add	r3, r0
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	9b05      	ldr	r3, [sp, #20]
 80094b4:	4403      	add	r3, r0
 80094b6:	4405      	add	r5, r0
 80094b8:	9305      	str	r3, [sp, #20]
 80094ba:	9b04      	ldr	r3, [sp, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	dd07      	ble.n	80094d0 <_dtoa_r+0x818>
 80094c0:	ee18 1a10 	vmov	r1, s16
 80094c4:	461a      	mov	r2, r3
 80094c6:	4620      	mov	r0, r4
 80094c8:	f000 fe22 	bl	800a110 <__lshift>
 80094cc:	ee08 0a10 	vmov	s16, r0
 80094d0:	9b05      	ldr	r3, [sp, #20]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	dd05      	ble.n	80094e2 <_dtoa_r+0x82a>
 80094d6:	4631      	mov	r1, r6
 80094d8:	461a      	mov	r2, r3
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fe18 	bl	800a110 <__lshift>
 80094e0:	4606      	mov	r6, r0
 80094e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d06e      	beq.n	80095c6 <_dtoa_r+0x90e>
 80094e8:	ee18 0a10 	vmov	r0, s16
 80094ec:	4631      	mov	r1, r6
 80094ee:	f000 fe7f 	bl	800a1f0 <__mcmp>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	da67      	bge.n	80095c6 <_dtoa_r+0x90e>
 80094f6:	9b00      	ldr	r3, [sp, #0]
 80094f8:	3b01      	subs	r3, #1
 80094fa:	ee18 1a10 	vmov	r1, s16
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	220a      	movs	r2, #10
 8009502:	2300      	movs	r3, #0
 8009504:	4620      	mov	r0, r4
 8009506:	f000 fc53 	bl	8009db0 <__multadd>
 800950a:	9b08      	ldr	r3, [sp, #32]
 800950c:	ee08 0a10 	vmov	s16, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 81b1 	beq.w	8009878 <_dtoa_r+0xbc0>
 8009516:	2300      	movs	r3, #0
 8009518:	4639      	mov	r1, r7
 800951a:	220a      	movs	r2, #10
 800951c:	4620      	mov	r0, r4
 800951e:	f000 fc47 	bl	8009db0 <__multadd>
 8009522:	9b02      	ldr	r3, [sp, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	4607      	mov	r7, r0
 8009528:	f300 808e 	bgt.w	8009648 <_dtoa_r+0x990>
 800952c:	9b06      	ldr	r3, [sp, #24]
 800952e:	2b02      	cmp	r3, #2
 8009530:	dc51      	bgt.n	80095d6 <_dtoa_r+0x91e>
 8009532:	e089      	b.n	8009648 <_dtoa_r+0x990>
 8009534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800953a:	e74b      	b.n	80093d4 <_dtoa_r+0x71c>
 800953c:	9b03      	ldr	r3, [sp, #12]
 800953e:	1e5e      	subs	r6, r3, #1
 8009540:	9b07      	ldr	r3, [sp, #28]
 8009542:	42b3      	cmp	r3, r6
 8009544:	bfbf      	itttt	lt
 8009546:	9b07      	ldrlt	r3, [sp, #28]
 8009548:	9607      	strlt	r6, [sp, #28]
 800954a:	1af2      	sublt	r2, r6, r3
 800954c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800954e:	bfb6      	itet	lt
 8009550:	189b      	addlt	r3, r3, r2
 8009552:	1b9e      	subge	r6, r3, r6
 8009554:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009556:	9b03      	ldr	r3, [sp, #12]
 8009558:	bfb8      	it	lt
 800955a:	2600      	movlt	r6, #0
 800955c:	2b00      	cmp	r3, #0
 800955e:	bfb7      	itett	lt
 8009560:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009564:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009568:	1a9d      	sublt	r5, r3, r2
 800956a:	2300      	movlt	r3, #0
 800956c:	e734      	b.n	80093d8 <_dtoa_r+0x720>
 800956e:	9e07      	ldr	r6, [sp, #28]
 8009570:	9d04      	ldr	r5, [sp, #16]
 8009572:	9f08      	ldr	r7, [sp, #32]
 8009574:	e73b      	b.n	80093ee <_dtoa_r+0x736>
 8009576:	9a07      	ldr	r2, [sp, #28]
 8009578:	e767      	b.n	800944a <_dtoa_r+0x792>
 800957a:	9b06      	ldr	r3, [sp, #24]
 800957c:	2b01      	cmp	r3, #1
 800957e:	dc18      	bgt.n	80095b2 <_dtoa_r+0x8fa>
 8009580:	f1ba 0f00 	cmp.w	sl, #0
 8009584:	d115      	bne.n	80095b2 <_dtoa_r+0x8fa>
 8009586:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800958a:	b993      	cbnz	r3, 80095b2 <_dtoa_r+0x8fa>
 800958c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009590:	0d1b      	lsrs	r3, r3, #20
 8009592:	051b      	lsls	r3, r3, #20
 8009594:	b183      	cbz	r3, 80095b8 <_dtoa_r+0x900>
 8009596:	9b04      	ldr	r3, [sp, #16]
 8009598:	3301      	adds	r3, #1
 800959a:	9304      	str	r3, [sp, #16]
 800959c:	9b05      	ldr	r3, [sp, #20]
 800959e:	3301      	adds	r3, #1
 80095a0:	9305      	str	r3, [sp, #20]
 80095a2:	f04f 0801 	mov.w	r8, #1
 80095a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f47f af6a 	bne.w	8009482 <_dtoa_r+0x7ca>
 80095ae:	2001      	movs	r0, #1
 80095b0:	e76f      	b.n	8009492 <_dtoa_r+0x7da>
 80095b2:	f04f 0800 	mov.w	r8, #0
 80095b6:	e7f6      	b.n	80095a6 <_dtoa_r+0x8ee>
 80095b8:	4698      	mov	r8, r3
 80095ba:	e7f4      	b.n	80095a6 <_dtoa_r+0x8ee>
 80095bc:	f43f af7d 	beq.w	80094ba <_dtoa_r+0x802>
 80095c0:	4618      	mov	r0, r3
 80095c2:	301c      	adds	r0, #28
 80095c4:	e772      	b.n	80094ac <_dtoa_r+0x7f4>
 80095c6:	9b03      	ldr	r3, [sp, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	dc37      	bgt.n	800963c <_dtoa_r+0x984>
 80095cc:	9b06      	ldr	r3, [sp, #24]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	dd34      	ble.n	800963c <_dtoa_r+0x984>
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	9302      	str	r3, [sp, #8]
 80095d6:	9b02      	ldr	r3, [sp, #8]
 80095d8:	b96b      	cbnz	r3, 80095f6 <_dtoa_r+0x93e>
 80095da:	4631      	mov	r1, r6
 80095dc:	2205      	movs	r2, #5
 80095de:	4620      	mov	r0, r4
 80095e0:	f000 fbe6 	bl	8009db0 <__multadd>
 80095e4:	4601      	mov	r1, r0
 80095e6:	4606      	mov	r6, r0
 80095e8:	ee18 0a10 	vmov	r0, s16
 80095ec:	f000 fe00 	bl	800a1f0 <__mcmp>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	f73f adbb 	bgt.w	800916c <_dtoa_r+0x4b4>
 80095f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f8:	9d01      	ldr	r5, [sp, #4]
 80095fa:	43db      	mvns	r3, r3
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	f04f 0800 	mov.w	r8, #0
 8009602:	4631      	mov	r1, r6
 8009604:	4620      	mov	r0, r4
 8009606:	f000 fbb1 	bl	8009d6c <_Bfree>
 800960a:	2f00      	cmp	r7, #0
 800960c:	f43f aea4 	beq.w	8009358 <_dtoa_r+0x6a0>
 8009610:	f1b8 0f00 	cmp.w	r8, #0
 8009614:	d005      	beq.n	8009622 <_dtoa_r+0x96a>
 8009616:	45b8      	cmp	r8, r7
 8009618:	d003      	beq.n	8009622 <_dtoa_r+0x96a>
 800961a:	4641      	mov	r1, r8
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fba5 	bl	8009d6c <_Bfree>
 8009622:	4639      	mov	r1, r7
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fba1 	bl	8009d6c <_Bfree>
 800962a:	e695      	b.n	8009358 <_dtoa_r+0x6a0>
 800962c:	2600      	movs	r6, #0
 800962e:	4637      	mov	r7, r6
 8009630:	e7e1      	b.n	80095f6 <_dtoa_r+0x93e>
 8009632:	9700      	str	r7, [sp, #0]
 8009634:	4637      	mov	r7, r6
 8009636:	e599      	b.n	800916c <_dtoa_r+0x4b4>
 8009638:	40240000 	.word	0x40240000
 800963c:	9b08      	ldr	r3, [sp, #32]
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 80ca 	beq.w	80097d8 <_dtoa_r+0xb20>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	9302      	str	r3, [sp, #8]
 8009648:	2d00      	cmp	r5, #0
 800964a:	dd05      	ble.n	8009658 <_dtoa_r+0x9a0>
 800964c:	4639      	mov	r1, r7
 800964e:	462a      	mov	r2, r5
 8009650:	4620      	mov	r0, r4
 8009652:	f000 fd5d 	bl	800a110 <__lshift>
 8009656:	4607      	mov	r7, r0
 8009658:	f1b8 0f00 	cmp.w	r8, #0
 800965c:	d05b      	beq.n	8009716 <_dtoa_r+0xa5e>
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fb43 	bl	8009cec <_Balloc>
 8009666:	4605      	mov	r5, r0
 8009668:	b928      	cbnz	r0, 8009676 <_dtoa_r+0x9be>
 800966a:	4b87      	ldr	r3, [pc, #540]	; (8009888 <_dtoa_r+0xbd0>)
 800966c:	4602      	mov	r2, r0
 800966e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009672:	f7ff bb3b 	b.w	8008cec <_dtoa_r+0x34>
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	3202      	adds	r2, #2
 800967a:	0092      	lsls	r2, r2, #2
 800967c:	f107 010c 	add.w	r1, r7, #12
 8009680:	300c      	adds	r0, #12
 8009682:	f7fe fcb7 	bl	8007ff4 <memcpy>
 8009686:	2201      	movs	r2, #1
 8009688:	4629      	mov	r1, r5
 800968a:	4620      	mov	r0, r4
 800968c:	f000 fd40 	bl	800a110 <__lshift>
 8009690:	9b01      	ldr	r3, [sp, #4]
 8009692:	f103 0901 	add.w	r9, r3, #1
 8009696:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800969a:	4413      	add	r3, r2
 800969c:	9305      	str	r3, [sp, #20]
 800969e:	f00a 0301 	and.w	r3, sl, #1
 80096a2:	46b8      	mov	r8, r7
 80096a4:	9304      	str	r3, [sp, #16]
 80096a6:	4607      	mov	r7, r0
 80096a8:	4631      	mov	r1, r6
 80096aa:	ee18 0a10 	vmov	r0, s16
 80096ae:	f7ff fa77 	bl	8008ba0 <quorem>
 80096b2:	4641      	mov	r1, r8
 80096b4:	9002      	str	r0, [sp, #8]
 80096b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096ba:	ee18 0a10 	vmov	r0, s16
 80096be:	f000 fd97 	bl	800a1f0 <__mcmp>
 80096c2:	463a      	mov	r2, r7
 80096c4:	9003      	str	r0, [sp, #12]
 80096c6:	4631      	mov	r1, r6
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 fdad 	bl	800a228 <__mdiff>
 80096ce:	68c2      	ldr	r2, [r0, #12]
 80096d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80096d4:	4605      	mov	r5, r0
 80096d6:	bb02      	cbnz	r2, 800971a <_dtoa_r+0xa62>
 80096d8:	4601      	mov	r1, r0
 80096da:	ee18 0a10 	vmov	r0, s16
 80096de:	f000 fd87 	bl	800a1f0 <__mcmp>
 80096e2:	4602      	mov	r2, r0
 80096e4:	4629      	mov	r1, r5
 80096e6:	4620      	mov	r0, r4
 80096e8:	9207      	str	r2, [sp, #28]
 80096ea:	f000 fb3f 	bl	8009d6c <_Bfree>
 80096ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80096f2:	ea43 0102 	orr.w	r1, r3, r2
 80096f6:	9b04      	ldr	r3, [sp, #16]
 80096f8:	430b      	orrs	r3, r1
 80096fa:	464d      	mov	r5, r9
 80096fc:	d10f      	bne.n	800971e <_dtoa_r+0xa66>
 80096fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009702:	d02a      	beq.n	800975a <_dtoa_r+0xaa2>
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	dd02      	ble.n	8009710 <_dtoa_r+0xa58>
 800970a:	9b02      	ldr	r3, [sp, #8]
 800970c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009710:	f88b a000 	strb.w	sl, [fp]
 8009714:	e775      	b.n	8009602 <_dtoa_r+0x94a>
 8009716:	4638      	mov	r0, r7
 8009718:	e7ba      	b.n	8009690 <_dtoa_r+0x9d8>
 800971a:	2201      	movs	r2, #1
 800971c:	e7e2      	b.n	80096e4 <_dtoa_r+0xa2c>
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	db04      	blt.n	800972e <_dtoa_r+0xa76>
 8009724:	9906      	ldr	r1, [sp, #24]
 8009726:	430b      	orrs	r3, r1
 8009728:	9904      	ldr	r1, [sp, #16]
 800972a:	430b      	orrs	r3, r1
 800972c:	d122      	bne.n	8009774 <_dtoa_r+0xabc>
 800972e:	2a00      	cmp	r2, #0
 8009730:	ddee      	ble.n	8009710 <_dtoa_r+0xa58>
 8009732:	ee18 1a10 	vmov	r1, s16
 8009736:	2201      	movs	r2, #1
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fce9 	bl	800a110 <__lshift>
 800973e:	4631      	mov	r1, r6
 8009740:	ee08 0a10 	vmov	s16, r0
 8009744:	f000 fd54 	bl	800a1f0 <__mcmp>
 8009748:	2800      	cmp	r0, #0
 800974a:	dc03      	bgt.n	8009754 <_dtoa_r+0xa9c>
 800974c:	d1e0      	bne.n	8009710 <_dtoa_r+0xa58>
 800974e:	f01a 0f01 	tst.w	sl, #1
 8009752:	d0dd      	beq.n	8009710 <_dtoa_r+0xa58>
 8009754:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009758:	d1d7      	bne.n	800970a <_dtoa_r+0xa52>
 800975a:	2339      	movs	r3, #57	; 0x39
 800975c:	f88b 3000 	strb.w	r3, [fp]
 8009760:	462b      	mov	r3, r5
 8009762:	461d      	mov	r5, r3
 8009764:	3b01      	subs	r3, #1
 8009766:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800976a:	2a39      	cmp	r2, #57	; 0x39
 800976c:	d071      	beq.n	8009852 <_dtoa_r+0xb9a>
 800976e:	3201      	adds	r2, #1
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	e746      	b.n	8009602 <_dtoa_r+0x94a>
 8009774:	2a00      	cmp	r2, #0
 8009776:	dd07      	ble.n	8009788 <_dtoa_r+0xad0>
 8009778:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800977c:	d0ed      	beq.n	800975a <_dtoa_r+0xaa2>
 800977e:	f10a 0301 	add.w	r3, sl, #1
 8009782:	f88b 3000 	strb.w	r3, [fp]
 8009786:	e73c      	b.n	8009602 <_dtoa_r+0x94a>
 8009788:	9b05      	ldr	r3, [sp, #20]
 800978a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800978e:	4599      	cmp	r9, r3
 8009790:	d047      	beq.n	8009822 <_dtoa_r+0xb6a>
 8009792:	ee18 1a10 	vmov	r1, s16
 8009796:	2300      	movs	r3, #0
 8009798:	220a      	movs	r2, #10
 800979a:	4620      	mov	r0, r4
 800979c:	f000 fb08 	bl	8009db0 <__multadd>
 80097a0:	45b8      	cmp	r8, r7
 80097a2:	ee08 0a10 	vmov	s16, r0
 80097a6:	f04f 0300 	mov.w	r3, #0
 80097aa:	f04f 020a 	mov.w	r2, #10
 80097ae:	4641      	mov	r1, r8
 80097b0:	4620      	mov	r0, r4
 80097b2:	d106      	bne.n	80097c2 <_dtoa_r+0xb0a>
 80097b4:	f000 fafc 	bl	8009db0 <__multadd>
 80097b8:	4680      	mov	r8, r0
 80097ba:	4607      	mov	r7, r0
 80097bc:	f109 0901 	add.w	r9, r9, #1
 80097c0:	e772      	b.n	80096a8 <_dtoa_r+0x9f0>
 80097c2:	f000 faf5 	bl	8009db0 <__multadd>
 80097c6:	4639      	mov	r1, r7
 80097c8:	4680      	mov	r8, r0
 80097ca:	2300      	movs	r3, #0
 80097cc:	220a      	movs	r2, #10
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 faee 	bl	8009db0 <__multadd>
 80097d4:	4607      	mov	r7, r0
 80097d6:	e7f1      	b.n	80097bc <_dtoa_r+0xb04>
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	9302      	str	r3, [sp, #8]
 80097dc:	9d01      	ldr	r5, [sp, #4]
 80097de:	ee18 0a10 	vmov	r0, s16
 80097e2:	4631      	mov	r1, r6
 80097e4:	f7ff f9dc 	bl	8008ba0 <quorem>
 80097e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80097ec:	9b01      	ldr	r3, [sp, #4]
 80097ee:	f805 ab01 	strb.w	sl, [r5], #1
 80097f2:	1aea      	subs	r2, r5, r3
 80097f4:	9b02      	ldr	r3, [sp, #8]
 80097f6:	4293      	cmp	r3, r2
 80097f8:	dd09      	ble.n	800980e <_dtoa_r+0xb56>
 80097fa:	ee18 1a10 	vmov	r1, s16
 80097fe:	2300      	movs	r3, #0
 8009800:	220a      	movs	r2, #10
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fad4 	bl	8009db0 <__multadd>
 8009808:	ee08 0a10 	vmov	s16, r0
 800980c:	e7e7      	b.n	80097de <_dtoa_r+0xb26>
 800980e:	9b02      	ldr	r3, [sp, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	bfc8      	it	gt
 8009814:	461d      	movgt	r5, r3
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	bfd8      	it	le
 800981a:	2501      	movle	r5, #1
 800981c:	441d      	add	r5, r3
 800981e:	f04f 0800 	mov.w	r8, #0
 8009822:	ee18 1a10 	vmov	r1, s16
 8009826:	2201      	movs	r2, #1
 8009828:	4620      	mov	r0, r4
 800982a:	f000 fc71 	bl	800a110 <__lshift>
 800982e:	4631      	mov	r1, r6
 8009830:	ee08 0a10 	vmov	s16, r0
 8009834:	f000 fcdc 	bl	800a1f0 <__mcmp>
 8009838:	2800      	cmp	r0, #0
 800983a:	dc91      	bgt.n	8009760 <_dtoa_r+0xaa8>
 800983c:	d102      	bne.n	8009844 <_dtoa_r+0xb8c>
 800983e:	f01a 0f01 	tst.w	sl, #1
 8009842:	d18d      	bne.n	8009760 <_dtoa_r+0xaa8>
 8009844:	462b      	mov	r3, r5
 8009846:	461d      	mov	r5, r3
 8009848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800984c:	2a30      	cmp	r2, #48	; 0x30
 800984e:	d0fa      	beq.n	8009846 <_dtoa_r+0xb8e>
 8009850:	e6d7      	b.n	8009602 <_dtoa_r+0x94a>
 8009852:	9a01      	ldr	r2, [sp, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	d184      	bne.n	8009762 <_dtoa_r+0xaaa>
 8009858:	9b00      	ldr	r3, [sp, #0]
 800985a:	3301      	adds	r3, #1
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	2331      	movs	r3, #49	; 0x31
 8009860:	7013      	strb	r3, [r2, #0]
 8009862:	e6ce      	b.n	8009602 <_dtoa_r+0x94a>
 8009864:	4b09      	ldr	r3, [pc, #36]	; (800988c <_dtoa_r+0xbd4>)
 8009866:	f7ff ba95 	b.w	8008d94 <_dtoa_r+0xdc>
 800986a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800986c:	2b00      	cmp	r3, #0
 800986e:	f47f aa6e 	bne.w	8008d4e <_dtoa_r+0x96>
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <_dtoa_r+0xbd8>)
 8009874:	f7ff ba8e 	b.w	8008d94 <_dtoa_r+0xdc>
 8009878:	9b02      	ldr	r3, [sp, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	dcae      	bgt.n	80097dc <_dtoa_r+0xb24>
 800987e:	9b06      	ldr	r3, [sp, #24]
 8009880:	2b02      	cmp	r3, #2
 8009882:	f73f aea8 	bgt.w	80095d6 <_dtoa_r+0x91e>
 8009886:	e7a9      	b.n	80097dc <_dtoa_r+0xb24>
 8009888:	0800b3a3 	.word	0x0800b3a3
 800988c:	0800b300 	.word	0x0800b300
 8009890:	0800b324 	.word	0x0800b324

08009894 <__sflush_r>:
 8009894:	898a      	ldrh	r2, [r1, #12]
 8009896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989a:	4605      	mov	r5, r0
 800989c:	0710      	lsls	r0, r2, #28
 800989e:	460c      	mov	r4, r1
 80098a0:	d458      	bmi.n	8009954 <__sflush_r+0xc0>
 80098a2:	684b      	ldr	r3, [r1, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dc05      	bgt.n	80098b4 <__sflush_r+0x20>
 80098a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	dc02      	bgt.n	80098b4 <__sflush_r+0x20>
 80098ae:	2000      	movs	r0, #0
 80098b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098b6:	2e00      	cmp	r6, #0
 80098b8:	d0f9      	beq.n	80098ae <__sflush_r+0x1a>
 80098ba:	2300      	movs	r3, #0
 80098bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098c0:	682f      	ldr	r7, [r5, #0]
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	d032      	beq.n	800992c <__sflush_r+0x98>
 80098c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	075a      	lsls	r2, r3, #29
 80098cc:	d505      	bpl.n	80098da <__sflush_r+0x46>
 80098ce:	6863      	ldr	r3, [r4, #4]
 80098d0:	1ac0      	subs	r0, r0, r3
 80098d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098d4:	b10b      	cbz	r3, 80098da <__sflush_r+0x46>
 80098d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098d8:	1ac0      	subs	r0, r0, r3
 80098da:	2300      	movs	r3, #0
 80098dc:	4602      	mov	r2, r0
 80098de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098e0:	6a21      	ldr	r1, [r4, #32]
 80098e2:	4628      	mov	r0, r5
 80098e4:	47b0      	blx	r6
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	d106      	bne.n	80098fa <__sflush_r+0x66>
 80098ec:	6829      	ldr	r1, [r5, #0]
 80098ee:	291d      	cmp	r1, #29
 80098f0:	d82c      	bhi.n	800994c <__sflush_r+0xb8>
 80098f2:	4a2a      	ldr	r2, [pc, #168]	; (800999c <__sflush_r+0x108>)
 80098f4:	40ca      	lsrs	r2, r1
 80098f6:	07d6      	lsls	r6, r2, #31
 80098f8:	d528      	bpl.n	800994c <__sflush_r+0xb8>
 80098fa:	2200      	movs	r2, #0
 80098fc:	6062      	str	r2, [r4, #4]
 80098fe:	04d9      	lsls	r1, r3, #19
 8009900:	6922      	ldr	r2, [r4, #16]
 8009902:	6022      	str	r2, [r4, #0]
 8009904:	d504      	bpl.n	8009910 <__sflush_r+0x7c>
 8009906:	1c42      	adds	r2, r0, #1
 8009908:	d101      	bne.n	800990e <__sflush_r+0x7a>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	b903      	cbnz	r3, 8009910 <__sflush_r+0x7c>
 800990e:	6560      	str	r0, [r4, #84]	; 0x54
 8009910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009912:	602f      	str	r7, [r5, #0]
 8009914:	2900      	cmp	r1, #0
 8009916:	d0ca      	beq.n	80098ae <__sflush_r+0x1a>
 8009918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800991c:	4299      	cmp	r1, r3
 800991e:	d002      	beq.n	8009926 <__sflush_r+0x92>
 8009920:	4628      	mov	r0, r5
 8009922:	f000 fd7d 	bl	800a420 <_free_r>
 8009926:	2000      	movs	r0, #0
 8009928:	6360      	str	r0, [r4, #52]	; 0x34
 800992a:	e7c1      	b.n	80098b0 <__sflush_r+0x1c>
 800992c:	6a21      	ldr	r1, [r4, #32]
 800992e:	2301      	movs	r3, #1
 8009930:	4628      	mov	r0, r5
 8009932:	47b0      	blx	r6
 8009934:	1c41      	adds	r1, r0, #1
 8009936:	d1c7      	bne.n	80098c8 <__sflush_r+0x34>
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0c4      	beq.n	80098c8 <__sflush_r+0x34>
 800993e:	2b1d      	cmp	r3, #29
 8009940:	d001      	beq.n	8009946 <__sflush_r+0xb2>
 8009942:	2b16      	cmp	r3, #22
 8009944:	d101      	bne.n	800994a <__sflush_r+0xb6>
 8009946:	602f      	str	r7, [r5, #0]
 8009948:	e7b1      	b.n	80098ae <__sflush_r+0x1a>
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009950:	81a3      	strh	r3, [r4, #12]
 8009952:	e7ad      	b.n	80098b0 <__sflush_r+0x1c>
 8009954:	690f      	ldr	r7, [r1, #16]
 8009956:	2f00      	cmp	r7, #0
 8009958:	d0a9      	beq.n	80098ae <__sflush_r+0x1a>
 800995a:	0793      	lsls	r3, r2, #30
 800995c:	680e      	ldr	r6, [r1, #0]
 800995e:	bf08      	it	eq
 8009960:	694b      	ldreq	r3, [r1, #20]
 8009962:	600f      	str	r7, [r1, #0]
 8009964:	bf18      	it	ne
 8009966:	2300      	movne	r3, #0
 8009968:	eba6 0807 	sub.w	r8, r6, r7
 800996c:	608b      	str	r3, [r1, #8]
 800996e:	f1b8 0f00 	cmp.w	r8, #0
 8009972:	dd9c      	ble.n	80098ae <__sflush_r+0x1a>
 8009974:	6a21      	ldr	r1, [r4, #32]
 8009976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009978:	4643      	mov	r3, r8
 800997a:	463a      	mov	r2, r7
 800997c:	4628      	mov	r0, r5
 800997e:	47b0      	blx	r6
 8009980:	2800      	cmp	r0, #0
 8009982:	dc06      	bgt.n	8009992 <__sflush_r+0xfe>
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800998a:	81a3      	strh	r3, [r4, #12]
 800998c:	f04f 30ff 	mov.w	r0, #4294967295
 8009990:	e78e      	b.n	80098b0 <__sflush_r+0x1c>
 8009992:	4407      	add	r7, r0
 8009994:	eba8 0800 	sub.w	r8, r8, r0
 8009998:	e7e9      	b.n	800996e <__sflush_r+0xda>
 800999a:	bf00      	nop
 800999c:	20400001 	.word	0x20400001

080099a0 <_fflush_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	690b      	ldr	r3, [r1, #16]
 80099a4:	4605      	mov	r5, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	b913      	cbnz	r3, 80099b0 <_fflush_r+0x10>
 80099aa:	2500      	movs	r5, #0
 80099ac:	4628      	mov	r0, r5
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	b118      	cbz	r0, 80099ba <_fflush_r+0x1a>
 80099b2:	6983      	ldr	r3, [r0, #24]
 80099b4:	b90b      	cbnz	r3, 80099ba <_fflush_r+0x1a>
 80099b6:	f000 f887 	bl	8009ac8 <__sinit>
 80099ba:	4b14      	ldr	r3, [pc, #80]	; (8009a0c <_fflush_r+0x6c>)
 80099bc:	429c      	cmp	r4, r3
 80099be:	d11b      	bne.n	80099f8 <_fflush_r+0x58>
 80099c0:	686c      	ldr	r4, [r5, #4]
 80099c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0ef      	beq.n	80099aa <_fflush_r+0xa>
 80099ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099cc:	07d0      	lsls	r0, r2, #31
 80099ce:	d404      	bmi.n	80099da <_fflush_r+0x3a>
 80099d0:	0599      	lsls	r1, r3, #22
 80099d2:	d402      	bmi.n	80099da <_fflush_r+0x3a>
 80099d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099d6:	f000 f91a 	bl	8009c0e <__retarget_lock_acquire_recursive>
 80099da:	4628      	mov	r0, r5
 80099dc:	4621      	mov	r1, r4
 80099de:	f7ff ff59 	bl	8009894 <__sflush_r>
 80099e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099e4:	07da      	lsls	r2, r3, #31
 80099e6:	4605      	mov	r5, r0
 80099e8:	d4e0      	bmi.n	80099ac <_fflush_r+0xc>
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	059b      	lsls	r3, r3, #22
 80099ee:	d4dd      	bmi.n	80099ac <_fflush_r+0xc>
 80099f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099f2:	f000 f90d 	bl	8009c10 <__retarget_lock_release_recursive>
 80099f6:	e7d9      	b.n	80099ac <_fflush_r+0xc>
 80099f8:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <_fflush_r+0x70>)
 80099fa:	429c      	cmp	r4, r3
 80099fc:	d101      	bne.n	8009a02 <_fflush_r+0x62>
 80099fe:	68ac      	ldr	r4, [r5, #8]
 8009a00:	e7df      	b.n	80099c2 <_fflush_r+0x22>
 8009a02:	4b04      	ldr	r3, [pc, #16]	; (8009a14 <_fflush_r+0x74>)
 8009a04:	429c      	cmp	r4, r3
 8009a06:	bf08      	it	eq
 8009a08:	68ec      	ldreq	r4, [r5, #12]
 8009a0a:	e7da      	b.n	80099c2 <_fflush_r+0x22>
 8009a0c:	0800b3d4 	.word	0x0800b3d4
 8009a10:	0800b3f4 	.word	0x0800b3f4
 8009a14:	0800b3b4 	.word	0x0800b3b4

08009a18 <std>:
 8009a18:	2300      	movs	r3, #0
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a26:	6083      	str	r3, [r0, #8]
 8009a28:	8181      	strh	r1, [r0, #12]
 8009a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a2c:	81c2      	strh	r2, [r0, #14]
 8009a2e:	6183      	str	r3, [r0, #24]
 8009a30:	4619      	mov	r1, r3
 8009a32:	2208      	movs	r2, #8
 8009a34:	305c      	adds	r0, #92	; 0x5c
 8009a36:	f7fe faeb 	bl	8008010 <memset>
 8009a3a:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <std+0x38>)
 8009a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a3e:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <std+0x3c>)
 8009a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a42:	4b05      	ldr	r3, [pc, #20]	; (8009a58 <std+0x40>)
 8009a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a46:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <std+0x44>)
 8009a48:	6224      	str	r4, [r4, #32]
 8009a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	bf00      	nop
 8009a50:	0800a8b9 	.word	0x0800a8b9
 8009a54:	0800a8db 	.word	0x0800a8db
 8009a58:	0800a913 	.word	0x0800a913
 8009a5c:	0800a937 	.word	0x0800a937

08009a60 <_cleanup_r>:
 8009a60:	4901      	ldr	r1, [pc, #4]	; (8009a68 <_cleanup_r+0x8>)
 8009a62:	f000 b8af 	b.w	8009bc4 <_fwalk_reent>
 8009a66:	bf00      	nop
 8009a68:	080099a1 	.word	0x080099a1

08009a6c <__sfmoreglue>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	2268      	movs	r2, #104	; 0x68
 8009a70:	1e4d      	subs	r5, r1, #1
 8009a72:	4355      	muls	r5, r2
 8009a74:	460e      	mov	r6, r1
 8009a76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a7a:	f000 fd3d 	bl	800a4f8 <_malloc_r>
 8009a7e:	4604      	mov	r4, r0
 8009a80:	b140      	cbz	r0, 8009a94 <__sfmoreglue+0x28>
 8009a82:	2100      	movs	r1, #0
 8009a84:	e9c0 1600 	strd	r1, r6, [r0]
 8009a88:	300c      	adds	r0, #12
 8009a8a:	60a0      	str	r0, [r4, #8]
 8009a8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a90:	f7fe fabe 	bl	8008010 <memset>
 8009a94:	4620      	mov	r0, r4
 8009a96:	bd70      	pop	{r4, r5, r6, pc}

08009a98 <__sfp_lock_acquire>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__sfp_lock_acquire+0x8>)
 8009a9a:	f000 b8b8 	b.w	8009c0e <__retarget_lock_acquire_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	20000841 	.word	0x20000841

08009aa4 <__sfp_lock_release>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__sfp_lock_release+0x8>)
 8009aa6:	f000 b8b3 	b.w	8009c10 <__retarget_lock_release_recursive>
 8009aaa:	bf00      	nop
 8009aac:	20000841 	.word	0x20000841

08009ab0 <__sinit_lock_acquire>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	; (8009ab8 <__sinit_lock_acquire+0x8>)
 8009ab2:	f000 b8ac 	b.w	8009c0e <__retarget_lock_acquire_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	20000842 	.word	0x20000842

08009abc <__sinit_lock_release>:
 8009abc:	4801      	ldr	r0, [pc, #4]	; (8009ac4 <__sinit_lock_release+0x8>)
 8009abe:	f000 b8a7 	b.w	8009c10 <__retarget_lock_release_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	20000842 	.word	0x20000842

08009ac8 <__sinit>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	4604      	mov	r4, r0
 8009acc:	f7ff fff0 	bl	8009ab0 <__sinit_lock_acquire>
 8009ad0:	69a3      	ldr	r3, [r4, #24]
 8009ad2:	b11b      	cbz	r3, 8009adc <__sinit+0x14>
 8009ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad8:	f7ff bff0 	b.w	8009abc <__sinit_lock_release>
 8009adc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8009ae2:	4b13      	ldr	r3, [pc, #76]	; (8009b30 <__sinit+0x68>)
 8009ae4:	4a13      	ldr	r2, [pc, #76]	; (8009b34 <__sinit+0x6c>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009aea:	42a3      	cmp	r3, r4
 8009aec:	bf04      	itt	eq
 8009aee:	2301      	moveq	r3, #1
 8009af0:	61a3      	streq	r3, [r4, #24]
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 f820 	bl	8009b38 <__sfp>
 8009af8:	6060      	str	r0, [r4, #4]
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 f81c 	bl	8009b38 <__sfp>
 8009b00:	60a0      	str	r0, [r4, #8]
 8009b02:	4620      	mov	r0, r4
 8009b04:	f000 f818 	bl	8009b38 <__sfp>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	60e0      	str	r0, [r4, #12]
 8009b0c:	2104      	movs	r1, #4
 8009b0e:	6860      	ldr	r0, [r4, #4]
 8009b10:	f7ff ff82 	bl	8009a18 <std>
 8009b14:	68a0      	ldr	r0, [r4, #8]
 8009b16:	2201      	movs	r2, #1
 8009b18:	2109      	movs	r1, #9
 8009b1a:	f7ff ff7d 	bl	8009a18 <std>
 8009b1e:	68e0      	ldr	r0, [r4, #12]
 8009b20:	2202      	movs	r2, #2
 8009b22:	2112      	movs	r1, #18
 8009b24:	f7ff ff78 	bl	8009a18 <std>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	61a3      	str	r3, [r4, #24]
 8009b2c:	e7d2      	b.n	8009ad4 <__sinit+0xc>
 8009b2e:	bf00      	nop
 8009b30:	0800b2ec 	.word	0x0800b2ec
 8009b34:	08009a61 	.word	0x08009a61

08009b38 <__sfp>:
 8009b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3a:	4607      	mov	r7, r0
 8009b3c:	f7ff ffac 	bl	8009a98 <__sfp_lock_acquire>
 8009b40:	4b1e      	ldr	r3, [pc, #120]	; (8009bbc <__sfp+0x84>)
 8009b42:	681e      	ldr	r6, [r3, #0]
 8009b44:	69b3      	ldr	r3, [r6, #24]
 8009b46:	b913      	cbnz	r3, 8009b4e <__sfp+0x16>
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f7ff ffbd 	bl	8009ac8 <__sinit>
 8009b4e:	3648      	adds	r6, #72	; 0x48
 8009b50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	d503      	bpl.n	8009b60 <__sfp+0x28>
 8009b58:	6833      	ldr	r3, [r6, #0]
 8009b5a:	b30b      	cbz	r3, 8009ba0 <__sfp+0x68>
 8009b5c:	6836      	ldr	r6, [r6, #0]
 8009b5e:	e7f7      	b.n	8009b50 <__sfp+0x18>
 8009b60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b64:	b9d5      	cbnz	r5, 8009b9c <__sfp+0x64>
 8009b66:	4b16      	ldr	r3, [pc, #88]	; (8009bc0 <__sfp+0x88>)
 8009b68:	60e3      	str	r3, [r4, #12]
 8009b6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b6e:	6665      	str	r5, [r4, #100]	; 0x64
 8009b70:	f000 f84c 	bl	8009c0c <__retarget_lock_init_recursive>
 8009b74:	f7ff ff96 	bl	8009aa4 <__sfp_lock_release>
 8009b78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b80:	6025      	str	r5, [r4, #0]
 8009b82:	61a5      	str	r5, [r4, #24]
 8009b84:	2208      	movs	r2, #8
 8009b86:	4629      	mov	r1, r5
 8009b88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b8c:	f7fe fa40 	bl	8008010 <memset>
 8009b90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b98:	4620      	mov	r0, r4
 8009b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b9c:	3468      	adds	r4, #104	; 0x68
 8009b9e:	e7d9      	b.n	8009b54 <__sfp+0x1c>
 8009ba0:	2104      	movs	r1, #4
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	f7ff ff62 	bl	8009a6c <__sfmoreglue>
 8009ba8:	4604      	mov	r4, r0
 8009baa:	6030      	str	r0, [r6, #0]
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d1d5      	bne.n	8009b5c <__sfp+0x24>
 8009bb0:	f7ff ff78 	bl	8009aa4 <__sfp_lock_release>
 8009bb4:	230c      	movs	r3, #12
 8009bb6:	603b      	str	r3, [r7, #0]
 8009bb8:	e7ee      	b.n	8009b98 <__sfp+0x60>
 8009bba:	bf00      	nop
 8009bbc:	0800b2ec 	.word	0x0800b2ec
 8009bc0:	ffff0001 	.word	0xffff0001

08009bc4 <_fwalk_reent>:
 8009bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bc8:	4606      	mov	r6, r0
 8009bca:	4688      	mov	r8, r1
 8009bcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bd0:	2700      	movs	r7, #0
 8009bd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bd6:	f1b9 0901 	subs.w	r9, r9, #1
 8009bda:	d505      	bpl.n	8009be8 <_fwalk_reent+0x24>
 8009bdc:	6824      	ldr	r4, [r4, #0]
 8009bde:	2c00      	cmp	r4, #0
 8009be0:	d1f7      	bne.n	8009bd2 <_fwalk_reent+0xe>
 8009be2:	4638      	mov	r0, r7
 8009be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009be8:	89ab      	ldrh	r3, [r5, #12]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d907      	bls.n	8009bfe <_fwalk_reent+0x3a>
 8009bee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	d003      	beq.n	8009bfe <_fwalk_reent+0x3a>
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	47c0      	blx	r8
 8009bfc:	4307      	orrs	r7, r0
 8009bfe:	3568      	adds	r5, #104	; 0x68
 8009c00:	e7e9      	b.n	8009bd6 <_fwalk_reent+0x12>
	...

08009c04 <_localeconv_r>:
 8009c04:	4800      	ldr	r0, [pc, #0]	; (8009c08 <_localeconv_r+0x4>)
 8009c06:	4770      	bx	lr
 8009c08:	20000160 	.word	0x20000160

08009c0c <__retarget_lock_init_recursive>:
 8009c0c:	4770      	bx	lr

08009c0e <__retarget_lock_acquire_recursive>:
 8009c0e:	4770      	bx	lr

08009c10 <__retarget_lock_release_recursive>:
 8009c10:	4770      	bx	lr

08009c12 <__swhatbuf_r>:
 8009c12:	b570      	push	{r4, r5, r6, lr}
 8009c14:	460e      	mov	r6, r1
 8009c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c1a:	2900      	cmp	r1, #0
 8009c1c:	b096      	sub	sp, #88	; 0x58
 8009c1e:	4614      	mov	r4, r2
 8009c20:	461d      	mov	r5, r3
 8009c22:	da08      	bge.n	8009c36 <__swhatbuf_r+0x24>
 8009c24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	602a      	str	r2, [r5, #0]
 8009c2c:	061a      	lsls	r2, r3, #24
 8009c2e:	d410      	bmi.n	8009c52 <__swhatbuf_r+0x40>
 8009c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c34:	e00e      	b.n	8009c54 <__swhatbuf_r+0x42>
 8009c36:	466a      	mov	r2, sp
 8009c38:	f000 fed4 	bl	800a9e4 <_fstat_r>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	dbf1      	blt.n	8009c24 <__swhatbuf_r+0x12>
 8009c40:	9a01      	ldr	r2, [sp, #4]
 8009c42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c4a:	425a      	negs	r2, r3
 8009c4c:	415a      	adcs	r2, r3
 8009c4e:	602a      	str	r2, [r5, #0]
 8009c50:	e7ee      	b.n	8009c30 <__swhatbuf_r+0x1e>
 8009c52:	2340      	movs	r3, #64	; 0x40
 8009c54:	2000      	movs	r0, #0
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	b016      	add	sp, #88	; 0x58
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}

08009c5c <__smakebuf_r>:
 8009c5c:	898b      	ldrh	r3, [r1, #12]
 8009c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c60:	079d      	lsls	r5, r3, #30
 8009c62:	4606      	mov	r6, r0
 8009c64:	460c      	mov	r4, r1
 8009c66:	d507      	bpl.n	8009c78 <__smakebuf_r+0x1c>
 8009c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	6123      	str	r3, [r4, #16]
 8009c70:	2301      	movs	r3, #1
 8009c72:	6163      	str	r3, [r4, #20]
 8009c74:	b002      	add	sp, #8
 8009c76:	bd70      	pop	{r4, r5, r6, pc}
 8009c78:	ab01      	add	r3, sp, #4
 8009c7a:	466a      	mov	r2, sp
 8009c7c:	f7ff ffc9 	bl	8009c12 <__swhatbuf_r>
 8009c80:	9900      	ldr	r1, [sp, #0]
 8009c82:	4605      	mov	r5, r0
 8009c84:	4630      	mov	r0, r6
 8009c86:	f000 fc37 	bl	800a4f8 <_malloc_r>
 8009c8a:	b948      	cbnz	r0, 8009ca0 <__smakebuf_r+0x44>
 8009c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c90:	059a      	lsls	r2, r3, #22
 8009c92:	d4ef      	bmi.n	8009c74 <__smakebuf_r+0x18>
 8009c94:	f023 0303 	bic.w	r3, r3, #3
 8009c98:	f043 0302 	orr.w	r3, r3, #2
 8009c9c:	81a3      	strh	r3, [r4, #12]
 8009c9e:	e7e3      	b.n	8009c68 <__smakebuf_r+0xc>
 8009ca0:	4b0d      	ldr	r3, [pc, #52]	; (8009cd8 <__smakebuf_r+0x7c>)
 8009ca2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	6020      	str	r0, [r4, #0]
 8009ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cac:	81a3      	strh	r3, [r4, #12]
 8009cae:	9b00      	ldr	r3, [sp, #0]
 8009cb0:	6163      	str	r3, [r4, #20]
 8009cb2:	9b01      	ldr	r3, [sp, #4]
 8009cb4:	6120      	str	r0, [r4, #16]
 8009cb6:	b15b      	cbz	r3, 8009cd0 <__smakebuf_r+0x74>
 8009cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f000 fea3 	bl	800aa08 <_isatty_r>
 8009cc2:	b128      	cbz	r0, 8009cd0 <__smakebuf_r+0x74>
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	f023 0303 	bic.w	r3, r3, #3
 8009cca:	f043 0301 	orr.w	r3, r3, #1
 8009cce:	81a3      	strh	r3, [r4, #12]
 8009cd0:	89a0      	ldrh	r0, [r4, #12]
 8009cd2:	4305      	orrs	r5, r0
 8009cd4:	81a5      	strh	r5, [r4, #12]
 8009cd6:	e7cd      	b.n	8009c74 <__smakebuf_r+0x18>
 8009cd8:	08009a61 	.word	0x08009a61

08009cdc <malloc>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <malloc+0xc>)
 8009cde:	4601      	mov	r1, r0
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	f000 bc09 	b.w	800a4f8 <_malloc_r>
 8009ce6:	bf00      	nop
 8009ce8:	2000000c 	.word	0x2000000c

08009cec <_Balloc>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	460d      	mov	r5, r1
 8009cf4:	b976      	cbnz	r6, 8009d14 <_Balloc+0x28>
 8009cf6:	2010      	movs	r0, #16
 8009cf8:	f7ff fff0 	bl	8009cdc <malloc>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	6260      	str	r0, [r4, #36]	; 0x24
 8009d00:	b920      	cbnz	r0, 8009d0c <_Balloc+0x20>
 8009d02:	4b18      	ldr	r3, [pc, #96]	; (8009d64 <_Balloc+0x78>)
 8009d04:	4818      	ldr	r0, [pc, #96]	; (8009d68 <_Balloc+0x7c>)
 8009d06:	2166      	movs	r1, #102	; 0x66
 8009d08:	f000 fe2c 	bl	800a964 <__assert_func>
 8009d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d10:	6006      	str	r6, [r0, #0]
 8009d12:	60c6      	str	r6, [r0, #12]
 8009d14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d16:	68f3      	ldr	r3, [r6, #12]
 8009d18:	b183      	cbz	r3, 8009d3c <_Balloc+0x50>
 8009d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d22:	b9b8      	cbnz	r0, 8009d54 <_Balloc+0x68>
 8009d24:	2101      	movs	r1, #1
 8009d26:	fa01 f605 	lsl.w	r6, r1, r5
 8009d2a:	1d72      	adds	r2, r6, #5
 8009d2c:	0092      	lsls	r2, r2, #2
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 fb60 	bl	800a3f4 <_calloc_r>
 8009d34:	b160      	cbz	r0, 8009d50 <_Balloc+0x64>
 8009d36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d3a:	e00e      	b.n	8009d5a <_Balloc+0x6e>
 8009d3c:	2221      	movs	r2, #33	; 0x21
 8009d3e:	2104      	movs	r1, #4
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 fb57 	bl	800a3f4 <_calloc_r>
 8009d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d48:	60f0      	str	r0, [r6, #12]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e4      	bne.n	8009d1a <_Balloc+0x2e>
 8009d50:	2000      	movs	r0, #0
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	6802      	ldr	r2, [r0, #0]
 8009d56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d60:	e7f7      	b.n	8009d52 <_Balloc+0x66>
 8009d62:	bf00      	nop
 8009d64:	0800b331 	.word	0x0800b331
 8009d68:	0800b414 	.word	0x0800b414

08009d6c <_Bfree>:
 8009d6c:	b570      	push	{r4, r5, r6, lr}
 8009d6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d70:	4605      	mov	r5, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	b976      	cbnz	r6, 8009d94 <_Bfree+0x28>
 8009d76:	2010      	movs	r0, #16
 8009d78:	f7ff ffb0 	bl	8009cdc <malloc>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	6268      	str	r0, [r5, #36]	; 0x24
 8009d80:	b920      	cbnz	r0, 8009d8c <_Bfree+0x20>
 8009d82:	4b09      	ldr	r3, [pc, #36]	; (8009da8 <_Bfree+0x3c>)
 8009d84:	4809      	ldr	r0, [pc, #36]	; (8009dac <_Bfree+0x40>)
 8009d86:	218a      	movs	r1, #138	; 0x8a
 8009d88:	f000 fdec 	bl	800a964 <__assert_func>
 8009d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d90:	6006      	str	r6, [r0, #0]
 8009d92:	60c6      	str	r6, [r0, #12]
 8009d94:	b13c      	cbz	r4, 8009da6 <_Bfree+0x3a>
 8009d96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d98:	6862      	ldr	r2, [r4, #4]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009da0:	6021      	str	r1, [r4, #0]
 8009da2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	0800b331 	.word	0x0800b331
 8009dac:	0800b414 	.word	0x0800b414

08009db0 <__multadd>:
 8009db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db4:	690d      	ldr	r5, [r1, #16]
 8009db6:	4607      	mov	r7, r0
 8009db8:	460c      	mov	r4, r1
 8009dba:	461e      	mov	r6, r3
 8009dbc:	f101 0c14 	add.w	ip, r1, #20
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	f8dc 3000 	ldr.w	r3, [ip]
 8009dc6:	b299      	uxth	r1, r3
 8009dc8:	fb02 6101 	mla	r1, r2, r1, r6
 8009dcc:	0c1e      	lsrs	r6, r3, #16
 8009dce:	0c0b      	lsrs	r3, r1, #16
 8009dd0:	fb02 3306 	mla	r3, r2, r6, r3
 8009dd4:	b289      	uxth	r1, r1
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ddc:	4285      	cmp	r5, r0
 8009dde:	f84c 1b04 	str.w	r1, [ip], #4
 8009de2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009de6:	dcec      	bgt.n	8009dc2 <__multadd+0x12>
 8009de8:	b30e      	cbz	r6, 8009e2e <__multadd+0x7e>
 8009dea:	68a3      	ldr	r3, [r4, #8]
 8009dec:	42ab      	cmp	r3, r5
 8009dee:	dc19      	bgt.n	8009e24 <__multadd+0x74>
 8009df0:	6861      	ldr	r1, [r4, #4]
 8009df2:	4638      	mov	r0, r7
 8009df4:	3101      	adds	r1, #1
 8009df6:	f7ff ff79 	bl	8009cec <_Balloc>
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	b928      	cbnz	r0, 8009e0a <__multadd+0x5a>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	4b0c      	ldr	r3, [pc, #48]	; (8009e34 <__multadd+0x84>)
 8009e02:	480d      	ldr	r0, [pc, #52]	; (8009e38 <__multadd+0x88>)
 8009e04:	21b5      	movs	r1, #181	; 0xb5
 8009e06:	f000 fdad 	bl	800a964 <__assert_func>
 8009e0a:	6922      	ldr	r2, [r4, #16]
 8009e0c:	3202      	adds	r2, #2
 8009e0e:	f104 010c 	add.w	r1, r4, #12
 8009e12:	0092      	lsls	r2, r2, #2
 8009e14:	300c      	adds	r0, #12
 8009e16:	f7fe f8ed 	bl	8007ff4 <memcpy>
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f7ff ffa5 	bl	8009d6c <_Bfree>
 8009e22:	4644      	mov	r4, r8
 8009e24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e28:	3501      	adds	r5, #1
 8009e2a:	615e      	str	r6, [r3, #20]
 8009e2c:	6125      	str	r5, [r4, #16]
 8009e2e:	4620      	mov	r0, r4
 8009e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e34:	0800b3a3 	.word	0x0800b3a3
 8009e38:	0800b414 	.word	0x0800b414

08009e3c <__hi0bits>:
 8009e3c:	0c03      	lsrs	r3, r0, #16
 8009e3e:	041b      	lsls	r3, r3, #16
 8009e40:	b9d3      	cbnz	r3, 8009e78 <__hi0bits+0x3c>
 8009e42:	0400      	lsls	r0, r0, #16
 8009e44:	2310      	movs	r3, #16
 8009e46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e4a:	bf04      	itt	eq
 8009e4c:	0200      	lsleq	r0, r0, #8
 8009e4e:	3308      	addeq	r3, #8
 8009e50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e54:	bf04      	itt	eq
 8009e56:	0100      	lsleq	r0, r0, #4
 8009e58:	3304      	addeq	r3, #4
 8009e5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e5e:	bf04      	itt	eq
 8009e60:	0080      	lsleq	r0, r0, #2
 8009e62:	3302      	addeq	r3, #2
 8009e64:	2800      	cmp	r0, #0
 8009e66:	db05      	blt.n	8009e74 <__hi0bits+0x38>
 8009e68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e6c:	f103 0301 	add.w	r3, r3, #1
 8009e70:	bf08      	it	eq
 8009e72:	2320      	moveq	r3, #32
 8009e74:	4618      	mov	r0, r3
 8009e76:	4770      	bx	lr
 8009e78:	2300      	movs	r3, #0
 8009e7a:	e7e4      	b.n	8009e46 <__hi0bits+0xa>

08009e7c <__lo0bits>:
 8009e7c:	6803      	ldr	r3, [r0, #0]
 8009e7e:	f013 0207 	ands.w	r2, r3, #7
 8009e82:	4601      	mov	r1, r0
 8009e84:	d00b      	beq.n	8009e9e <__lo0bits+0x22>
 8009e86:	07da      	lsls	r2, r3, #31
 8009e88:	d423      	bmi.n	8009ed2 <__lo0bits+0x56>
 8009e8a:	0798      	lsls	r0, r3, #30
 8009e8c:	bf49      	itett	mi
 8009e8e:	085b      	lsrmi	r3, r3, #1
 8009e90:	089b      	lsrpl	r3, r3, #2
 8009e92:	2001      	movmi	r0, #1
 8009e94:	600b      	strmi	r3, [r1, #0]
 8009e96:	bf5c      	itt	pl
 8009e98:	600b      	strpl	r3, [r1, #0]
 8009e9a:	2002      	movpl	r0, #2
 8009e9c:	4770      	bx	lr
 8009e9e:	b298      	uxth	r0, r3
 8009ea0:	b9a8      	cbnz	r0, 8009ece <__lo0bits+0x52>
 8009ea2:	0c1b      	lsrs	r3, r3, #16
 8009ea4:	2010      	movs	r0, #16
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	b90a      	cbnz	r2, 8009eae <__lo0bits+0x32>
 8009eaa:	3008      	adds	r0, #8
 8009eac:	0a1b      	lsrs	r3, r3, #8
 8009eae:	071a      	lsls	r2, r3, #28
 8009eb0:	bf04      	itt	eq
 8009eb2:	091b      	lsreq	r3, r3, #4
 8009eb4:	3004      	addeq	r0, #4
 8009eb6:	079a      	lsls	r2, r3, #30
 8009eb8:	bf04      	itt	eq
 8009eba:	089b      	lsreq	r3, r3, #2
 8009ebc:	3002      	addeq	r0, #2
 8009ebe:	07da      	lsls	r2, r3, #31
 8009ec0:	d403      	bmi.n	8009eca <__lo0bits+0x4e>
 8009ec2:	085b      	lsrs	r3, r3, #1
 8009ec4:	f100 0001 	add.w	r0, r0, #1
 8009ec8:	d005      	beq.n	8009ed6 <__lo0bits+0x5a>
 8009eca:	600b      	str	r3, [r1, #0]
 8009ecc:	4770      	bx	lr
 8009ece:	4610      	mov	r0, r2
 8009ed0:	e7e9      	b.n	8009ea6 <__lo0bits+0x2a>
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	4770      	bx	lr
 8009ed6:	2020      	movs	r0, #32
 8009ed8:	4770      	bx	lr
	...

08009edc <__i2b>:
 8009edc:	b510      	push	{r4, lr}
 8009ede:	460c      	mov	r4, r1
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	f7ff ff03 	bl	8009cec <_Balloc>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	b928      	cbnz	r0, 8009ef6 <__i2b+0x1a>
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <__i2b+0x24>)
 8009eec:	4805      	ldr	r0, [pc, #20]	; (8009f04 <__i2b+0x28>)
 8009eee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ef2:	f000 fd37 	bl	800a964 <__assert_func>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	6144      	str	r4, [r0, #20]
 8009efa:	6103      	str	r3, [r0, #16]
 8009efc:	bd10      	pop	{r4, pc}
 8009efe:	bf00      	nop
 8009f00:	0800b3a3 	.word	0x0800b3a3
 8009f04:	0800b414 	.word	0x0800b414

08009f08 <__multiply>:
 8009f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0c:	4691      	mov	r9, r2
 8009f0e:	690a      	ldr	r2, [r1, #16]
 8009f10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	bfb8      	it	lt
 8009f18:	460b      	movlt	r3, r1
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	bfbc      	itt	lt
 8009f1e:	464c      	movlt	r4, r9
 8009f20:	4699      	movlt	r9, r3
 8009f22:	6927      	ldr	r7, [r4, #16]
 8009f24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f28:	68a3      	ldr	r3, [r4, #8]
 8009f2a:	6861      	ldr	r1, [r4, #4]
 8009f2c:	eb07 060a 	add.w	r6, r7, sl
 8009f30:	42b3      	cmp	r3, r6
 8009f32:	b085      	sub	sp, #20
 8009f34:	bfb8      	it	lt
 8009f36:	3101      	addlt	r1, #1
 8009f38:	f7ff fed8 	bl	8009cec <_Balloc>
 8009f3c:	b930      	cbnz	r0, 8009f4c <__multiply+0x44>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	4b44      	ldr	r3, [pc, #272]	; (800a054 <__multiply+0x14c>)
 8009f42:	4845      	ldr	r0, [pc, #276]	; (800a058 <__multiply+0x150>)
 8009f44:	f240 115d 	movw	r1, #349	; 0x15d
 8009f48:	f000 fd0c 	bl	800a964 <__assert_func>
 8009f4c:	f100 0514 	add.w	r5, r0, #20
 8009f50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f54:	462b      	mov	r3, r5
 8009f56:	2200      	movs	r2, #0
 8009f58:	4543      	cmp	r3, r8
 8009f5a:	d321      	bcc.n	8009fa0 <__multiply+0x98>
 8009f5c:	f104 0314 	add.w	r3, r4, #20
 8009f60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f64:	f109 0314 	add.w	r3, r9, #20
 8009f68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f6c:	9202      	str	r2, [sp, #8]
 8009f6e:	1b3a      	subs	r2, r7, r4
 8009f70:	3a15      	subs	r2, #21
 8009f72:	f022 0203 	bic.w	r2, r2, #3
 8009f76:	3204      	adds	r2, #4
 8009f78:	f104 0115 	add.w	r1, r4, #21
 8009f7c:	428f      	cmp	r7, r1
 8009f7e:	bf38      	it	cc
 8009f80:	2204      	movcc	r2, #4
 8009f82:	9201      	str	r2, [sp, #4]
 8009f84:	9a02      	ldr	r2, [sp, #8]
 8009f86:	9303      	str	r3, [sp, #12]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d80c      	bhi.n	8009fa6 <__multiply+0x9e>
 8009f8c:	2e00      	cmp	r6, #0
 8009f8e:	dd03      	ble.n	8009f98 <__multiply+0x90>
 8009f90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d05a      	beq.n	800a04e <__multiply+0x146>
 8009f98:	6106      	str	r6, [r0, #16]
 8009f9a:	b005      	add	sp, #20
 8009f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa0:	f843 2b04 	str.w	r2, [r3], #4
 8009fa4:	e7d8      	b.n	8009f58 <__multiply+0x50>
 8009fa6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009faa:	f1ba 0f00 	cmp.w	sl, #0
 8009fae:	d024      	beq.n	8009ffa <__multiply+0xf2>
 8009fb0:	f104 0e14 	add.w	lr, r4, #20
 8009fb4:	46a9      	mov	r9, r5
 8009fb6:	f04f 0c00 	mov.w	ip, #0
 8009fba:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009fbe:	f8d9 1000 	ldr.w	r1, [r9]
 8009fc2:	fa1f fb82 	uxth.w	fp, r2
 8009fc6:	b289      	uxth	r1, r1
 8009fc8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009fcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8009fd4:	4461      	add	r1, ip
 8009fd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fda:	fb0a c20b 	mla	r2, sl, fp, ip
 8009fde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fe2:	b289      	uxth	r1, r1
 8009fe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fe8:	4577      	cmp	r7, lr
 8009fea:	f849 1b04 	str.w	r1, [r9], #4
 8009fee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ff2:	d8e2      	bhi.n	8009fba <__multiply+0xb2>
 8009ff4:	9a01      	ldr	r2, [sp, #4]
 8009ff6:	f845 c002 	str.w	ip, [r5, r2]
 8009ffa:	9a03      	ldr	r2, [sp, #12]
 8009ffc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a000:	3304      	adds	r3, #4
 800a002:	f1b9 0f00 	cmp.w	r9, #0
 800a006:	d020      	beq.n	800a04a <__multiply+0x142>
 800a008:	6829      	ldr	r1, [r5, #0]
 800a00a:	f104 0c14 	add.w	ip, r4, #20
 800a00e:	46ae      	mov	lr, r5
 800a010:	f04f 0a00 	mov.w	sl, #0
 800a014:	f8bc b000 	ldrh.w	fp, [ip]
 800a018:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a01c:	fb09 220b 	mla	r2, r9, fp, r2
 800a020:	4492      	add	sl, r2
 800a022:	b289      	uxth	r1, r1
 800a024:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a028:	f84e 1b04 	str.w	r1, [lr], #4
 800a02c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a030:	f8be 1000 	ldrh.w	r1, [lr]
 800a034:	0c12      	lsrs	r2, r2, #16
 800a036:	fb09 1102 	mla	r1, r9, r2, r1
 800a03a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a03e:	4567      	cmp	r7, ip
 800a040:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a044:	d8e6      	bhi.n	800a014 <__multiply+0x10c>
 800a046:	9a01      	ldr	r2, [sp, #4]
 800a048:	50a9      	str	r1, [r5, r2]
 800a04a:	3504      	adds	r5, #4
 800a04c:	e79a      	b.n	8009f84 <__multiply+0x7c>
 800a04e:	3e01      	subs	r6, #1
 800a050:	e79c      	b.n	8009f8c <__multiply+0x84>
 800a052:	bf00      	nop
 800a054:	0800b3a3 	.word	0x0800b3a3
 800a058:	0800b414 	.word	0x0800b414

0800a05c <__pow5mult>:
 800a05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a060:	4615      	mov	r5, r2
 800a062:	f012 0203 	ands.w	r2, r2, #3
 800a066:	4606      	mov	r6, r0
 800a068:	460f      	mov	r7, r1
 800a06a:	d007      	beq.n	800a07c <__pow5mult+0x20>
 800a06c:	4c25      	ldr	r4, [pc, #148]	; (800a104 <__pow5mult+0xa8>)
 800a06e:	3a01      	subs	r2, #1
 800a070:	2300      	movs	r3, #0
 800a072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a076:	f7ff fe9b 	bl	8009db0 <__multadd>
 800a07a:	4607      	mov	r7, r0
 800a07c:	10ad      	asrs	r5, r5, #2
 800a07e:	d03d      	beq.n	800a0fc <__pow5mult+0xa0>
 800a080:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a082:	b97c      	cbnz	r4, 800a0a4 <__pow5mult+0x48>
 800a084:	2010      	movs	r0, #16
 800a086:	f7ff fe29 	bl	8009cdc <malloc>
 800a08a:	4602      	mov	r2, r0
 800a08c:	6270      	str	r0, [r6, #36]	; 0x24
 800a08e:	b928      	cbnz	r0, 800a09c <__pow5mult+0x40>
 800a090:	4b1d      	ldr	r3, [pc, #116]	; (800a108 <__pow5mult+0xac>)
 800a092:	481e      	ldr	r0, [pc, #120]	; (800a10c <__pow5mult+0xb0>)
 800a094:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a098:	f000 fc64 	bl	800a964 <__assert_func>
 800a09c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0a0:	6004      	str	r4, [r0, #0]
 800a0a2:	60c4      	str	r4, [r0, #12]
 800a0a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a0a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0ac:	b94c      	cbnz	r4, 800a0c2 <__pow5mult+0x66>
 800a0ae:	f240 2171 	movw	r1, #625	; 0x271
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f7ff ff12 	bl	8009edc <__i2b>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0be:	4604      	mov	r4, r0
 800a0c0:	6003      	str	r3, [r0, #0]
 800a0c2:	f04f 0900 	mov.w	r9, #0
 800a0c6:	07eb      	lsls	r3, r5, #31
 800a0c8:	d50a      	bpl.n	800a0e0 <__pow5mult+0x84>
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	4622      	mov	r2, r4
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f7ff ff1a 	bl	8009f08 <__multiply>
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f7ff fe47 	bl	8009d6c <_Bfree>
 800a0de:	4647      	mov	r7, r8
 800a0e0:	106d      	asrs	r5, r5, #1
 800a0e2:	d00b      	beq.n	800a0fc <__pow5mult+0xa0>
 800a0e4:	6820      	ldr	r0, [r4, #0]
 800a0e6:	b938      	cbnz	r0, 800a0f8 <__pow5mult+0x9c>
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f7ff ff0b 	bl	8009f08 <__multiply>
 800a0f2:	6020      	str	r0, [r4, #0]
 800a0f4:	f8c0 9000 	str.w	r9, [r0]
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	e7e4      	b.n	800a0c6 <__pow5mult+0x6a>
 800a0fc:	4638      	mov	r0, r7
 800a0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a102:	bf00      	nop
 800a104:	0800b560 	.word	0x0800b560
 800a108:	0800b331 	.word	0x0800b331
 800a10c:	0800b414 	.word	0x0800b414

0800a110 <__lshift>:
 800a110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a114:	460c      	mov	r4, r1
 800a116:	6849      	ldr	r1, [r1, #4]
 800a118:	6923      	ldr	r3, [r4, #16]
 800a11a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a11e:	68a3      	ldr	r3, [r4, #8]
 800a120:	4607      	mov	r7, r0
 800a122:	4691      	mov	r9, r2
 800a124:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a128:	f108 0601 	add.w	r6, r8, #1
 800a12c:	42b3      	cmp	r3, r6
 800a12e:	db0b      	blt.n	800a148 <__lshift+0x38>
 800a130:	4638      	mov	r0, r7
 800a132:	f7ff fddb 	bl	8009cec <_Balloc>
 800a136:	4605      	mov	r5, r0
 800a138:	b948      	cbnz	r0, 800a14e <__lshift+0x3e>
 800a13a:	4602      	mov	r2, r0
 800a13c:	4b2a      	ldr	r3, [pc, #168]	; (800a1e8 <__lshift+0xd8>)
 800a13e:	482b      	ldr	r0, [pc, #172]	; (800a1ec <__lshift+0xdc>)
 800a140:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a144:	f000 fc0e 	bl	800a964 <__assert_func>
 800a148:	3101      	adds	r1, #1
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	e7ee      	b.n	800a12c <__lshift+0x1c>
 800a14e:	2300      	movs	r3, #0
 800a150:	f100 0114 	add.w	r1, r0, #20
 800a154:	f100 0210 	add.w	r2, r0, #16
 800a158:	4618      	mov	r0, r3
 800a15a:	4553      	cmp	r3, sl
 800a15c:	db37      	blt.n	800a1ce <__lshift+0xbe>
 800a15e:	6920      	ldr	r0, [r4, #16]
 800a160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a164:	f104 0314 	add.w	r3, r4, #20
 800a168:	f019 091f 	ands.w	r9, r9, #31
 800a16c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a170:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a174:	d02f      	beq.n	800a1d6 <__lshift+0xc6>
 800a176:	f1c9 0e20 	rsb	lr, r9, #32
 800a17a:	468a      	mov	sl, r1
 800a17c:	f04f 0c00 	mov.w	ip, #0
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	fa02 f209 	lsl.w	r2, r2, r9
 800a186:	ea42 020c 	orr.w	r2, r2, ip
 800a18a:	f84a 2b04 	str.w	r2, [sl], #4
 800a18e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a192:	4298      	cmp	r0, r3
 800a194:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a198:	d8f2      	bhi.n	800a180 <__lshift+0x70>
 800a19a:	1b03      	subs	r3, r0, r4
 800a19c:	3b15      	subs	r3, #21
 800a19e:	f023 0303 	bic.w	r3, r3, #3
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	f104 0215 	add.w	r2, r4, #21
 800a1a8:	4290      	cmp	r0, r2
 800a1aa:	bf38      	it	cc
 800a1ac:	2304      	movcc	r3, #4
 800a1ae:	f841 c003 	str.w	ip, [r1, r3]
 800a1b2:	f1bc 0f00 	cmp.w	ip, #0
 800a1b6:	d001      	beq.n	800a1bc <__lshift+0xac>
 800a1b8:	f108 0602 	add.w	r6, r8, #2
 800a1bc:	3e01      	subs	r6, #1
 800a1be:	4638      	mov	r0, r7
 800a1c0:	612e      	str	r6, [r5, #16]
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	f7ff fdd2 	bl	8009d6c <_Bfree>
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	e7c1      	b.n	800a15a <__lshift+0x4a>
 800a1d6:	3904      	subs	r1, #4
 800a1d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1e0:	4298      	cmp	r0, r3
 800a1e2:	d8f9      	bhi.n	800a1d8 <__lshift+0xc8>
 800a1e4:	e7ea      	b.n	800a1bc <__lshift+0xac>
 800a1e6:	bf00      	nop
 800a1e8:	0800b3a3 	.word	0x0800b3a3
 800a1ec:	0800b414 	.word	0x0800b414

0800a1f0 <__mcmp>:
 800a1f0:	b530      	push	{r4, r5, lr}
 800a1f2:	6902      	ldr	r2, [r0, #16]
 800a1f4:	690c      	ldr	r4, [r1, #16]
 800a1f6:	1b12      	subs	r2, r2, r4
 800a1f8:	d10e      	bne.n	800a218 <__mcmp+0x28>
 800a1fa:	f100 0314 	add.w	r3, r0, #20
 800a1fe:	3114      	adds	r1, #20
 800a200:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a204:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a208:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a20c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a210:	42a5      	cmp	r5, r4
 800a212:	d003      	beq.n	800a21c <__mcmp+0x2c>
 800a214:	d305      	bcc.n	800a222 <__mcmp+0x32>
 800a216:	2201      	movs	r2, #1
 800a218:	4610      	mov	r0, r2
 800a21a:	bd30      	pop	{r4, r5, pc}
 800a21c:	4283      	cmp	r3, r0
 800a21e:	d3f3      	bcc.n	800a208 <__mcmp+0x18>
 800a220:	e7fa      	b.n	800a218 <__mcmp+0x28>
 800a222:	f04f 32ff 	mov.w	r2, #4294967295
 800a226:	e7f7      	b.n	800a218 <__mcmp+0x28>

0800a228 <__mdiff>:
 800a228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	460c      	mov	r4, r1
 800a22e:	4606      	mov	r6, r0
 800a230:	4611      	mov	r1, r2
 800a232:	4620      	mov	r0, r4
 800a234:	4690      	mov	r8, r2
 800a236:	f7ff ffdb 	bl	800a1f0 <__mcmp>
 800a23a:	1e05      	subs	r5, r0, #0
 800a23c:	d110      	bne.n	800a260 <__mdiff+0x38>
 800a23e:	4629      	mov	r1, r5
 800a240:	4630      	mov	r0, r6
 800a242:	f7ff fd53 	bl	8009cec <_Balloc>
 800a246:	b930      	cbnz	r0, 800a256 <__mdiff+0x2e>
 800a248:	4b3a      	ldr	r3, [pc, #232]	; (800a334 <__mdiff+0x10c>)
 800a24a:	4602      	mov	r2, r0
 800a24c:	f240 2132 	movw	r1, #562	; 0x232
 800a250:	4839      	ldr	r0, [pc, #228]	; (800a338 <__mdiff+0x110>)
 800a252:	f000 fb87 	bl	800a964 <__assert_func>
 800a256:	2301      	movs	r3, #1
 800a258:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a25c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a260:	bfa4      	itt	ge
 800a262:	4643      	movge	r3, r8
 800a264:	46a0      	movge	r8, r4
 800a266:	4630      	mov	r0, r6
 800a268:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a26c:	bfa6      	itte	ge
 800a26e:	461c      	movge	r4, r3
 800a270:	2500      	movge	r5, #0
 800a272:	2501      	movlt	r5, #1
 800a274:	f7ff fd3a 	bl	8009cec <_Balloc>
 800a278:	b920      	cbnz	r0, 800a284 <__mdiff+0x5c>
 800a27a:	4b2e      	ldr	r3, [pc, #184]	; (800a334 <__mdiff+0x10c>)
 800a27c:	4602      	mov	r2, r0
 800a27e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a282:	e7e5      	b.n	800a250 <__mdiff+0x28>
 800a284:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a288:	6926      	ldr	r6, [r4, #16]
 800a28a:	60c5      	str	r5, [r0, #12]
 800a28c:	f104 0914 	add.w	r9, r4, #20
 800a290:	f108 0514 	add.w	r5, r8, #20
 800a294:	f100 0e14 	add.w	lr, r0, #20
 800a298:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a29c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2a0:	f108 0210 	add.w	r2, r8, #16
 800a2a4:	46f2      	mov	sl, lr
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a2b0:	fa1f f883 	uxth.w	r8, r3
 800a2b4:	fa11 f18b 	uxtah	r1, r1, fp
 800a2b8:	0c1b      	lsrs	r3, r3, #16
 800a2ba:	eba1 0808 	sub.w	r8, r1, r8
 800a2be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a2c6:	fa1f f888 	uxth.w	r8, r8
 800a2ca:	1419      	asrs	r1, r3, #16
 800a2cc:	454e      	cmp	r6, r9
 800a2ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2d2:	f84a 3b04 	str.w	r3, [sl], #4
 800a2d6:	d8e7      	bhi.n	800a2a8 <__mdiff+0x80>
 800a2d8:	1b33      	subs	r3, r6, r4
 800a2da:	3b15      	subs	r3, #21
 800a2dc:	f023 0303 	bic.w	r3, r3, #3
 800a2e0:	3304      	adds	r3, #4
 800a2e2:	3415      	adds	r4, #21
 800a2e4:	42a6      	cmp	r6, r4
 800a2e6:	bf38      	it	cc
 800a2e8:	2304      	movcc	r3, #4
 800a2ea:	441d      	add	r5, r3
 800a2ec:	4473      	add	r3, lr
 800a2ee:	469e      	mov	lr, r3
 800a2f0:	462e      	mov	r6, r5
 800a2f2:	4566      	cmp	r6, ip
 800a2f4:	d30e      	bcc.n	800a314 <__mdiff+0xec>
 800a2f6:	f10c 0203 	add.w	r2, ip, #3
 800a2fa:	1b52      	subs	r2, r2, r5
 800a2fc:	f022 0203 	bic.w	r2, r2, #3
 800a300:	3d03      	subs	r5, #3
 800a302:	45ac      	cmp	ip, r5
 800a304:	bf38      	it	cc
 800a306:	2200      	movcc	r2, #0
 800a308:	441a      	add	r2, r3
 800a30a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a30e:	b17b      	cbz	r3, 800a330 <__mdiff+0x108>
 800a310:	6107      	str	r7, [r0, #16]
 800a312:	e7a3      	b.n	800a25c <__mdiff+0x34>
 800a314:	f856 8b04 	ldr.w	r8, [r6], #4
 800a318:	fa11 f288 	uxtah	r2, r1, r8
 800a31c:	1414      	asrs	r4, r2, #16
 800a31e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a322:	b292      	uxth	r2, r2
 800a324:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a328:	f84e 2b04 	str.w	r2, [lr], #4
 800a32c:	1421      	asrs	r1, r4, #16
 800a32e:	e7e0      	b.n	800a2f2 <__mdiff+0xca>
 800a330:	3f01      	subs	r7, #1
 800a332:	e7ea      	b.n	800a30a <__mdiff+0xe2>
 800a334:	0800b3a3 	.word	0x0800b3a3
 800a338:	0800b414 	.word	0x0800b414

0800a33c <__d2b>:
 800a33c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a340:	4689      	mov	r9, r1
 800a342:	2101      	movs	r1, #1
 800a344:	ec57 6b10 	vmov	r6, r7, d0
 800a348:	4690      	mov	r8, r2
 800a34a:	f7ff fccf 	bl	8009cec <_Balloc>
 800a34e:	4604      	mov	r4, r0
 800a350:	b930      	cbnz	r0, 800a360 <__d2b+0x24>
 800a352:	4602      	mov	r2, r0
 800a354:	4b25      	ldr	r3, [pc, #148]	; (800a3ec <__d2b+0xb0>)
 800a356:	4826      	ldr	r0, [pc, #152]	; (800a3f0 <__d2b+0xb4>)
 800a358:	f240 310a 	movw	r1, #778	; 0x30a
 800a35c:	f000 fb02 	bl	800a964 <__assert_func>
 800a360:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a364:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a368:	bb35      	cbnz	r5, 800a3b8 <__d2b+0x7c>
 800a36a:	2e00      	cmp	r6, #0
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	d028      	beq.n	800a3c2 <__d2b+0x86>
 800a370:	4668      	mov	r0, sp
 800a372:	9600      	str	r6, [sp, #0]
 800a374:	f7ff fd82 	bl	8009e7c <__lo0bits>
 800a378:	9900      	ldr	r1, [sp, #0]
 800a37a:	b300      	cbz	r0, 800a3be <__d2b+0x82>
 800a37c:	9a01      	ldr	r2, [sp, #4]
 800a37e:	f1c0 0320 	rsb	r3, r0, #32
 800a382:	fa02 f303 	lsl.w	r3, r2, r3
 800a386:	430b      	orrs	r3, r1
 800a388:	40c2      	lsrs	r2, r0
 800a38a:	6163      	str	r3, [r4, #20]
 800a38c:	9201      	str	r2, [sp, #4]
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	61a3      	str	r3, [r4, #24]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bf14      	ite	ne
 800a396:	2202      	movne	r2, #2
 800a398:	2201      	moveq	r2, #1
 800a39a:	6122      	str	r2, [r4, #16]
 800a39c:	b1d5      	cbz	r5, 800a3d4 <__d2b+0x98>
 800a39e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3a2:	4405      	add	r5, r0
 800a3a4:	f8c9 5000 	str.w	r5, [r9]
 800a3a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3ac:	f8c8 0000 	str.w	r0, [r8]
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	b003      	add	sp, #12
 800a3b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3bc:	e7d5      	b.n	800a36a <__d2b+0x2e>
 800a3be:	6161      	str	r1, [r4, #20]
 800a3c0:	e7e5      	b.n	800a38e <__d2b+0x52>
 800a3c2:	a801      	add	r0, sp, #4
 800a3c4:	f7ff fd5a 	bl	8009e7c <__lo0bits>
 800a3c8:	9b01      	ldr	r3, [sp, #4]
 800a3ca:	6163      	str	r3, [r4, #20]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	6122      	str	r2, [r4, #16]
 800a3d0:	3020      	adds	r0, #32
 800a3d2:	e7e3      	b.n	800a39c <__d2b+0x60>
 800a3d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3dc:	f8c9 0000 	str.w	r0, [r9]
 800a3e0:	6918      	ldr	r0, [r3, #16]
 800a3e2:	f7ff fd2b 	bl	8009e3c <__hi0bits>
 800a3e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3ea:	e7df      	b.n	800a3ac <__d2b+0x70>
 800a3ec:	0800b3a3 	.word	0x0800b3a3
 800a3f0:	0800b414 	.word	0x0800b414

0800a3f4 <_calloc_r>:
 800a3f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3f6:	fba1 2402 	umull	r2, r4, r1, r2
 800a3fa:	b94c      	cbnz	r4, 800a410 <_calloc_r+0x1c>
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	9201      	str	r2, [sp, #4]
 800a400:	f000 f87a 	bl	800a4f8 <_malloc_r>
 800a404:	9a01      	ldr	r2, [sp, #4]
 800a406:	4605      	mov	r5, r0
 800a408:	b930      	cbnz	r0, 800a418 <_calloc_r+0x24>
 800a40a:	4628      	mov	r0, r5
 800a40c:	b003      	add	sp, #12
 800a40e:	bd30      	pop	{r4, r5, pc}
 800a410:	220c      	movs	r2, #12
 800a412:	6002      	str	r2, [r0, #0]
 800a414:	2500      	movs	r5, #0
 800a416:	e7f8      	b.n	800a40a <_calloc_r+0x16>
 800a418:	4621      	mov	r1, r4
 800a41a:	f7fd fdf9 	bl	8008010 <memset>
 800a41e:	e7f4      	b.n	800a40a <_calloc_r+0x16>

0800a420 <_free_r>:
 800a420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a422:	2900      	cmp	r1, #0
 800a424:	d044      	beq.n	800a4b0 <_free_r+0x90>
 800a426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a42a:	9001      	str	r0, [sp, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f1a1 0404 	sub.w	r4, r1, #4
 800a432:	bfb8      	it	lt
 800a434:	18e4      	addlt	r4, r4, r3
 800a436:	f000 fb35 	bl	800aaa4 <__malloc_lock>
 800a43a:	4a1e      	ldr	r2, [pc, #120]	; (800a4b4 <_free_r+0x94>)
 800a43c:	9801      	ldr	r0, [sp, #4]
 800a43e:	6813      	ldr	r3, [r2, #0]
 800a440:	b933      	cbnz	r3, 800a450 <_free_r+0x30>
 800a442:	6063      	str	r3, [r4, #4]
 800a444:	6014      	str	r4, [r2, #0]
 800a446:	b003      	add	sp, #12
 800a448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a44c:	f000 bb30 	b.w	800aab0 <__malloc_unlock>
 800a450:	42a3      	cmp	r3, r4
 800a452:	d908      	bls.n	800a466 <_free_r+0x46>
 800a454:	6825      	ldr	r5, [r4, #0]
 800a456:	1961      	adds	r1, r4, r5
 800a458:	428b      	cmp	r3, r1
 800a45a:	bf01      	itttt	eq
 800a45c:	6819      	ldreq	r1, [r3, #0]
 800a45e:	685b      	ldreq	r3, [r3, #4]
 800a460:	1949      	addeq	r1, r1, r5
 800a462:	6021      	streq	r1, [r4, #0]
 800a464:	e7ed      	b.n	800a442 <_free_r+0x22>
 800a466:	461a      	mov	r2, r3
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	b10b      	cbz	r3, 800a470 <_free_r+0x50>
 800a46c:	42a3      	cmp	r3, r4
 800a46e:	d9fa      	bls.n	800a466 <_free_r+0x46>
 800a470:	6811      	ldr	r1, [r2, #0]
 800a472:	1855      	adds	r5, r2, r1
 800a474:	42a5      	cmp	r5, r4
 800a476:	d10b      	bne.n	800a490 <_free_r+0x70>
 800a478:	6824      	ldr	r4, [r4, #0]
 800a47a:	4421      	add	r1, r4
 800a47c:	1854      	adds	r4, r2, r1
 800a47e:	42a3      	cmp	r3, r4
 800a480:	6011      	str	r1, [r2, #0]
 800a482:	d1e0      	bne.n	800a446 <_free_r+0x26>
 800a484:	681c      	ldr	r4, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	6053      	str	r3, [r2, #4]
 800a48a:	4421      	add	r1, r4
 800a48c:	6011      	str	r1, [r2, #0]
 800a48e:	e7da      	b.n	800a446 <_free_r+0x26>
 800a490:	d902      	bls.n	800a498 <_free_r+0x78>
 800a492:	230c      	movs	r3, #12
 800a494:	6003      	str	r3, [r0, #0]
 800a496:	e7d6      	b.n	800a446 <_free_r+0x26>
 800a498:	6825      	ldr	r5, [r4, #0]
 800a49a:	1961      	adds	r1, r4, r5
 800a49c:	428b      	cmp	r3, r1
 800a49e:	bf04      	itt	eq
 800a4a0:	6819      	ldreq	r1, [r3, #0]
 800a4a2:	685b      	ldreq	r3, [r3, #4]
 800a4a4:	6063      	str	r3, [r4, #4]
 800a4a6:	bf04      	itt	eq
 800a4a8:	1949      	addeq	r1, r1, r5
 800a4aa:	6021      	streq	r1, [r4, #0]
 800a4ac:	6054      	str	r4, [r2, #4]
 800a4ae:	e7ca      	b.n	800a446 <_free_r+0x26>
 800a4b0:	b003      	add	sp, #12
 800a4b2:	bd30      	pop	{r4, r5, pc}
 800a4b4:	20000844 	.word	0x20000844

0800a4b8 <sbrk_aligned>:
 800a4b8:	b570      	push	{r4, r5, r6, lr}
 800a4ba:	4e0e      	ldr	r6, [pc, #56]	; (800a4f4 <sbrk_aligned+0x3c>)
 800a4bc:	460c      	mov	r4, r1
 800a4be:	6831      	ldr	r1, [r6, #0]
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	b911      	cbnz	r1, 800a4ca <sbrk_aligned+0x12>
 800a4c4:	f000 f9e8 	bl	800a898 <_sbrk_r>
 800a4c8:	6030      	str	r0, [r6, #0]
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	f000 f9e3 	bl	800a898 <_sbrk_r>
 800a4d2:	1c43      	adds	r3, r0, #1
 800a4d4:	d00a      	beq.n	800a4ec <sbrk_aligned+0x34>
 800a4d6:	1cc4      	adds	r4, r0, #3
 800a4d8:	f024 0403 	bic.w	r4, r4, #3
 800a4dc:	42a0      	cmp	r0, r4
 800a4de:	d007      	beq.n	800a4f0 <sbrk_aligned+0x38>
 800a4e0:	1a21      	subs	r1, r4, r0
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f000 f9d8 	bl	800a898 <_sbrk_r>
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d101      	bne.n	800a4f0 <sbrk_aligned+0x38>
 800a4ec:	f04f 34ff 	mov.w	r4, #4294967295
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}
 800a4f4:	20000848 	.word	0x20000848

0800a4f8 <_malloc_r>:
 800a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fc:	1ccd      	adds	r5, r1, #3
 800a4fe:	f025 0503 	bic.w	r5, r5, #3
 800a502:	3508      	adds	r5, #8
 800a504:	2d0c      	cmp	r5, #12
 800a506:	bf38      	it	cc
 800a508:	250c      	movcc	r5, #12
 800a50a:	2d00      	cmp	r5, #0
 800a50c:	4607      	mov	r7, r0
 800a50e:	db01      	blt.n	800a514 <_malloc_r+0x1c>
 800a510:	42a9      	cmp	r1, r5
 800a512:	d905      	bls.n	800a520 <_malloc_r+0x28>
 800a514:	230c      	movs	r3, #12
 800a516:	603b      	str	r3, [r7, #0]
 800a518:	2600      	movs	r6, #0
 800a51a:	4630      	mov	r0, r6
 800a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a520:	4e2e      	ldr	r6, [pc, #184]	; (800a5dc <_malloc_r+0xe4>)
 800a522:	f000 fabf 	bl	800aaa4 <__malloc_lock>
 800a526:	6833      	ldr	r3, [r6, #0]
 800a528:	461c      	mov	r4, r3
 800a52a:	bb34      	cbnz	r4, 800a57a <_malloc_r+0x82>
 800a52c:	4629      	mov	r1, r5
 800a52e:	4638      	mov	r0, r7
 800a530:	f7ff ffc2 	bl	800a4b8 <sbrk_aligned>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	4604      	mov	r4, r0
 800a538:	d14d      	bne.n	800a5d6 <_malloc_r+0xde>
 800a53a:	6834      	ldr	r4, [r6, #0]
 800a53c:	4626      	mov	r6, r4
 800a53e:	2e00      	cmp	r6, #0
 800a540:	d140      	bne.n	800a5c4 <_malloc_r+0xcc>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	4631      	mov	r1, r6
 800a546:	4638      	mov	r0, r7
 800a548:	eb04 0803 	add.w	r8, r4, r3
 800a54c:	f000 f9a4 	bl	800a898 <_sbrk_r>
 800a550:	4580      	cmp	r8, r0
 800a552:	d13a      	bne.n	800a5ca <_malloc_r+0xd2>
 800a554:	6821      	ldr	r1, [r4, #0]
 800a556:	3503      	adds	r5, #3
 800a558:	1a6d      	subs	r5, r5, r1
 800a55a:	f025 0503 	bic.w	r5, r5, #3
 800a55e:	3508      	adds	r5, #8
 800a560:	2d0c      	cmp	r5, #12
 800a562:	bf38      	it	cc
 800a564:	250c      	movcc	r5, #12
 800a566:	4629      	mov	r1, r5
 800a568:	4638      	mov	r0, r7
 800a56a:	f7ff ffa5 	bl	800a4b8 <sbrk_aligned>
 800a56e:	3001      	adds	r0, #1
 800a570:	d02b      	beq.n	800a5ca <_malloc_r+0xd2>
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	442b      	add	r3, r5
 800a576:	6023      	str	r3, [r4, #0]
 800a578:	e00e      	b.n	800a598 <_malloc_r+0xa0>
 800a57a:	6822      	ldr	r2, [r4, #0]
 800a57c:	1b52      	subs	r2, r2, r5
 800a57e:	d41e      	bmi.n	800a5be <_malloc_r+0xc6>
 800a580:	2a0b      	cmp	r2, #11
 800a582:	d916      	bls.n	800a5b2 <_malloc_r+0xba>
 800a584:	1961      	adds	r1, r4, r5
 800a586:	42a3      	cmp	r3, r4
 800a588:	6025      	str	r5, [r4, #0]
 800a58a:	bf18      	it	ne
 800a58c:	6059      	strne	r1, [r3, #4]
 800a58e:	6863      	ldr	r3, [r4, #4]
 800a590:	bf08      	it	eq
 800a592:	6031      	streq	r1, [r6, #0]
 800a594:	5162      	str	r2, [r4, r5]
 800a596:	604b      	str	r3, [r1, #4]
 800a598:	4638      	mov	r0, r7
 800a59a:	f104 060b 	add.w	r6, r4, #11
 800a59e:	f000 fa87 	bl	800aab0 <__malloc_unlock>
 800a5a2:	f026 0607 	bic.w	r6, r6, #7
 800a5a6:	1d23      	adds	r3, r4, #4
 800a5a8:	1af2      	subs	r2, r6, r3
 800a5aa:	d0b6      	beq.n	800a51a <_malloc_r+0x22>
 800a5ac:	1b9b      	subs	r3, r3, r6
 800a5ae:	50a3      	str	r3, [r4, r2]
 800a5b0:	e7b3      	b.n	800a51a <_malloc_r+0x22>
 800a5b2:	6862      	ldr	r2, [r4, #4]
 800a5b4:	42a3      	cmp	r3, r4
 800a5b6:	bf0c      	ite	eq
 800a5b8:	6032      	streq	r2, [r6, #0]
 800a5ba:	605a      	strne	r2, [r3, #4]
 800a5bc:	e7ec      	b.n	800a598 <_malloc_r+0xa0>
 800a5be:	4623      	mov	r3, r4
 800a5c0:	6864      	ldr	r4, [r4, #4]
 800a5c2:	e7b2      	b.n	800a52a <_malloc_r+0x32>
 800a5c4:	4634      	mov	r4, r6
 800a5c6:	6876      	ldr	r6, [r6, #4]
 800a5c8:	e7b9      	b.n	800a53e <_malloc_r+0x46>
 800a5ca:	230c      	movs	r3, #12
 800a5cc:	603b      	str	r3, [r7, #0]
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	f000 fa6e 	bl	800aab0 <__malloc_unlock>
 800a5d4:	e7a1      	b.n	800a51a <_malloc_r+0x22>
 800a5d6:	6025      	str	r5, [r4, #0]
 800a5d8:	e7de      	b.n	800a598 <_malloc_r+0xa0>
 800a5da:	bf00      	nop
 800a5dc:	20000844 	.word	0x20000844

0800a5e0 <__ssputs_r>:
 800a5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e4:	688e      	ldr	r6, [r1, #8]
 800a5e6:	429e      	cmp	r6, r3
 800a5e8:	4682      	mov	sl, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	4690      	mov	r8, r2
 800a5ee:	461f      	mov	r7, r3
 800a5f0:	d838      	bhi.n	800a664 <__ssputs_r+0x84>
 800a5f2:	898a      	ldrh	r2, [r1, #12]
 800a5f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5f8:	d032      	beq.n	800a660 <__ssputs_r+0x80>
 800a5fa:	6825      	ldr	r5, [r4, #0]
 800a5fc:	6909      	ldr	r1, [r1, #16]
 800a5fe:	eba5 0901 	sub.w	r9, r5, r1
 800a602:	6965      	ldr	r5, [r4, #20]
 800a604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a608:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a60c:	3301      	adds	r3, #1
 800a60e:	444b      	add	r3, r9
 800a610:	106d      	asrs	r5, r5, #1
 800a612:	429d      	cmp	r5, r3
 800a614:	bf38      	it	cc
 800a616:	461d      	movcc	r5, r3
 800a618:	0553      	lsls	r3, r2, #21
 800a61a:	d531      	bpl.n	800a680 <__ssputs_r+0xa0>
 800a61c:	4629      	mov	r1, r5
 800a61e:	f7ff ff6b 	bl	800a4f8 <_malloc_r>
 800a622:	4606      	mov	r6, r0
 800a624:	b950      	cbnz	r0, 800a63c <__ssputs_r+0x5c>
 800a626:	230c      	movs	r3, #12
 800a628:	f8ca 3000 	str.w	r3, [sl]
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a632:	81a3      	strh	r3, [r4, #12]
 800a634:	f04f 30ff 	mov.w	r0, #4294967295
 800a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63c:	6921      	ldr	r1, [r4, #16]
 800a63e:	464a      	mov	r2, r9
 800a640:	f7fd fcd8 	bl	8007ff4 <memcpy>
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	6126      	str	r6, [r4, #16]
 800a652:	6165      	str	r5, [r4, #20]
 800a654:	444e      	add	r6, r9
 800a656:	eba5 0509 	sub.w	r5, r5, r9
 800a65a:	6026      	str	r6, [r4, #0]
 800a65c:	60a5      	str	r5, [r4, #8]
 800a65e:	463e      	mov	r6, r7
 800a660:	42be      	cmp	r6, r7
 800a662:	d900      	bls.n	800a666 <__ssputs_r+0x86>
 800a664:	463e      	mov	r6, r7
 800a666:	6820      	ldr	r0, [r4, #0]
 800a668:	4632      	mov	r2, r6
 800a66a:	4641      	mov	r1, r8
 800a66c:	f000 fa00 	bl	800aa70 <memmove>
 800a670:	68a3      	ldr	r3, [r4, #8]
 800a672:	1b9b      	subs	r3, r3, r6
 800a674:	60a3      	str	r3, [r4, #8]
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	4433      	add	r3, r6
 800a67a:	6023      	str	r3, [r4, #0]
 800a67c:	2000      	movs	r0, #0
 800a67e:	e7db      	b.n	800a638 <__ssputs_r+0x58>
 800a680:	462a      	mov	r2, r5
 800a682:	f000 fa1b 	bl	800aabc <_realloc_r>
 800a686:	4606      	mov	r6, r0
 800a688:	2800      	cmp	r0, #0
 800a68a:	d1e1      	bne.n	800a650 <__ssputs_r+0x70>
 800a68c:	6921      	ldr	r1, [r4, #16]
 800a68e:	4650      	mov	r0, sl
 800a690:	f7ff fec6 	bl	800a420 <_free_r>
 800a694:	e7c7      	b.n	800a626 <__ssputs_r+0x46>
	...

0800a698 <_svfiprintf_r>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	4698      	mov	r8, r3
 800a69e:	898b      	ldrh	r3, [r1, #12]
 800a6a0:	061b      	lsls	r3, r3, #24
 800a6a2:	b09d      	sub	sp, #116	; 0x74
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	460d      	mov	r5, r1
 800a6a8:	4614      	mov	r4, r2
 800a6aa:	d50e      	bpl.n	800a6ca <_svfiprintf_r+0x32>
 800a6ac:	690b      	ldr	r3, [r1, #16]
 800a6ae:	b963      	cbnz	r3, 800a6ca <_svfiprintf_r+0x32>
 800a6b0:	2140      	movs	r1, #64	; 0x40
 800a6b2:	f7ff ff21 	bl	800a4f8 <_malloc_r>
 800a6b6:	6028      	str	r0, [r5, #0]
 800a6b8:	6128      	str	r0, [r5, #16]
 800a6ba:	b920      	cbnz	r0, 800a6c6 <_svfiprintf_r+0x2e>
 800a6bc:	230c      	movs	r3, #12
 800a6be:	603b      	str	r3, [r7, #0]
 800a6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c4:	e0d1      	b.n	800a86a <_svfiprintf_r+0x1d2>
 800a6c6:	2340      	movs	r3, #64	; 0x40
 800a6c8:	616b      	str	r3, [r5, #20]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ce:	2320      	movs	r3, #32
 800a6d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6d8:	2330      	movs	r3, #48	; 0x30
 800a6da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a884 <_svfiprintf_r+0x1ec>
 800a6de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6e2:	f04f 0901 	mov.w	r9, #1
 800a6e6:	4623      	mov	r3, r4
 800a6e8:	469a      	mov	sl, r3
 800a6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ee:	b10a      	cbz	r2, 800a6f4 <_svfiprintf_r+0x5c>
 800a6f0:	2a25      	cmp	r2, #37	; 0x25
 800a6f2:	d1f9      	bne.n	800a6e8 <_svfiprintf_r+0x50>
 800a6f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a6f8:	d00b      	beq.n	800a712 <_svfiprintf_r+0x7a>
 800a6fa:	465b      	mov	r3, fp
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	4638      	mov	r0, r7
 800a702:	f7ff ff6d 	bl	800a5e0 <__ssputs_r>
 800a706:	3001      	adds	r0, #1
 800a708:	f000 80aa 	beq.w	800a860 <_svfiprintf_r+0x1c8>
 800a70c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a70e:	445a      	add	r2, fp
 800a710:	9209      	str	r2, [sp, #36]	; 0x24
 800a712:	f89a 3000 	ldrb.w	r3, [sl]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 80a2 	beq.w	800a860 <_svfiprintf_r+0x1c8>
 800a71c:	2300      	movs	r3, #0
 800a71e:	f04f 32ff 	mov.w	r2, #4294967295
 800a722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a726:	f10a 0a01 	add.w	sl, sl, #1
 800a72a:	9304      	str	r3, [sp, #16]
 800a72c:	9307      	str	r3, [sp, #28]
 800a72e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a732:	931a      	str	r3, [sp, #104]	; 0x68
 800a734:	4654      	mov	r4, sl
 800a736:	2205      	movs	r2, #5
 800a738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a73c:	4851      	ldr	r0, [pc, #324]	; (800a884 <_svfiprintf_r+0x1ec>)
 800a73e:	f7f5 fd4f 	bl	80001e0 <memchr>
 800a742:	9a04      	ldr	r2, [sp, #16]
 800a744:	b9d8      	cbnz	r0, 800a77e <_svfiprintf_r+0xe6>
 800a746:	06d0      	lsls	r0, r2, #27
 800a748:	bf44      	itt	mi
 800a74a:	2320      	movmi	r3, #32
 800a74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a750:	0711      	lsls	r1, r2, #28
 800a752:	bf44      	itt	mi
 800a754:	232b      	movmi	r3, #43	; 0x2b
 800a756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a75a:	f89a 3000 	ldrb.w	r3, [sl]
 800a75e:	2b2a      	cmp	r3, #42	; 0x2a
 800a760:	d015      	beq.n	800a78e <_svfiprintf_r+0xf6>
 800a762:	9a07      	ldr	r2, [sp, #28]
 800a764:	4654      	mov	r4, sl
 800a766:	2000      	movs	r0, #0
 800a768:	f04f 0c0a 	mov.w	ip, #10
 800a76c:	4621      	mov	r1, r4
 800a76e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a772:	3b30      	subs	r3, #48	; 0x30
 800a774:	2b09      	cmp	r3, #9
 800a776:	d94e      	bls.n	800a816 <_svfiprintf_r+0x17e>
 800a778:	b1b0      	cbz	r0, 800a7a8 <_svfiprintf_r+0x110>
 800a77a:	9207      	str	r2, [sp, #28]
 800a77c:	e014      	b.n	800a7a8 <_svfiprintf_r+0x110>
 800a77e:	eba0 0308 	sub.w	r3, r0, r8
 800a782:	fa09 f303 	lsl.w	r3, r9, r3
 800a786:	4313      	orrs	r3, r2
 800a788:	9304      	str	r3, [sp, #16]
 800a78a:	46a2      	mov	sl, r4
 800a78c:	e7d2      	b.n	800a734 <_svfiprintf_r+0x9c>
 800a78e:	9b03      	ldr	r3, [sp, #12]
 800a790:	1d19      	adds	r1, r3, #4
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	9103      	str	r1, [sp, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	bfbb      	ittet	lt
 800a79a:	425b      	neglt	r3, r3
 800a79c:	f042 0202 	orrlt.w	r2, r2, #2
 800a7a0:	9307      	strge	r3, [sp, #28]
 800a7a2:	9307      	strlt	r3, [sp, #28]
 800a7a4:	bfb8      	it	lt
 800a7a6:	9204      	strlt	r2, [sp, #16]
 800a7a8:	7823      	ldrb	r3, [r4, #0]
 800a7aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ac:	d10c      	bne.n	800a7c8 <_svfiprintf_r+0x130>
 800a7ae:	7863      	ldrb	r3, [r4, #1]
 800a7b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b2:	d135      	bne.n	800a820 <_svfiprintf_r+0x188>
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	1d1a      	adds	r2, r3, #4
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	9203      	str	r2, [sp, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	bfb8      	it	lt
 800a7c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7c4:	3402      	adds	r4, #2
 800a7c6:	9305      	str	r3, [sp, #20]
 800a7c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a894 <_svfiprintf_r+0x1fc>
 800a7cc:	7821      	ldrb	r1, [r4, #0]
 800a7ce:	2203      	movs	r2, #3
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	f7f5 fd05 	bl	80001e0 <memchr>
 800a7d6:	b140      	cbz	r0, 800a7ea <_svfiprintf_r+0x152>
 800a7d8:	2340      	movs	r3, #64	; 0x40
 800a7da:	eba0 000a 	sub.w	r0, r0, sl
 800a7de:	fa03 f000 	lsl.w	r0, r3, r0
 800a7e2:	9b04      	ldr	r3, [sp, #16]
 800a7e4:	4303      	orrs	r3, r0
 800a7e6:	3401      	adds	r4, #1
 800a7e8:	9304      	str	r3, [sp, #16]
 800a7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ee:	4826      	ldr	r0, [pc, #152]	; (800a888 <_svfiprintf_r+0x1f0>)
 800a7f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7f4:	2206      	movs	r2, #6
 800a7f6:	f7f5 fcf3 	bl	80001e0 <memchr>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d038      	beq.n	800a870 <_svfiprintf_r+0x1d8>
 800a7fe:	4b23      	ldr	r3, [pc, #140]	; (800a88c <_svfiprintf_r+0x1f4>)
 800a800:	bb1b      	cbnz	r3, 800a84a <_svfiprintf_r+0x1b2>
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	3307      	adds	r3, #7
 800a806:	f023 0307 	bic.w	r3, r3, #7
 800a80a:	3308      	adds	r3, #8
 800a80c:	9303      	str	r3, [sp, #12]
 800a80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a810:	4433      	add	r3, r6
 800a812:	9309      	str	r3, [sp, #36]	; 0x24
 800a814:	e767      	b.n	800a6e6 <_svfiprintf_r+0x4e>
 800a816:	fb0c 3202 	mla	r2, ip, r2, r3
 800a81a:	460c      	mov	r4, r1
 800a81c:	2001      	movs	r0, #1
 800a81e:	e7a5      	b.n	800a76c <_svfiprintf_r+0xd4>
 800a820:	2300      	movs	r3, #0
 800a822:	3401      	adds	r4, #1
 800a824:	9305      	str	r3, [sp, #20]
 800a826:	4619      	mov	r1, r3
 800a828:	f04f 0c0a 	mov.w	ip, #10
 800a82c:	4620      	mov	r0, r4
 800a82e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a832:	3a30      	subs	r2, #48	; 0x30
 800a834:	2a09      	cmp	r2, #9
 800a836:	d903      	bls.n	800a840 <_svfiprintf_r+0x1a8>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d0c5      	beq.n	800a7c8 <_svfiprintf_r+0x130>
 800a83c:	9105      	str	r1, [sp, #20]
 800a83e:	e7c3      	b.n	800a7c8 <_svfiprintf_r+0x130>
 800a840:	fb0c 2101 	mla	r1, ip, r1, r2
 800a844:	4604      	mov	r4, r0
 800a846:	2301      	movs	r3, #1
 800a848:	e7f0      	b.n	800a82c <_svfiprintf_r+0x194>
 800a84a:	ab03      	add	r3, sp, #12
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	462a      	mov	r2, r5
 800a850:	4b0f      	ldr	r3, [pc, #60]	; (800a890 <_svfiprintf_r+0x1f8>)
 800a852:	a904      	add	r1, sp, #16
 800a854:	4638      	mov	r0, r7
 800a856:	f7fd fc83 	bl	8008160 <_printf_float>
 800a85a:	1c42      	adds	r2, r0, #1
 800a85c:	4606      	mov	r6, r0
 800a85e:	d1d6      	bne.n	800a80e <_svfiprintf_r+0x176>
 800a860:	89ab      	ldrh	r3, [r5, #12]
 800a862:	065b      	lsls	r3, r3, #25
 800a864:	f53f af2c 	bmi.w	800a6c0 <_svfiprintf_r+0x28>
 800a868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a86a:	b01d      	add	sp, #116	; 0x74
 800a86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a870:	ab03      	add	r3, sp, #12
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	462a      	mov	r2, r5
 800a876:	4b06      	ldr	r3, [pc, #24]	; (800a890 <_svfiprintf_r+0x1f8>)
 800a878:	a904      	add	r1, sp, #16
 800a87a:	4638      	mov	r0, r7
 800a87c:	f7fd ff14 	bl	80086a8 <_printf_i>
 800a880:	e7eb      	b.n	800a85a <_svfiprintf_r+0x1c2>
 800a882:	bf00      	nop
 800a884:	0800b56c 	.word	0x0800b56c
 800a888:	0800b576 	.word	0x0800b576
 800a88c:	08008161 	.word	0x08008161
 800a890:	0800a5e1 	.word	0x0800a5e1
 800a894:	0800b572 	.word	0x0800b572

0800a898 <_sbrk_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4d06      	ldr	r5, [pc, #24]	; (800a8b4 <_sbrk_r+0x1c>)
 800a89c:	2300      	movs	r3, #0
 800a89e:	4604      	mov	r4, r0
 800a8a0:	4608      	mov	r0, r1
 800a8a2:	602b      	str	r3, [r5, #0]
 800a8a4:	f7f7 fa2e 	bl	8001d04 <_sbrk>
 800a8a8:	1c43      	adds	r3, r0, #1
 800a8aa:	d102      	bne.n	800a8b2 <_sbrk_r+0x1a>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	b103      	cbz	r3, 800a8b2 <_sbrk_r+0x1a>
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	2000084c 	.word	0x2000084c

0800a8b8 <__sread>:
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c0:	f000 fa84 	bl	800adcc <_read_r>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	bfab      	itete	ge
 800a8c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a8cc:	181b      	addge	r3, r3, r0
 800a8ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8d2:	bfac      	ite	ge
 800a8d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8d6:	81a3      	strhlt	r3, [r4, #12]
 800a8d8:	bd10      	pop	{r4, pc}

0800a8da <__swrite>:
 800a8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8de:	461f      	mov	r7, r3
 800a8e0:	898b      	ldrh	r3, [r1, #12]
 800a8e2:	05db      	lsls	r3, r3, #23
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	d505      	bpl.n	800a8f8 <__swrite+0x1e>
 800a8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f000 f898 	bl	800aa28 <_lseek_r>
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	4632      	mov	r2, r6
 800a906:	463b      	mov	r3, r7
 800a908:	4628      	mov	r0, r5
 800a90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a90e:	f000 b817 	b.w	800a940 <_write_r>

0800a912 <__sseek>:
 800a912:	b510      	push	{r4, lr}
 800a914:	460c      	mov	r4, r1
 800a916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91a:	f000 f885 	bl	800aa28 <_lseek_r>
 800a91e:	1c43      	adds	r3, r0, #1
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	bf15      	itete	ne
 800a924:	6560      	strne	r0, [r4, #84]	; 0x54
 800a926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a92a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a92e:	81a3      	strheq	r3, [r4, #12]
 800a930:	bf18      	it	ne
 800a932:	81a3      	strhne	r3, [r4, #12]
 800a934:	bd10      	pop	{r4, pc}

0800a936 <__sclose>:
 800a936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93a:	f000 b831 	b.w	800a9a0 <_close_r>
	...

0800a940 <_write_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	; (800a960 <_write_r+0x20>)
 800a944:	4604      	mov	r4, r0
 800a946:	4608      	mov	r0, r1
 800a948:	4611      	mov	r1, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	602a      	str	r2, [r5, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	f7f7 f987 	bl	8001c62 <_write>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_write_r+0x1e>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_write_r+0x1e>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	2000084c 	.word	0x2000084c

0800a964 <__assert_func>:
 800a964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a966:	4614      	mov	r4, r2
 800a968:	461a      	mov	r2, r3
 800a96a:	4b09      	ldr	r3, [pc, #36]	; (800a990 <__assert_func+0x2c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4605      	mov	r5, r0
 800a970:	68d8      	ldr	r0, [r3, #12]
 800a972:	b14c      	cbz	r4, 800a988 <__assert_func+0x24>
 800a974:	4b07      	ldr	r3, [pc, #28]	; (800a994 <__assert_func+0x30>)
 800a976:	9100      	str	r1, [sp, #0]
 800a978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a97c:	4906      	ldr	r1, [pc, #24]	; (800a998 <__assert_func+0x34>)
 800a97e:	462b      	mov	r3, r5
 800a980:	f000 f81e 	bl	800a9c0 <fiprintf>
 800a984:	f000 fa41 	bl	800ae0a <abort>
 800a988:	4b04      	ldr	r3, [pc, #16]	; (800a99c <__assert_func+0x38>)
 800a98a:	461c      	mov	r4, r3
 800a98c:	e7f3      	b.n	800a976 <__assert_func+0x12>
 800a98e:	bf00      	nop
 800a990:	2000000c 	.word	0x2000000c
 800a994:	0800b57d 	.word	0x0800b57d
 800a998:	0800b58a 	.word	0x0800b58a
 800a99c:	0800b5b8 	.word	0x0800b5b8

0800a9a0 <_close_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4d06      	ldr	r5, [pc, #24]	; (800a9bc <_close_r+0x1c>)
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	602b      	str	r3, [r5, #0]
 800a9ac:	f7f7 f975 	bl	8001c9a <_close>
 800a9b0:	1c43      	adds	r3, r0, #1
 800a9b2:	d102      	bne.n	800a9ba <_close_r+0x1a>
 800a9b4:	682b      	ldr	r3, [r5, #0]
 800a9b6:	b103      	cbz	r3, 800a9ba <_close_r+0x1a>
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	bd38      	pop	{r3, r4, r5, pc}
 800a9bc:	2000084c 	.word	0x2000084c

0800a9c0 <fiprintf>:
 800a9c0:	b40e      	push	{r1, r2, r3}
 800a9c2:	b503      	push	{r0, r1, lr}
 800a9c4:	4601      	mov	r1, r0
 800a9c6:	ab03      	add	r3, sp, #12
 800a9c8:	4805      	ldr	r0, [pc, #20]	; (800a9e0 <fiprintf+0x20>)
 800a9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ce:	6800      	ldr	r0, [r0, #0]
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	f000 f8cb 	bl	800ab6c <_vfiprintf_r>
 800a9d6:	b002      	add	sp, #8
 800a9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9dc:	b003      	add	sp, #12
 800a9de:	4770      	bx	lr
 800a9e0:	2000000c 	.word	0x2000000c

0800a9e4 <_fstat_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4d07      	ldr	r5, [pc, #28]	; (800aa04 <_fstat_r+0x20>)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	602b      	str	r3, [r5, #0]
 800a9f2:	f7f7 f95e 	bl	8001cb2 <_fstat>
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	d102      	bne.n	800aa00 <_fstat_r+0x1c>
 800a9fa:	682b      	ldr	r3, [r5, #0]
 800a9fc:	b103      	cbz	r3, 800aa00 <_fstat_r+0x1c>
 800a9fe:	6023      	str	r3, [r4, #0]
 800aa00:	bd38      	pop	{r3, r4, r5, pc}
 800aa02:	bf00      	nop
 800aa04:	2000084c 	.word	0x2000084c

0800aa08 <_isatty_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4d06      	ldr	r5, [pc, #24]	; (800aa24 <_isatty_r+0x1c>)
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4608      	mov	r0, r1
 800aa12:	602b      	str	r3, [r5, #0]
 800aa14:	f7f7 f95d 	bl	8001cd2 <_isatty>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d102      	bne.n	800aa22 <_isatty_r+0x1a>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	b103      	cbz	r3, 800aa22 <_isatty_r+0x1a>
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	2000084c 	.word	0x2000084c

0800aa28 <_lseek_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4d07      	ldr	r5, [pc, #28]	; (800aa48 <_lseek_r+0x20>)
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	4608      	mov	r0, r1
 800aa30:	4611      	mov	r1, r2
 800aa32:	2200      	movs	r2, #0
 800aa34:	602a      	str	r2, [r5, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	f7f7 f956 	bl	8001ce8 <_lseek>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_lseek_r+0x1e>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_lseek_r+0x1e>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	2000084c 	.word	0x2000084c

0800aa4c <__ascii_mbtowc>:
 800aa4c:	b082      	sub	sp, #8
 800aa4e:	b901      	cbnz	r1, 800aa52 <__ascii_mbtowc+0x6>
 800aa50:	a901      	add	r1, sp, #4
 800aa52:	b142      	cbz	r2, 800aa66 <__ascii_mbtowc+0x1a>
 800aa54:	b14b      	cbz	r3, 800aa6a <__ascii_mbtowc+0x1e>
 800aa56:	7813      	ldrb	r3, [r2, #0]
 800aa58:	600b      	str	r3, [r1, #0]
 800aa5a:	7812      	ldrb	r2, [r2, #0]
 800aa5c:	1e10      	subs	r0, r2, #0
 800aa5e:	bf18      	it	ne
 800aa60:	2001      	movne	r0, #1
 800aa62:	b002      	add	sp, #8
 800aa64:	4770      	bx	lr
 800aa66:	4610      	mov	r0, r2
 800aa68:	e7fb      	b.n	800aa62 <__ascii_mbtowc+0x16>
 800aa6a:	f06f 0001 	mvn.w	r0, #1
 800aa6e:	e7f8      	b.n	800aa62 <__ascii_mbtowc+0x16>

0800aa70 <memmove>:
 800aa70:	4288      	cmp	r0, r1
 800aa72:	b510      	push	{r4, lr}
 800aa74:	eb01 0402 	add.w	r4, r1, r2
 800aa78:	d902      	bls.n	800aa80 <memmove+0x10>
 800aa7a:	4284      	cmp	r4, r0
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	d807      	bhi.n	800aa90 <memmove+0x20>
 800aa80:	1e43      	subs	r3, r0, #1
 800aa82:	42a1      	cmp	r1, r4
 800aa84:	d008      	beq.n	800aa98 <memmove+0x28>
 800aa86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa8e:	e7f8      	b.n	800aa82 <memmove+0x12>
 800aa90:	4402      	add	r2, r0
 800aa92:	4601      	mov	r1, r0
 800aa94:	428a      	cmp	r2, r1
 800aa96:	d100      	bne.n	800aa9a <memmove+0x2a>
 800aa98:	bd10      	pop	{r4, pc}
 800aa9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaa2:	e7f7      	b.n	800aa94 <memmove+0x24>

0800aaa4 <__malloc_lock>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	; (800aaac <__malloc_lock+0x8>)
 800aaa6:	f7ff b8b2 	b.w	8009c0e <__retarget_lock_acquire_recursive>
 800aaaa:	bf00      	nop
 800aaac:	20000840 	.word	0x20000840

0800aab0 <__malloc_unlock>:
 800aab0:	4801      	ldr	r0, [pc, #4]	; (800aab8 <__malloc_unlock+0x8>)
 800aab2:	f7ff b8ad 	b.w	8009c10 <__retarget_lock_release_recursive>
 800aab6:	bf00      	nop
 800aab8:	20000840 	.word	0x20000840

0800aabc <_realloc_r>:
 800aabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac0:	4680      	mov	r8, r0
 800aac2:	4614      	mov	r4, r2
 800aac4:	460e      	mov	r6, r1
 800aac6:	b921      	cbnz	r1, 800aad2 <_realloc_r+0x16>
 800aac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aacc:	4611      	mov	r1, r2
 800aace:	f7ff bd13 	b.w	800a4f8 <_malloc_r>
 800aad2:	b92a      	cbnz	r2, 800aae0 <_realloc_r+0x24>
 800aad4:	f7ff fca4 	bl	800a420 <_free_r>
 800aad8:	4625      	mov	r5, r4
 800aada:	4628      	mov	r0, r5
 800aadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae0:	f000 f99a 	bl	800ae18 <_malloc_usable_size_r>
 800aae4:	4284      	cmp	r4, r0
 800aae6:	4607      	mov	r7, r0
 800aae8:	d802      	bhi.n	800aaf0 <_realloc_r+0x34>
 800aaea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aaee:	d812      	bhi.n	800ab16 <_realloc_r+0x5a>
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	f7ff fd00 	bl	800a4f8 <_malloc_r>
 800aaf8:	4605      	mov	r5, r0
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d0ed      	beq.n	800aada <_realloc_r+0x1e>
 800aafe:	42bc      	cmp	r4, r7
 800ab00:	4622      	mov	r2, r4
 800ab02:	4631      	mov	r1, r6
 800ab04:	bf28      	it	cs
 800ab06:	463a      	movcs	r2, r7
 800ab08:	f7fd fa74 	bl	8007ff4 <memcpy>
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4640      	mov	r0, r8
 800ab10:	f7ff fc86 	bl	800a420 <_free_r>
 800ab14:	e7e1      	b.n	800aada <_realloc_r+0x1e>
 800ab16:	4635      	mov	r5, r6
 800ab18:	e7df      	b.n	800aada <_realloc_r+0x1e>

0800ab1a <__sfputc_r>:
 800ab1a:	6893      	ldr	r3, [r2, #8]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	b410      	push	{r4}
 800ab22:	6093      	str	r3, [r2, #8]
 800ab24:	da08      	bge.n	800ab38 <__sfputc_r+0x1e>
 800ab26:	6994      	ldr	r4, [r2, #24]
 800ab28:	42a3      	cmp	r3, r4
 800ab2a:	db01      	blt.n	800ab30 <__sfputc_r+0x16>
 800ab2c:	290a      	cmp	r1, #10
 800ab2e:	d103      	bne.n	800ab38 <__sfputc_r+0x1e>
 800ab30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab34:	f7fd bf74 	b.w	8008a20 <__swbuf_r>
 800ab38:	6813      	ldr	r3, [r2, #0]
 800ab3a:	1c58      	adds	r0, r3, #1
 800ab3c:	6010      	str	r0, [r2, #0]
 800ab3e:	7019      	strb	r1, [r3, #0]
 800ab40:	4608      	mov	r0, r1
 800ab42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <__sfputs_r>:
 800ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4a:	4606      	mov	r6, r0
 800ab4c:	460f      	mov	r7, r1
 800ab4e:	4614      	mov	r4, r2
 800ab50:	18d5      	adds	r5, r2, r3
 800ab52:	42ac      	cmp	r4, r5
 800ab54:	d101      	bne.n	800ab5a <__sfputs_r+0x12>
 800ab56:	2000      	movs	r0, #0
 800ab58:	e007      	b.n	800ab6a <__sfputs_r+0x22>
 800ab5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5e:	463a      	mov	r2, r7
 800ab60:	4630      	mov	r0, r6
 800ab62:	f7ff ffda 	bl	800ab1a <__sfputc_r>
 800ab66:	1c43      	adds	r3, r0, #1
 800ab68:	d1f3      	bne.n	800ab52 <__sfputs_r+0xa>
 800ab6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab6c <_vfiprintf_r>:
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	460d      	mov	r5, r1
 800ab72:	b09d      	sub	sp, #116	; 0x74
 800ab74:	4614      	mov	r4, r2
 800ab76:	4698      	mov	r8, r3
 800ab78:	4606      	mov	r6, r0
 800ab7a:	b118      	cbz	r0, 800ab84 <_vfiprintf_r+0x18>
 800ab7c:	6983      	ldr	r3, [r0, #24]
 800ab7e:	b90b      	cbnz	r3, 800ab84 <_vfiprintf_r+0x18>
 800ab80:	f7fe ffa2 	bl	8009ac8 <__sinit>
 800ab84:	4b89      	ldr	r3, [pc, #548]	; (800adac <_vfiprintf_r+0x240>)
 800ab86:	429d      	cmp	r5, r3
 800ab88:	d11b      	bne.n	800abc2 <_vfiprintf_r+0x56>
 800ab8a:	6875      	ldr	r5, [r6, #4]
 800ab8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab8e:	07d9      	lsls	r1, r3, #31
 800ab90:	d405      	bmi.n	800ab9e <_vfiprintf_r+0x32>
 800ab92:	89ab      	ldrh	r3, [r5, #12]
 800ab94:	059a      	lsls	r2, r3, #22
 800ab96:	d402      	bmi.n	800ab9e <_vfiprintf_r+0x32>
 800ab98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab9a:	f7ff f838 	bl	8009c0e <__retarget_lock_acquire_recursive>
 800ab9e:	89ab      	ldrh	r3, [r5, #12]
 800aba0:	071b      	lsls	r3, r3, #28
 800aba2:	d501      	bpl.n	800aba8 <_vfiprintf_r+0x3c>
 800aba4:	692b      	ldr	r3, [r5, #16]
 800aba6:	b9eb      	cbnz	r3, 800abe4 <_vfiprintf_r+0x78>
 800aba8:	4629      	mov	r1, r5
 800abaa:	4630      	mov	r0, r6
 800abac:	f7fd ff8a 	bl	8008ac4 <__swsetup_r>
 800abb0:	b1c0      	cbz	r0, 800abe4 <_vfiprintf_r+0x78>
 800abb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abb4:	07dc      	lsls	r4, r3, #31
 800abb6:	d50e      	bpl.n	800abd6 <_vfiprintf_r+0x6a>
 800abb8:	f04f 30ff 	mov.w	r0, #4294967295
 800abbc:	b01d      	add	sp, #116	; 0x74
 800abbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc2:	4b7b      	ldr	r3, [pc, #492]	; (800adb0 <_vfiprintf_r+0x244>)
 800abc4:	429d      	cmp	r5, r3
 800abc6:	d101      	bne.n	800abcc <_vfiprintf_r+0x60>
 800abc8:	68b5      	ldr	r5, [r6, #8]
 800abca:	e7df      	b.n	800ab8c <_vfiprintf_r+0x20>
 800abcc:	4b79      	ldr	r3, [pc, #484]	; (800adb4 <_vfiprintf_r+0x248>)
 800abce:	429d      	cmp	r5, r3
 800abd0:	bf08      	it	eq
 800abd2:	68f5      	ldreq	r5, [r6, #12]
 800abd4:	e7da      	b.n	800ab8c <_vfiprintf_r+0x20>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	0598      	lsls	r0, r3, #22
 800abda:	d4ed      	bmi.n	800abb8 <_vfiprintf_r+0x4c>
 800abdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abde:	f7ff f817 	bl	8009c10 <__retarget_lock_release_recursive>
 800abe2:	e7e9      	b.n	800abb8 <_vfiprintf_r+0x4c>
 800abe4:	2300      	movs	r3, #0
 800abe6:	9309      	str	r3, [sp, #36]	; 0x24
 800abe8:	2320      	movs	r3, #32
 800abea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abee:	f8cd 800c 	str.w	r8, [sp, #12]
 800abf2:	2330      	movs	r3, #48	; 0x30
 800abf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800adb8 <_vfiprintf_r+0x24c>
 800abf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abfc:	f04f 0901 	mov.w	r9, #1
 800ac00:	4623      	mov	r3, r4
 800ac02:	469a      	mov	sl, r3
 800ac04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac08:	b10a      	cbz	r2, 800ac0e <_vfiprintf_r+0xa2>
 800ac0a:	2a25      	cmp	r2, #37	; 0x25
 800ac0c:	d1f9      	bne.n	800ac02 <_vfiprintf_r+0x96>
 800ac0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac12:	d00b      	beq.n	800ac2c <_vfiprintf_r+0xc0>
 800ac14:	465b      	mov	r3, fp
 800ac16:	4622      	mov	r2, r4
 800ac18:	4629      	mov	r1, r5
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f7ff ff94 	bl	800ab48 <__sfputs_r>
 800ac20:	3001      	adds	r0, #1
 800ac22:	f000 80aa 	beq.w	800ad7a <_vfiprintf_r+0x20e>
 800ac26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac28:	445a      	add	r2, fp
 800ac2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 80a2 	beq.w	800ad7a <_vfiprintf_r+0x20e>
 800ac36:	2300      	movs	r3, #0
 800ac38:	f04f 32ff 	mov.w	r2, #4294967295
 800ac3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac40:	f10a 0a01 	add.w	sl, sl, #1
 800ac44:	9304      	str	r3, [sp, #16]
 800ac46:	9307      	str	r3, [sp, #28]
 800ac48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac4c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac4e:	4654      	mov	r4, sl
 800ac50:	2205      	movs	r2, #5
 800ac52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac56:	4858      	ldr	r0, [pc, #352]	; (800adb8 <_vfiprintf_r+0x24c>)
 800ac58:	f7f5 fac2 	bl	80001e0 <memchr>
 800ac5c:	9a04      	ldr	r2, [sp, #16]
 800ac5e:	b9d8      	cbnz	r0, 800ac98 <_vfiprintf_r+0x12c>
 800ac60:	06d1      	lsls	r1, r2, #27
 800ac62:	bf44      	itt	mi
 800ac64:	2320      	movmi	r3, #32
 800ac66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac6a:	0713      	lsls	r3, r2, #28
 800ac6c:	bf44      	itt	mi
 800ac6e:	232b      	movmi	r3, #43	; 0x2b
 800ac70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac74:	f89a 3000 	ldrb.w	r3, [sl]
 800ac78:	2b2a      	cmp	r3, #42	; 0x2a
 800ac7a:	d015      	beq.n	800aca8 <_vfiprintf_r+0x13c>
 800ac7c:	9a07      	ldr	r2, [sp, #28]
 800ac7e:	4654      	mov	r4, sl
 800ac80:	2000      	movs	r0, #0
 800ac82:	f04f 0c0a 	mov.w	ip, #10
 800ac86:	4621      	mov	r1, r4
 800ac88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac8c:	3b30      	subs	r3, #48	; 0x30
 800ac8e:	2b09      	cmp	r3, #9
 800ac90:	d94e      	bls.n	800ad30 <_vfiprintf_r+0x1c4>
 800ac92:	b1b0      	cbz	r0, 800acc2 <_vfiprintf_r+0x156>
 800ac94:	9207      	str	r2, [sp, #28]
 800ac96:	e014      	b.n	800acc2 <_vfiprintf_r+0x156>
 800ac98:	eba0 0308 	sub.w	r3, r0, r8
 800ac9c:	fa09 f303 	lsl.w	r3, r9, r3
 800aca0:	4313      	orrs	r3, r2
 800aca2:	9304      	str	r3, [sp, #16]
 800aca4:	46a2      	mov	sl, r4
 800aca6:	e7d2      	b.n	800ac4e <_vfiprintf_r+0xe2>
 800aca8:	9b03      	ldr	r3, [sp, #12]
 800acaa:	1d19      	adds	r1, r3, #4
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	9103      	str	r1, [sp, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	bfbb      	ittet	lt
 800acb4:	425b      	neglt	r3, r3
 800acb6:	f042 0202 	orrlt.w	r2, r2, #2
 800acba:	9307      	strge	r3, [sp, #28]
 800acbc:	9307      	strlt	r3, [sp, #28]
 800acbe:	bfb8      	it	lt
 800acc0:	9204      	strlt	r2, [sp, #16]
 800acc2:	7823      	ldrb	r3, [r4, #0]
 800acc4:	2b2e      	cmp	r3, #46	; 0x2e
 800acc6:	d10c      	bne.n	800ace2 <_vfiprintf_r+0x176>
 800acc8:	7863      	ldrb	r3, [r4, #1]
 800acca:	2b2a      	cmp	r3, #42	; 0x2a
 800accc:	d135      	bne.n	800ad3a <_vfiprintf_r+0x1ce>
 800acce:	9b03      	ldr	r3, [sp, #12]
 800acd0:	1d1a      	adds	r2, r3, #4
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	9203      	str	r2, [sp, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bfb8      	it	lt
 800acda:	f04f 33ff 	movlt.w	r3, #4294967295
 800acde:	3402      	adds	r4, #2
 800ace0:	9305      	str	r3, [sp, #20]
 800ace2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800adc8 <_vfiprintf_r+0x25c>
 800ace6:	7821      	ldrb	r1, [r4, #0]
 800ace8:	2203      	movs	r2, #3
 800acea:	4650      	mov	r0, sl
 800acec:	f7f5 fa78 	bl	80001e0 <memchr>
 800acf0:	b140      	cbz	r0, 800ad04 <_vfiprintf_r+0x198>
 800acf2:	2340      	movs	r3, #64	; 0x40
 800acf4:	eba0 000a 	sub.w	r0, r0, sl
 800acf8:	fa03 f000 	lsl.w	r0, r3, r0
 800acfc:	9b04      	ldr	r3, [sp, #16]
 800acfe:	4303      	orrs	r3, r0
 800ad00:	3401      	adds	r4, #1
 800ad02:	9304      	str	r3, [sp, #16]
 800ad04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad08:	482c      	ldr	r0, [pc, #176]	; (800adbc <_vfiprintf_r+0x250>)
 800ad0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad0e:	2206      	movs	r2, #6
 800ad10:	f7f5 fa66 	bl	80001e0 <memchr>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d03f      	beq.n	800ad98 <_vfiprintf_r+0x22c>
 800ad18:	4b29      	ldr	r3, [pc, #164]	; (800adc0 <_vfiprintf_r+0x254>)
 800ad1a:	bb1b      	cbnz	r3, 800ad64 <_vfiprintf_r+0x1f8>
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	3307      	adds	r3, #7
 800ad20:	f023 0307 	bic.w	r3, r3, #7
 800ad24:	3308      	adds	r3, #8
 800ad26:	9303      	str	r3, [sp, #12]
 800ad28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2a:	443b      	add	r3, r7
 800ad2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad2e:	e767      	b.n	800ac00 <_vfiprintf_r+0x94>
 800ad30:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad34:	460c      	mov	r4, r1
 800ad36:	2001      	movs	r0, #1
 800ad38:	e7a5      	b.n	800ac86 <_vfiprintf_r+0x11a>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	3401      	adds	r4, #1
 800ad3e:	9305      	str	r3, [sp, #20]
 800ad40:	4619      	mov	r1, r3
 800ad42:	f04f 0c0a 	mov.w	ip, #10
 800ad46:	4620      	mov	r0, r4
 800ad48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad4c:	3a30      	subs	r2, #48	; 0x30
 800ad4e:	2a09      	cmp	r2, #9
 800ad50:	d903      	bls.n	800ad5a <_vfiprintf_r+0x1ee>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0c5      	beq.n	800ace2 <_vfiprintf_r+0x176>
 800ad56:	9105      	str	r1, [sp, #20]
 800ad58:	e7c3      	b.n	800ace2 <_vfiprintf_r+0x176>
 800ad5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad5e:	4604      	mov	r4, r0
 800ad60:	2301      	movs	r3, #1
 800ad62:	e7f0      	b.n	800ad46 <_vfiprintf_r+0x1da>
 800ad64:	ab03      	add	r3, sp, #12
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	462a      	mov	r2, r5
 800ad6a:	4b16      	ldr	r3, [pc, #88]	; (800adc4 <_vfiprintf_r+0x258>)
 800ad6c:	a904      	add	r1, sp, #16
 800ad6e:	4630      	mov	r0, r6
 800ad70:	f7fd f9f6 	bl	8008160 <_printf_float>
 800ad74:	4607      	mov	r7, r0
 800ad76:	1c78      	adds	r0, r7, #1
 800ad78:	d1d6      	bne.n	800ad28 <_vfiprintf_r+0x1bc>
 800ad7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad7c:	07d9      	lsls	r1, r3, #31
 800ad7e:	d405      	bmi.n	800ad8c <_vfiprintf_r+0x220>
 800ad80:	89ab      	ldrh	r3, [r5, #12]
 800ad82:	059a      	lsls	r2, r3, #22
 800ad84:	d402      	bmi.n	800ad8c <_vfiprintf_r+0x220>
 800ad86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad88:	f7fe ff42 	bl	8009c10 <__retarget_lock_release_recursive>
 800ad8c:	89ab      	ldrh	r3, [r5, #12]
 800ad8e:	065b      	lsls	r3, r3, #25
 800ad90:	f53f af12 	bmi.w	800abb8 <_vfiprintf_r+0x4c>
 800ad94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad96:	e711      	b.n	800abbc <_vfiprintf_r+0x50>
 800ad98:	ab03      	add	r3, sp, #12
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	462a      	mov	r2, r5
 800ad9e:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <_vfiprintf_r+0x258>)
 800ada0:	a904      	add	r1, sp, #16
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7fd fc80 	bl	80086a8 <_printf_i>
 800ada8:	e7e4      	b.n	800ad74 <_vfiprintf_r+0x208>
 800adaa:	bf00      	nop
 800adac:	0800b3d4 	.word	0x0800b3d4
 800adb0:	0800b3f4 	.word	0x0800b3f4
 800adb4:	0800b3b4 	.word	0x0800b3b4
 800adb8:	0800b56c 	.word	0x0800b56c
 800adbc:	0800b576 	.word	0x0800b576
 800adc0:	08008161 	.word	0x08008161
 800adc4:	0800ab49 	.word	0x0800ab49
 800adc8:	0800b572 	.word	0x0800b572

0800adcc <_read_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d07      	ldr	r5, [pc, #28]	; (800adec <_read_r+0x20>)
 800add0:	4604      	mov	r4, r0
 800add2:	4608      	mov	r0, r1
 800add4:	4611      	mov	r1, r2
 800add6:	2200      	movs	r2, #0
 800add8:	602a      	str	r2, [r5, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	f7f6 ff24 	bl	8001c28 <_read>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_read_r+0x1e>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_read_r+0x1e>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	2000084c 	.word	0x2000084c

0800adf0 <__ascii_wctomb>:
 800adf0:	b149      	cbz	r1, 800ae06 <__ascii_wctomb+0x16>
 800adf2:	2aff      	cmp	r2, #255	; 0xff
 800adf4:	bf85      	ittet	hi
 800adf6:	238a      	movhi	r3, #138	; 0x8a
 800adf8:	6003      	strhi	r3, [r0, #0]
 800adfa:	700a      	strbls	r2, [r1, #0]
 800adfc:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae00:	bf98      	it	ls
 800ae02:	2001      	movls	r0, #1
 800ae04:	4770      	bx	lr
 800ae06:	4608      	mov	r0, r1
 800ae08:	4770      	bx	lr

0800ae0a <abort>:
 800ae0a:	b508      	push	{r3, lr}
 800ae0c:	2006      	movs	r0, #6
 800ae0e:	f000 f833 	bl	800ae78 <raise>
 800ae12:	2001      	movs	r0, #1
 800ae14:	f7f6 fefe 	bl	8001c14 <_exit>

0800ae18 <_malloc_usable_size_r>:
 800ae18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae1c:	1f18      	subs	r0, r3, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	bfbc      	itt	lt
 800ae22:	580b      	ldrlt	r3, [r1, r0]
 800ae24:	18c0      	addlt	r0, r0, r3
 800ae26:	4770      	bx	lr

0800ae28 <_raise_r>:
 800ae28:	291f      	cmp	r1, #31
 800ae2a:	b538      	push	{r3, r4, r5, lr}
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	460d      	mov	r5, r1
 800ae30:	d904      	bls.n	800ae3c <_raise_r+0x14>
 800ae32:	2316      	movs	r3, #22
 800ae34:	6003      	str	r3, [r0, #0]
 800ae36:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae3e:	b112      	cbz	r2, 800ae46 <_raise_r+0x1e>
 800ae40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae44:	b94b      	cbnz	r3, 800ae5a <_raise_r+0x32>
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 f830 	bl	800aeac <_getpid_r>
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4601      	mov	r1, r0
 800ae50:	4620      	mov	r0, r4
 800ae52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae56:	f000 b817 	b.w	800ae88 <_kill_r>
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d00a      	beq.n	800ae74 <_raise_r+0x4c>
 800ae5e:	1c59      	adds	r1, r3, #1
 800ae60:	d103      	bne.n	800ae6a <_raise_r+0x42>
 800ae62:	2316      	movs	r3, #22
 800ae64:	6003      	str	r3, [r0, #0]
 800ae66:	2001      	movs	r0, #1
 800ae68:	e7e7      	b.n	800ae3a <_raise_r+0x12>
 800ae6a:	2400      	movs	r4, #0
 800ae6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae70:	4628      	mov	r0, r5
 800ae72:	4798      	blx	r3
 800ae74:	2000      	movs	r0, #0
 800ae76:	e7e0      	b.n	800ae3a <_raise_r+0x12>

0800ae78 <raise>:
 800ae78:	4b02      	ldr	r3, [pc, #8]	; (800ae84 <raise+0xc>)
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	6818      	ldr	r0, [r3, #0]
 800ae7e:	f7ff bfd3 	b.w	800ae28 <_raise_r>
 800ae82:	bf00      	nop
 800ae84:	2000000c 	.word	0x2000000c

0800ae88 <_kill_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4d07      	ldr	r5, [pc, #28]	; (800aea8 <_kill_r+0x20>)
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	4611      	mov	r1, r2
 800ae94:	602b      	str	r3, [r5, #0]
 800ae96:	f7f6 fead 	bl	8001bf4 <_kill>
 800ae9a:	1c43      	adds	r3, r0, #1
 800ae9c:	d102      	bne.n	800aea4 <_kill_r+0x1c>
 800ae9e:	682b      	ldr	r3, [r5, #0]
 800aea0:	b103      	cbz	r3, 800aea4 <_kill_r+0x1c>
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	bd38      	pop	{r3, r4, r5, pc}
 800aea6:	bf00      	nop
 800aea8:	2000084c 	.word	0x2000084c

0800aeac <_getpid_r>:
 800aeac:	f7f6 be9a 	b.w	8001be4 <_getpid>

0800aeb0 <atan2f>:
 800aeb0:	f000 b81e 	b.w	800aef0 <__ieee754_atan2f>

0800aeb4 <sqrtf>:
 800aeb4:	b508      	push	{r3, lr}
 800aeb6:	ed2d 8b02 	vpush	{d8}
 800aeba:	eeb0 8a40 	vmov.f32	s16, s0
 800aebe:	f000 f8b7 	bl	800b030 <__ieee754_sqrtf>
 800aec2:	eeb4 8a48 	vcmp.f32	s16, s16
 800aec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeca:	d60c      	bvs.n	800aee6 <sqrtf+0x32>
 800aecc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800aeec <sqrtf+0x38>
 800aed0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800aed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed8:	d505      	bpl.n	800aee6 <sqrtf+0x32>
 800aeda:	f7fd f861 	bl	8007fa0 <__errno>
 800aede:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800aee2:	2321      	movs	r3, #33	; 0x21
 800aee4:	6003      	str	r3, [r0, #0]
 800aee6:	ecbd 8b02 	vpop	{d8}
 800aeea:	bd08      	pop	{r3, pc}
 800aeec:	00000000 	.word	0x00000000

0800aef0 <__ieee754_atan2f>:
 800aef0:	ee10 2a90 	vmov	r2, s1
 800aef4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800aef8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800aefc:	b510      	push	{r4, lr}
 800aefe:	eef0 7a40 	vmov.f32	s15, s0
 800af02:	dc06      	bgt.n	800af12 <__ieee754_atan2f+0x22>
 800af04:	ee10 0a10 	vmov	r0, s0
 800af08:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800af0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800af10:	dd04      	ble.n	800af1c <__ieee754_atan2f+0x2c>
 800af12:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800af16:	eeb0 0a67 	vmov.f32	s0, s15
 800af1a:	bd10      	pop	{r4, pc}
 800af1c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800af20:	d103      	bne.n	800af2a <__ieee754_atan2f+0x3a>
 800af22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af26:	f000 b887 	b.w	800b038 <atanf>
 800af2a:	1794      	asrs	r4, r2, #30
 800af2c:	f004 0402 	and.w	r4, r4, #2
 800af30:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800af34:	b943      	cbnz	r3, 800af48 <__ieee754_atan2f+0x58>
 800af36:	2c02      	cmp	r4, #2
 800af38:	d05e      	beq.n	800aff8 <__ieee754_atan2f+0x108>
 800af3a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b00c <__ieee754_atan2f+0x11c>
 800af3e:	2c03      	cmp	r4, #3
 800af40:	bf08      	it	eq
 800af42:	eef0 7a47 	vmoveq.f32	s15, s14
 800af46:	e7e6      	b.n	800af16 <__ieee754_atan2f+0x26>
 800af48:	b941      	cbnz	r1, 800af5c <__ieee754_atan2f+0x6c>
 800af4a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b010 <__ieee754_atan2f+0x120>
 800af4e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b014 <__ieee754_atan2f+0x124>
 800af52:	2800      	cmp	r0, #0
 800af54:	bfb8      	it	lt
 800af56:	eef0 7a40 	vmovlt.f32	s15, s0
 800af5a:	e7dc      	b.n	800af16 <__ieee754_atan2f+0x26>
 800af5c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800af60:	d110      	bne.n	800af84 <__ieee754_atan2f+0x94>
 800af62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800af66:	f104 34ff 	add.w	r4, r4, #4294967295
 800af6a:	d107      	bne.n	800af7c <__ieee754_atan2f+0x8c>
 800af6c:	2c02      	cmp	r4, #2
 800af6e:	d846      	bhi.n	800affe <__ieee754_atan2f+0x10e>
 800af70:	4b29      	ldr	r3, [pc, #164]	; (800b018 <__ieee754_atan2f+0x128>)
 800af72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af76:	edd4 7a00 	vldr	s15, [r4]
 800af7a:	e7cc      	b.n	800af16 <__ieee754_atan2f+0x26>
 800af7c:	2c02      	cmp	r4, #2
 800af7e:	d841      	bhi.n	800b004 <__ieee754_atan2f+0x114>
 800af80:	4b26      	ldr	r3, [pc, #152]	; (800b01c <__ieee754_atan2f+0x12c>)
 800af82:	e7f6      	b.n	800af72 <__ieee754_atan2f+0x82>
 800af84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800af88:	d0df      	beq.n	800af4a <__ieee754_atan2f+0x5a>
 800af8a:	1a5b      	subs	r3, r3, r1
 800af8c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800af90:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800af94:	da1a      	bge.n	800afcc <__ieee754_atan2f+0xdc>
 800af96:	2a00      	cmp	r2, #0
 800af98:	da01      	bge.n	800af9e <__ieee754_atan2f+0xae>
 800af9a:	313c      	adds	r1, #60	; 0x3c
 800af9c:	db19      	blt.n	800afd2 <__ieee754_atan2f+0xe2>
 800af9e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800afa2:	f000 f91d 	bl	800b1e0 <fabsf>
 800afa6:	f000 f847 	bl	800b038 <atanf>
 800afaa:	eef0 7a40 	vmov.f32	s15, s0
 800afae:	2c01      	cmp	r4, #1
 800afb0:	d012      	beq.n	800afd8 <__ieee754_atan2f+0xe8>
 800afb2:	2c02      	cmp	r4, #2
 800afb4:	d017      	beq.n	800afe6 <__ieee754_atan2f+0xf6>
 800afb6:	2c00      	cmp	r4, #0
 800afb8:	d0ad      	beq.n	800af16 <__ieee754_atan2f+0x26>
 800afba:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800b020 <__ieee754_atan2f+0x130>
 800afbe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800afc2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b024 <__ieee754_atan2f+0x134>
 800afc6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800afca:	e7a4      	b.n	800af16 <__ieee754_atan2f+0x26>
 800afcc:	eddf 7a10 	vldr	s15, [pc, #64]	; 800b010 <__ieee754_atan2f+0x120>
 800afd0:	e7ed      	b.n	800afae <__ieee754_atan2f+0xbe>
 800afd2:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b028 <__ieee754_atan2f+0x138>
 800afd6:	e7ea      	b.n	800afae <__ieee754_atan2f+0xbe>
 800afd8:	ee17 3a90 	vmov	r3, s15
 800afdc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800afe0:	ee07 3a90 	vmov	s15, r3
 800afe4:	e797      	b.n	800af16 <__ieee754_atan2f+0x26>
 800afe6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b020 <__ieee754_atan2f+0x130>
 800afea:	ee77 7a80 	vadd.f32	s15, s15, s0
 800afee:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800b024 <__ieee754_atan2f+0x134>
 800aff2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aff6:	e78e      	b.n	800af16 <__ieee754_atan2f+0x26>
 800aff8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800b024 <__ieee754_atan2f+0x134>
 800affc:	e78b      	b.n	800af16 <__ieee754_atan2f+0x26>
 800affe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b02c <__ieee754_atan2f+0x13c>
 800b002:	e788      	b.n	800af16 <__ieee754_atan2f+0x26>
 800b004:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b028 <__ieee754_atan2f+0x138>
 800b008:	e785      	b.n	800af16 <__ieee754_atan2f+0x26>
 800b00a:	bf00      	nop
 800b00c:	c0490fdb 	.word	0xc0490fdb
 800b010:	3fc90fdb 	.word	0x3fc90fdb
 800b014:	bfc90fdb 	.word	0xbfc90fdb
 800b018:	0800b6c4 	.word	0x0800b6c4
 800b01c:	0800b6d0 	.word	0x0800b6d0
 800b020:	33bbbd2e 	.word	0x33bbbd2e
 800b024:	40490fdb 	.word	0x40490fdb
 800b028:	00000000 	.word	0x00000000
 800b02c:	3f490fdb 	.word	0x3f490fdb

0800b030 <__ieee754_sqrtf>:
 800b030:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b034:	4770      	bx	lr
	...

0800b038 <atanf>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	ee10 5a10 	vmov	r5, s0
 800b03e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b042:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800b046:	eef0 7a40 	vmov.f32	s15, s0
 800b04a:	db10      	blt.n	800b06e <atanf+0x36>
 800b04c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b050:	dd04      	ble.n	800b05c <atanf+0x24>
 800b052:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b056:	eeb0 0a67 	vmov.f32	s0, s15
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
 800b05c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b194 <atanf+0x15c>
 800b060:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800b198 <atanf+0x160>
 800b064:	2d00      	cmp	r5, #0
 800b066:	bfd8      	it	le
 800b068:	eef0 7a40 	vmovle.f32	s15, s0
 800b06c:	e7f3      	b.n	800b056 <atanf+0x1e>
 800b06e:	4b4b      	ldr	r3, [pc, #300]	; (800b19c <atanf+0x164>)
 800b070:	429c      	cmp	r4, r3
 800b072:	dc10      	bgt.n	800b096 <atanf+0x5e>
 800b074:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800b078:	da0a      	bge.n	800b090 <atanf+0x58>
 800b07a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b1a0 <atanf+0x168>
 800b07e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b086:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b08e:	dce2      	bgt.n	800b056 <atanf+0x1e>
 800b090:	f04f 33ff 	mov.w	r3, #4294967295
 800b094:	e013      	b.n	800b0be <atanf+0x86>
 800b096:	f000 f8a3 	bl	800b1e0 <fabsf>
 800b09a:	4b42      	ldr	r3, [pc, #264]	; (800b1a4 <atanf+0x16c>)
 800b09c:	429c      	cmp	r4, r3
 800b09e:	dc4f      	bgt.n	800b140 <atanf+0x108>
 800b0a0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b0a4:	429c      	cmp	r4, r3
 800b0a6:	dc41      	bgt.n	800b12c <atanf+0xf4>
 800b0a8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b0ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b0b0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b0c4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b1a8 <atanf+0x170>
 800b0c8:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b1ac <atanf+0x174>
 800b0cc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b1b0 <atanf+0x178>
 800b0d0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b0d4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b0d8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b1b4 <atanf+0x17c>
 800b0dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b0e0:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b1b8 <atanf+0x180>
 800b0e4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b0e8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b1bc <atanf+0x184>
 800b0ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b0f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b1c0 <atanf+0x188>
 800b0f4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b0f8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b1c4 <atanf+0x18c>
 800b0fc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b100:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b1c8 <atanf+0x190>
 800b104:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b108:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b1cc <atanf+0x194>
 800b10c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b110:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b1d0 <atanf+0x198>
 800b114:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b118:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b11c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b120:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b124:	d121      	bne.n	800b16a <atanf+0x132>
 800b126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b12a:	e794      	b.n	800b056 <atanf+0x1e>
 800b12c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b130:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b134:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b138:	2301      	movs	r3, #1
 800b13a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b13e:	e7be      	b.n	800b0be <atanf+0x86>
 800b140:	4b24      	ldr	r3, [pc, #144]	; (800b1d4 <atanf+0x19c>)
 800b142:	429c      	cmp	r4, r3
 800b144:	dc0b      	bgt.n	800b15e <atanf+0x126>
 800b146:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b14a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b14e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b152:	2302      	movs	r3, #2
 800b154:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b15c:	e7af      	b.n	800b0be <atanf+0x86>
 800b15e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b162:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b166:	2303      	movs	r3, #3
 800b168:	e7a9      	b.n	800b0be <atanf+0x86>
 800b16a:	4a1b      	ldr	r2, [pc, #108]	; (800b1d8 <atanf+0x1a0>)
 800b16c:	491b      	ldr	r1, [pc, #108]	; (800b1dc <atanf+0x1a4>)
 800b16e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b172:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b176:	ed93 0a00 	vldr	s0, [r3]
 800b17a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800b17e:	ed92 0a00 	vldr	s0, [r2]
 800b182:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b186:	2d00      	cmp	r5, #0
 800b188:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b18c:	bfb8      	it	lt
 800b18e:	eef1 7a67 	vneglt.f32	s15, s15
 800b192:	e760      	b.n	800b056 <atanf+0x1e>
 800b194:	3fc90fdb 	.word	0x3fc90fdb
 800b198:	bfc90fdb 	.word	0xbfc90fdb
 800b19c:	3edfffff 	.word	0x3edfffff
 800b1a0:	7149f2ca 	.word	0x7149f2ca
 800b1a4:	3f97ffff 	.word	0x3f97ffff
 800b1a8:	3c8569d7 	.word	0x3c8569d7
 800b1ac:	3d4bda59 	.word	0x3d4bda59
 800b1b0:	bd6ef16b 	.word	0xbd6ef16b
 800b1b4:	3d886b35 	.word	0x3d886b35
 800b1b8:	3dba2e6e 	.word	0x3dba2e6e
 800b1bc:	3e124925 	.word	0x3e124925
 800b1c0:	3eaaaaab 	.word	0x3eaaaaab
 800b1c4:	bd15a221 	.word	0xbd15a221
 800b1c8:	bd9d8795 	.word	0xbd9d8795
 800b1cc:	bde38e38 	.word	0xbde38e38
 800b1d0:	be4ccccd 	.word	0xbe4ccccd
 800b1d4:	401bffff 	.word	0x401bffff
 800b1d8:	0800b6dc 	.word	0x0800b6dc
 800b1dc:	0800b6ec 	.word	0x0800b6ec

0800b1e0 <fabsf>:
 800b1e0:	ee10 3a10 	vmov	r3, s0
 800b1e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1e8:	ee00 3a10 	vmov	s0, r3
 800b1ec:	4770      	bx	lr
	...

0800b1f0 <_init>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	bf00      	nop
 800b1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f6:	bc08      	pop	{r3}
 800b1f8:	469e      	mov	lr, r3
 800b1fa:	4770      	bx	lr

0800b1fc <_fini>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	bf00      	nop
 800b200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b202:	bc08      	pop	{r3}
 800b204:	469e      	mov	lr, r3
 800b206:	4770      	bx	lr
